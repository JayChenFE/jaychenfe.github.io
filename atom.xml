<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>习习的自留地</title>
  
  <subtitle>写代码是件很有意思的事情</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaychenfe.github.io/"/>
  <updated>2020-08-05T02:40:11.876Z</updated>
  <id>https://jaychenfe.github.io/</id>
  
  <author>
    <name>习习</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot启动引导-自动装备实例SpringWebMvc</title>
    <link href="https://jaychenfe.github.io/2020/01/03/SpringBoot%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC-%E8%87%AA%E5%8A%A8%E8%A3%85%E5%A4%87%E5%AE%9E%E4%BE%8BSpringWebMvc/"/>
    <id>https://jaychenfe.github.io/2020/01/03/SpringBoot启动引导-自动装备实例SpringWebMvc/</id>
    <published>2020-01-03T15:55:19.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot启动引导-自动动装配</title>
    <link href="https://jaychenfe.github.io/2020/01/02/SpringBoot%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC-%E8%87%AA%E5%8A%A8%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>https://jaychenfe.github.io/2020/01/02/SpringBoot启动引导-自动动装配/</id>
    <published>2020-01-02T17:34:53.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="6-SpringBoot的自动装配"><a href="#6-SpringBoot的自动装配" class="headerlink" title="6. SpringBoot的自动装配"></a>6. SpringBoot的自动装配</h2><p>SpringBoot的自动配置完全由 <code>@EnableAutoConfiguration</code> 开启。</p><p><code>@EnableAutoConfiguration</code> 的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration</span><br></pre></td></tr></table></figure><p>文档注释原文翻译：</p><blockquote><p>Enable auto-configuration of the Spring Application Context, attempting to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your classpath and what beans you have defined. For example, if you have <code>tomcat-embedded.jar</code> on your classpath you are likely to want a <code>TomcatServletWebServerFactory</code> (unless you have defined your own <code>ServletWebServerFactory</code> bean).</p><p>启用Spring-ApplicationContext的自动配置，并且会尝试猜测和配置您可能需要的Bean。通常根据您的类路径和定义的Bean来应用自动配置类。例如，如果您的类路径上有 <code>tomcat-embedded.jar</code>，则可能需要 <code>TomcatServletWebServerFactory</code> （除非自己已经定义了 <code>ServletWebServerFactory</code> 的Bean）。</p><p>When using <code>SpringBootApplication</code>, the auto-configuration of the context is automatically enabled and adding this annotation has therefore no additional effect.</p><p>使用 <code>@SpringBootApplication</code> 时，将自动启用上下文的自动配置，因此再添加该注解不会产生任何其他影响。</p><p>Auto-configuration tries to be as intelligent as possible and will back-away as you define more of your own configuration. You can always manually <code>exclude()</code> any configuration that you never want to apply (use <code>excludeName()</code> if you don’t have access to them). You can also exclude them via the <code>spring.autoconfigure.exclude</code> property. Auto-configuration is always applied after user-defined beans have been registered.</p><p>自动配置会尝试尽可能地智能化，并且在您定义更多自定义配置时会自动退出（被覆盖）。您始终可以手动排除掉任何您不想应用的配置（如果您无法访问它们，请使用 <code>excludeName()</code> 方法），您也可以通过 <code>spring.autoconfigure.exclude</code> 属性排除它们。自动配置始终在注册用户自定义的Bean之后应用。</p><p>The package of the class that is annotated with <code>@EnableAutoConfiguration</code>, usually via <code>@SpringBootApplication</code>, has specific significance and is often used as a ‘default’. For example, it will be used when scanning for <code>@Entity</code> classes. It is generally recommended that you place <code>@EnableAutoConfiguration</code> (if you’re not using <code>@SpringBootApplication</code>) in a root package so that all sub-packages and classes can be searched.</p><p>通常被 <code>@EnableAutoConfiguration</code> 标注的类（如 <code>@SpringBootApplication</code>）的包具有特定的意义，通常被用作“默认值”。例如，在扫描@Entity类时将使用它。通常建议您将 <code>@EnableAutoConfiguration</code>（如果您未使用 <code>@SpringBootApplication</code>）放在根包中，以便可以搜索所有包及子包下的类。</p><p>Auto-configuration classes are regular Spring <code>Configuration</code> beans. They are located using the <code>SpringFactoriesLoader</code> mechanism (keyed against this class). Generally auto-configuration beans are <code>@Conditional</code> beans (most often using <code>@ConditionalOnClass</code> and <code>@ConditionalOnMissingBean</code> annotations).</p><p>自动配置类也是常规的Spring配置类。它们使用 <code>SpringFactoriesLoader</code> 机制定位（针对此类）。通常自动配置类也是 <code>@Conditional</code> Bean（最经常的情况下是使用 <code>@ConditionalOnClass</code> 和 <code>@ConditionalOnMissingBean</code> 标注）。</p></blockquote><p><code>@EnableAutoConfiguration</code> 也是一个组合注解,分开来看</p><h3 id="6-1-AutoConfigurationPackage"><a href="#6-1-AutoConfigurationPackage" class="headerlink" title="6.1 @AutoConfigurationPackage"></a>6.1 @AutoConfigurationPackage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that the package containing the annotated class should be registered with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> AutoConfigurationPackages&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> 表示包含该注解的类所在的包应该在 AutoConfigurationPackages 中注册。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> AutoConfigurationPackages</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage</span><br></pre></td></tr></table></figure><p>它的实现原理是在注解上标注了 <code>@Import</code>，导入了一个 <code>AutoConfigurationPackages.Registrar</code> 。</p><h4 id="6-1-1-AutoConfigurationPackages-Registrar"><a href="#6-1-1-AutoConfigurationPackages-Registrar" class="headerlink" title="6.1.1 AutoConfigurationPackages.Registrar"></a>6.1.1 AutoConfigurationPackages.Registrar</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125; to store the base package from the importing</span></span><br><span class="line"><span class="comment"> ImportBeanDefinitionRegistrar 用于保存导入的配置类所在的根包</span></span><br><span class="line"><span class="comment"> * configuration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">register(registry, <span class="keyword">new</span> PackageImport(metadata).getPackageName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImport(metadata));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它就是实现把主配置所在根包保存起来以便后期扫描用的。分析源码：</p><p><code>Registrar</code> 实现了 <code>ImportBeanDefinitionRegistrar</code> 接口，它向IOC容器中要手动注册组件。</p><p>在重写的 <code>registerBeanDefinitions</code> 方法中，它要调用外部类 <code>AutoConfigurationPackages</code> 的register方法。</p><p>看传入的参数：<strong>new PackageImport(metadata).getPackageName()</strong>,它实例化的 <code>PackageImport</code> 对象的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PackageImport(AnnotationMetadata metadata) &#123;</span><br><span class="line">    <span class="keyword">this</span>.packageName = ClassUtils.getPackageName(metadata.getClassName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它取了一个 metadata 的所在包名。那 metadata 又是什么呢？</p><p>翻看 <code>ImportBeanDefinitionRegistrar</code>的文档注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ......</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> importingClassMetadata annotation metadata of the importing class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry current bean definition registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <strong>importingClassMetadata</strong> 的参数说明：<strong>导入类的注解元数据</strong>。</p><p>它实际代表的是被 <code>@Import</code> 标记的类的信息。</p><p>那在 SpringBoot 的主启动类中，被标记的肯定就是最开始案例里的 <code>DemoApplication</code>。</p><p>也就是说它是 <code>DemoApplication</code> 的类信息，那获取它的包名就是获取主启动类的所在包。</p><p>拿到这个包有什么意义呢？不清楚，那就回到那个 <code>Registrar</code> 中，看它调用的 register 方法都干了什么：</p><h4 id="6-1-2-register方法"><a href="#6-1-2-register方法" class="headerlink" title="6.1.2 register方法"></a>6.1.2 register方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEAN = AutoConfigurationPackages.class.getName();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(BeanDefinitionRegistry registry, String... packageNames)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断 BeanFactory 中是否包含 AutoConfigurationPackages</span></span><br><span class="line">    <span class="keyword">if</span> (registry.containsBeanDefinition(BEAN)) &#123;</span><br><span class="line">        BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);</span><br><span class="line">        ConstructorArgumentValues constructorArguments = beanDefinition.getConstructorArgumentValues();</span><br><span class="line">        <span class="comment">// addBasePackages：添加根包扫描包</span></span><br><span class="line">        constructorArguments.addIndexedArgumentValue(<span class="number">0</span>, addBasePackages(constructorArguments, packageNames));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        GenericBeanDefinition beanDefinition = <span class="keyword">new</span> GenericBeanDefinition();</span><br><span class="line">        beanDefinition.setBeanClass(BasePackages.class);</span><br><span class="line">        beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(<span class="number">0</span>, packageNames);</span><br><span class="line">        beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        registry.registerBeanDefinition(BEAN, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>划重点：它要判断当前IOC容器中是否包含 <code>AutoConfigurationPackages</code> 。如果有，就会拿到刚才传入的包名，设置到一个 <strong>basePackage</strong> 里面！basePackage 的意义很明显是根包。</p><p>换句话说，它要<strong>取主启动类所在包及子包下的组件</strong>。</p><p>到这里，就呼应了文档注释中的描述，也解释了为什么 <strong>SpringBoot 的启动器一定要在所有类的最外层</strong>。</p><h3 id="6-2-Import-AutoConfigurationImportSelector-class"><a href="#6-2-Import-AutoConfigurationImportSelector-class" class="headerlink" title="6.2 @Import(AutoConfigurationImportSelector.class)"></a>6.2 @Import(AutoConfigurationImportSelector.class)</h3><p>根据上一章节的基础，看到这个也不难理解，它导入了一个 <code>ImportSelector</code>，来向容器中导入组件。</p><p>导入的组件是：<code>AutoConfigurationImportSelector</code></p><h4 id="6-2-1-AutoConfigurationImportSelector"><a href="#6-2-1-AutoConfigurationImportSelector" class="headerlink" title="6.2.1 AutoConfigurationImportSelector"></a>6.2.1 AutoConfigurationImportSelector</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware,</span><br><span class="line">ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered</span><br></pre></td></tr></table></figure><p>文档注释原文翻译：</p><blockquote><p><code>DeferredImportSelector</code> to handle auto-configuration. This class can also be subclassed if a custom variant of <code>@EnableAutoConfiguration</code> is needed.</p><p><code>DeferredImportSelector</code> 处理自动配置。如果需要自定义扩展 <code>@EnableAutoConfiguration</code>，则也可以编写该类的子类。</p></blockquote><p>咱能看出来它是 <code>ImportSelector</code> , 可它又特别提到了 <code>DeferredImportSelector</code>，它又是什么呢？</p><h4 id="6-2-2-DeferredImportSelector"><a href="#6-2-2-DeferredImportSelector" class="headerlink" title="6.2.2 DeferredImportSelector"></a>6.2.2 DeferredImportSelector</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface DeferredImportSelector extends ImportSelector</span><br></pre></td></tr></table></figure><p>它是 <code>ImportSelector</code> 的子接口，它的文档注释原文和翻译：</p><blockquote><p>A variation of <code>ImportSelector</code> that runs after all <code>@Configuration</code> beans have been processed. This type of selector can be particularly useful when the selected imports are <code>@Conditional</code> . Implementations can also extend the <code>org.springframework.core.Ordered</code> interface or use the <code>org.springframework.core.annotation.Order</code> annotation to indicate a precedence against other <code>DeferredImportSelectors</code> . Implementations may also provide an import group which can provide additional sorting and filtering logic across different selectors.</p><p><code>ImportSelector</code> 的一种扩展，在处理完所有 <code>@Configuration</code> 类型的Bean之后运行。当所选导入为 <code>@Conditional</code> 时，这种类型的选择器特别有用。</p><p>实现类还可以扩展 <code>Ordered</code> 接口，或使用 <code>@Order</code> 注解来指示相对于其他 <code>DeferredImportSelector</code> 的优先级。</p><p>实现类也可以提供导入组，该导入组可以提供跨不同选择器的其他排序和筛选逻辑。</p></blockquote><p>由此我们可以知道，<code>DeferredImportSelector</code> 的执行时机，是<strong>在 <code>@Configuration</code> 注解中的其他逻辑被处理完毕之后（包括对 <code>@ImportResource</code>、<code>@Bean</code> 这些注解的处理）再执行</strong>，换句话说，<strong><code>DeferredImportSelector</code> 的执行时机比 <code>ImportSelector</code> 更晚</strong>。</p><hr><p>回到 <code>AutoConfigurationImportSelector</code>，它的核心部分，就是 <code>ImportSelector</code> 的 <code>selectImport</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    if (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        return NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">            .loadMetadata(this.beanClassLoader);</span><br><span class="line">    // 加载自动配置类</span><br><span class="line">    AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata, </span><br><span class="line">            annotationMetadata);</span><br><span class="line">    return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键的源码在 <code>getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata)</code> ：</p><h4 id="6-2-3-getAutoConfigurationEntry-autoConfigurationMetadata-annotationMetadata"><a href="#6-2-3-getAutoConfigurationEntry-autoConfigurationMetadata-annotationMetadata" class="headerlink" title="6.2.3 getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata)"></a>6.2.3 getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Return the &#123;@link AutoConfigurationEntry&#125; based on the &#123;@link AnnotationMetadata&#125;</span><br><span class="line"> * of the importing &#123;@link Configuration @Configuration&#125; class.</span><br><span class="line"> * </span><br><span class="line"> * 根据导入的@Configuration类的AnnotationMetadata返回AutoConfigurationImportSelector.AutoConfigurationEntry。</span><br><span class="line"> */</span><br><span class="line">protected AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata,</span><br><span class="line">         AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    if (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        return EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">    // 【核心】加载候选的自动配置类</span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    return new AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法里有一个非常关键的集合：<strong>configurations</strong>（最后直接拿他来返回出去了，给 <code>selectImports</code> 方法转成 <code>String[]</code>）。</p><p>既然最后拿它返回出去，必然它是导入其他组件的核心。</p><p>这个 <code>configurations</code> 集合的数据，都是通过 <code>getCandidateConfigurations</code> 方法来获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">    return EnableAutoConfiguration.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">    // SPI机制加载自动配置类</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">             getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br><span class="line">             + &quot;are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">    return configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法又调用了 <code>SpringFactoriesLoader.loadFactoryNames</code> 方法，传入的Class就是 <code>@EnableAutoConfiguration</code>：</p><h4 id="6-2-4-SpringFactoriesLoader-loadFactoryNames"><a href="#6-2-4-SpringFactoriesLoader-loadFactoryNames" class="headerlink" title="6.2.4 SpringFactoriesLoader.loadFactoryNames"></a>6.2.4 SpringFactoriesLoader.loadFactoryNames</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public static final String FACTORIES_RESOURCE_LOCATION = &quot;META-INF/spring.factories&quot;;</span><br><span class="line"></span><br><span class="line">public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) &#123;</span><br><span class="line">    String factoryClassName = factoryClass.getName();</span><br><span class="line">    //     ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓</span><br><span class="line">    return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">    if (result != null) &#123;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓</span><br><span class="line">        Enumeration&lt;URL&gt; urls = (classLoader != null ?</span><br><span class="line">                 classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">                 ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">        result = new LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        while (urls.hasMoreElements()) &#123;</span><br><span class="line">            URL url = urls.nextElement();</span><br><span class="line">            UrlResource resource = new UrlResource(url);</span><br><span class="line">            Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">            for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                String factoryClassName = ((String) entry.getKey()).trim();</span><br><span class="line">                for (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">                    result.add(factoryClassName, factoryName.trim());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(classLoader, result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Unable to load factories from location [&quot; +</span><br><span class="line">                                       FACTORIES_RESOURCE_LOCATION + &quot;]&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中使用 classLoader 去加载了指定常量路径下的资源： <code>FACTORIES_RESOURCE_LOCATION</code> ，而这个常量指定的路径实际是：<strong>META-INF/spring.factories</strong> 。</p><p>这个文件在 <code>spring-boot-autoconfiguration</code> 包下可以找到。</p><p><code>spring-boot-autoconfiguration</code> 包下 <code>META-INF/spring.factories</code> 节选：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Listeners</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Filters</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span><br><span class="line"></span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>之后拿到这个资源文件，以 Properties 的形式加载，并取出 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code> 指定的所有自动配置类（是一个很大的字符串，里面都是自动配置类的全限定类名），装配到IOC容器中，之后自动配置类就会通过 <code>ImportSelector</code> 和 <code>@Import</code> 的机制被创建出来，之后就生效了。</p><p>这也就解释了为什么 <strong>即便没有任何配置文件，SpringBoot的Web应用都能正常运行</strong>。</p><h4 id="6-2-5-【总结规律】"><a href="#6-2-5-【总结规律】" class="headerlink" title="6.2.5 【总结规律】"></a>6.2.5 【总结规律】</h4><p>从上面的 Properties 中发现，所有配置的 <code>EnableAutoConfiguration</code> 的自动配置类，都<strong>以 AutoConfiguration 结尾</strong>！由此规律，以后我们要了解一个 SpringBoot 的模块或者第三方集成的模块时，就可以<strong>大胆猜测基本上一定会有 XXXAutoConfiguration 类出现</strong>！</p><h3 id="6-3-【扩展】SpringBoot使用的工厂机制"><a href="#6-3-【扩展】SpringBoot使用的工厂机制" class="headerlink" title="6.3 【扩展】SpringBoot使用的工厂机制"></a>6.3 【扩展】SpringBoot使用的工厂机制</h3><p>SpringBoot 在非常多的位置都利用类似于上面 “通过读取 <code>spring.factories</code> 加载一组预先配置的类” 的机制，而这个机制的核心源码来自 <code>SpringFactoriesLoader</code> 。这一章节我们来详细了解一下这个类，对于后续 SpringBoot 的应用启动过程的源码阅读和原理的理解都有所帮助。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.core.io.support;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * ......</span><br><span class="line"> *</span><br><span class="line"> * @since 3.2</span><br><span class="line"> */</span><br><span class="line">public final class SpringFactoriesLoader</span><br></pre></td></tr></table></figure><p>我们发现它不是来自 SpringBoot，而是在 SpringFramework3.2 就已经有了的类。它的文档注释原文翻译：</p><blockquote><p>General purpose factory loading mechanism for internal use within the framework. SpringFactoriesLoader loads and instantiates factories of a given type from <code>&quot;META-INF/spring.factories&quot;</code> files which may be present in multiple JAR files in the classpath. The <code>spring.factories</code> file must be in <code>Properties</code> format, where the key is the fully qualified name of the interface or abstract class, and the value is a comma-separated list of implementation class names. For example: <code>example.MyService=example.MyServiceImpl1,example.MyServiceImpl2</code> where example.MyService is the name of the interface, and MyServiceImpl1 and MyServiceImpl2 are two implementations.</p><p>它是一个框架内部内部使用的通用工厂加载机制。</p><p><code>SpringFactoriesLoader</code> 从 <code>META-INF/spring.factories</code> 文件中加载并实例化给定类型的工厂，这些文件可能存在于类路径中的多个jar包中。<code>spring.factories</code> 文件必须采用 <strong>properties</strong> 格式，其中key是接口或抽象类的全限定名，而value是用逗号分隔的实现类的全限定类名列表。</p><p>例如：<code>example.MyService=example.MyServiceImpl1,example.MyServiceImpl2</code></p><p>其中 <code>example.MyService</code> 是接口的名称，而 <code>MyServiceImpl1</code> 和 <code>MyServiceImpl2</code> 是两个该接口的实现类。</p></blockquote><p>到这里已经能够发现，这个思路跟Java原生的SPI非常类似。</p><h4 id="6-3-1-【扩展】Java的SPI"><a href="#6-3-1-【扩展】Java的SPI" class="headerlink" title="6.3.1 【扩展】Java的SPI"></a>6.3.1 【扩展】Java的SPI</h4><p>SPI全称为 <strong>Service Provider Interface</strong>，是jdk内置的一种服务提供发现机制。简单来说，它就是一种动态替换发现的机制。</p><p>SPI规定，所有要预先声明的类都应该放在 <code>META-INF/services</code> 中。配置的文件名是接口/抽象类的全限定名，文件内容是抽象类的子类或接口的实现类的全限定类名，如果有多个，借助换行符，一行一个。</p><p>具体使用时，使用jdk内置的 <code>ServiceLoader</code> 类来加载预先配置好的实现类。</p><p>举个例子：</p><p>在 <code>META-INF/services</code> 中声明一个文件名为 <code>com.linkedbear.boot.demo.SpiDemoInterface</code> 的文件，文件内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.linkedbear.boot.demo.SpiDemoInterfaceImpl</span><br></pre></td></tr></table></figure><p>在 <code>com.linkedbear.boot.demo</code> 包下新建一个接口，类名必须跟上面配置的文件名一样：<code>SpiDemoInterface</code>。</p><p>在接口中声明一个 <code>test()</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface SpiDemoInterface &#123;</span><br><span class="line">    void test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再新建一个类 <code>SpiDemoInterfaceImpl</code>，并实现 <code>SpiDemoInterface</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class SpiDemoInterfaceImpl implements SpiDemoInterface &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        System.out.println(&quot;SpiDemoInterfaceImpl#test() run...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写主运行类，测试效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ServiceLoader&lt;SpiDemoInterface&gt; loaders = ServiceLoader.load(SpiDemoInterface.class);</span><br><span class="line">        loaders.foreach(SpiDemoInterface::test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpiDemoInterfaceImpl#test() run...</span><br></pre></td></tr></table></figure><h4 id="6-3-2-SpringFramework的SpringFactoriesLoader"><a href="#6-3-2-SpringFramework的SpringFactoriesLoader" class="headerlink" title="6.3.2 SpringFramework的SpringFactoriesLoader"></a>6.3.2 SpringFramework的SpringFactoriesLoader</h4><p>SpringFramework 利用 <code>SpringFactoriesLoader</code> 都是调用 <code>loadFactoryNames</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Load the fully qualified class names of factory implementations of the</span><br><span class="line"> * given type from &#123;@value #FACTORIES_RESOURCE_LOCATION&#125;, using the given</span><br><span class="line"> * class loader.</span><br><span class="line"> * @param factoryClass the interface or abstract class representing the factory</span><br><span class="line"> * @param classLoader the ClassLoader to use for loading resources; can be</span><br><span class="line"> * &#123;@code null&#125; to use the default</span><br><span class="line"> * @throws IllegalArgumentException if an error occurs while loading factory names</span><br><span class="line"> * @see #loadFactories</span><br><span class="line"> */</span><br><span class="line">public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) &#123;</span><br><span class="line">    String factoryClassName = factoryClass.getName();</span><br><span class="line">    return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档注释原文翻译：</p><blockquote><p>Load the fully qualified class names of factory implementations of the given type from “META-INF/spring.factories”, using the given class loader.</p><p>使用给定的类加载器从 <code>META-INF/spring.factories</code> 中加载给定类型的工厂实现的全限定类名。</p></blockquote><p>文档注释中没有提到接口、抽象类、实现类的概念，结合之前看到过的 <code>spring.factories</code> 文件，应该能意识到它<strong>只是key-value的关系</strong>！</p><p>这么设计的好处：<strong>不再局限于接口-实现类的模式，key可以随意定义！</strong> （如上面的 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code> 是一个注解）</p><p>来看方法实现，第一行代码获取的是要被加载的接口/抽象类的全限定名，下面的 return 分为两部分：<code>loadSpringFactories</code> 和 <code>getOrDefault</code>。<code>getOrDefault</code> 方法很明显是Map中的方法，不再解释，主要来详细看 <code>loadSpringFactories</code> 方法。</p><h4 id="6-3-3-loadSpringFactories"><a href="#6-3-3-loadSpringFactories" class="headerlink" title="6.3.3 loadSpringFactories"></a>6.3.3 loadSpringFactories</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public static final String FACTORIES_RESOURCE_LOCATION = &quot;META-INF/spring.factories&quot;;</span><br><span class="line"></span><br><span class="line">private static final Map&lt;ClassLoader, MultiValueMap&lt;String, String&gt;&gt; cache = new ConcurrentReferenceHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// 这个方法仅接收了一个类加载器</span><br><span class="line">private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">    if (result != null) &#123;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        Enumeration&lt;URL&gt; urls = (classLoader != null ?</span><br><span class="line">                 classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">                 ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">        result = new LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        while (urls.hasMoreElements()) &#123;</span><br><span class="line">            URL url = urls.nextElement();</span><br><span class="line">            UrlResource resource = new UrlResource(url);</span><br><span class="line">            Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">            for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                String factoryClassName = ((String) entry.getKey()).trim();</span><br><span class="line">                for (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">                    result.add(factoryClassName, factoryName.trim());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(classLoader, result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Unable to load factories from location [&quot; +</span><br><span class="line">                                       FACTORIES_RESOURCE_LOCATION + &quot;]&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们分段来看。</p><h5 id="6-3-3-1-获取本地缓存"><a href="#6-3-3-1-获取本地缓存" class="headerlink" title="6.3.3.1 获取本地缓存"></a>6.3.3.1 获取本地缓存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">if (result != null) &#123;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入方法后先从本地缓存中根据当前的类加载器获取是否有一个类型为 <code>MultiValueMap</code> 的值，这个类型有些陌生，我们先看看这是个什么东西：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.util;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Extension of the &#123;@code Map&#125; interface that stores multiple values.</span><br><span class="line"> *</span><br><span class="line"> * @since 3.0</span><br><span class="line"> * @param &lt;K&gt; the key type</span><br><span class="line"> * @param &lt;V&gt; the value element type</span><br><span class="line"> */</span><br><span class="line">public interface MultiValueMap&lt;K, V&gt; extends Map&lt;K, List&lt;V&gt;&gt;</span><br></pre></td></tr></table></figure><p>发现它实际上就是一个 <code>Map&gt;</code>。</p><p>那第一次从cache中肯定获取不到值，故下面的if结构肯定不进入，进入下面的try块。</p><h5 id="6-3-3-2-加载spring-factories"><a href="#6-3-3-2-加载spring-factories" class="headerlink" title="6.3.3.2 加载spring.factories"></a>6.3.3.2 加载spring.factories</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != null ?</span><br><span class="line">         classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">         ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">result = new LinkedMultiValueMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>这部分动作就是获取当前 classpath 下<strong>所有jar包</strong>中有的 <code>spring.factories</code> 文件，并将它们加载到内存中。</p><h5 id="6-3-3-3-缓存到本地"><a href="#6-3-3-3-缓存到本地" class="headerlink" title="6.3.3.3 缓存到本地"></a>6.3.3.3 缓存到本地</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">while (urls.hasMoreElements()) &#123;</span><br><span class="line">    URL url = urls.nextElement();</span><br><span class="line">    UrlResource resource = new UrlResource(url);</span><br><span class="line">    Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">    for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">        String factoryClassName = ((String) entry.getKey()).trim();</span><br><span class="line">        for (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">            result.add(factoryClassName, factoryName.trim());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(classLoader, result);</span><br></pre></td></tr></table></figure><p>它拿到每一个文件，并用 <code>Properties</code> 方式加载文件，之后把这个文件中每一组键值对都加载出来，放入 <code>MultiValueMap</code> 中。</p><p>如果一个接口/抽象类有多个对应的目标类，则使用英文逗号隔开。<code>StringUtils.commaDelimitedListToStringArray</code>会将大字符串拆成一个一个的全限定类名。</p><p>整理完后，整个result放入cache中。下一次再加载时就无需再次加载 <code>spring.factories</code> 文件了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;6-SpringBoot的自动装配&quot;&gt;&lt;a href=&quot;#6-SpringBoot的自动装配&quot; class=&quot;headerlink&quot; title=&quot;6. SpringBoot的自动装配&quot;&gt;&lt;/a&gt;6. SpringBoot的自动装配&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot启动引导-原理概述及包扫描</title>
    <link href="https://jaychenfe.github.io/2019/12/31/SpringBoot%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC-%E5%8E%9F%E7%90%86%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%8C%85%E6%89%AB%E6%8F%8F/"/>
    <id>https://jaychenfe.github.io/2019/12/31/SpringBoot启动引导-原理概述及包扫描/</id>
    <published>2019-12-31T16:42:43.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20191231161238.png" alt=""><br>[toc]</p><h2 id="1-新建入门程序"><a href="#1-新建入门程序" class="headerlink" title="1.新建入门程序"></a>1.新建入门程序</h2><p>使用IDEA的SpringInitializer 创建一个 SpringBoot 应用</p><p>pom文件我只引入了 <code>spring-boot-starter-web</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尝试注释掉<code>@SpringBootApplication</code>注解并启动<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.context.ApplicationContextException: Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean.</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:156) ~[spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>因为没有 <code>ServletWebServerFactory</code>，而导致无法启动IOC容器。<br>那<code>@SpringBootApplication</code>是做什么的呢?</p><h2 id="2-SpringBootApplication"><a href="#2-SpringBootApplication" class="headerlink" title="2.@SpringBootApplication"></a>2.@SpringBootApplication</h2><p>还原<code>@SpringBootApplication</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates a &#123;<span class="doctag">@link</span> Configuration configuration&#125; class that declares one or more</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Bean <span class="doctag">@Bean</span>&#125; methods and also triggers &#123;<span class="doctag">@link</span> EnableAutoConfiguration</span></span><br><span class="line"><span class="comment"> * auto-configuration&#125; and &#123;<span class="doctag">@link</span> ComponentScan component scanning&#125;. This is a convenience</span></span><br><span class="line"><span class="comment"> * annotation that is equivalent to declaring &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125; and &#123;<span class="doctag">@code</span> <span class="doctag">@ComponentScan</span>&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2.0</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 标识了一个配置类，这个配置类上声明了一个或多个 <span class="doctag">@Bean</span> 的方法，并且它会触发自动配置和组件扫描。</span></span><br><span class="line"><span class="comment"> 这是一个很方便的注解，它等价于同时标注 <span class="doctag">@Configuration</span> + <span class="doctag">@EnableAutoConfiguration</span> + <span class="doctag">@ComponentScan</span> 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication</span><br></pre></td></tr></table></figure><p>从SpringBoot1.2.0开始出现的，在 SpringBoot1.1及以前的版本，在启动类上标注的注解应该是三个：<code>@Configuration</code> +<code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code>，只不过从1.2以后 SpringBoot 帮我们整合起来了,即 <code>@SpringBootApplication</code> = (默认属性)<code>@Configuration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code></p><blockquote><p>注意<code>@SpringBootConfiguration</code>点开查看发现里面还是应用了<code>@Configuration</code></p></blockquote><p>文档注释已经描述的很详细：它是一个<strong>组合注解</strong>，包括3个注解。标注它之后就会触发自动配置（<code>@EnableAutoConfiguration</code>）和组件扫描（<code>@ComponentScan</code>）。</p><p>那这三个注解有什么作用呢?</p><h2 id="3-SpringBootConfiguration"><a href="#3-SpringBootConfiguration" class="headerlink" title="3. @SpringBootConfiguration"></a>3. @SpringBootConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that a class provides Spring Boot application</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125;. Can be used as an alternative to the Spring's</span></span><br><span class="line"><span class="comment"> * standard &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; annotation so that configuration can be found</span></span><br><span class="line"><span class="comment"> * automatically (for example in tests).</span></span><br><span class="line"><span class="comment"> 标识一个类作为 SpringBoot 的配置类，</span></span><br><span class="line"><span class="comment"> 它可以是Spring原生的 <span class="doctag">@Configuration</span> 的一种替换方案，目的是这个配置可以被自动发现。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Application should only ever include &lt;em&gt;one&lt;/em&gt; &#123;<span class="doctag">@code</span> <span class="doctag">@SpringBootConfiguration</span>&#125; and</span></span><br><span class="line"><span class="comment"> * most idiomatic Spring Boot applications will inherit it from</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@SpringBootApplication</span>&#125;.</span></span><br><span class="line"><span class="comment"> 应用应当只在主启动类上标注 <span class="doctag">@SpringBootConfiguration</span>，</span></span><br><span class="line"><span class="comment"> 大多数情况下都是直接使用 <span class="doctag">@SpringBootApplication</span>。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration</span><br></pre></td></tr></table></figure><p>从文档注释以及它的声明上可以看出，它被 <code>@Configuration</code> 标注，说明它实际上是标注配置类的，而且是标注主启动类的。</p><h3 id="3-1-Configuration的作用"><a href="#3-1-Configuration的作用" class="headerlink" title="3.1 @Configuration的作用"></a>3.1 @Configuration的作用</h3><p><code>@Configuration</code>是JavaConfig形式的Spring Ioc容器的配置类使用的那个<code>@Configuration</code>，SpringBoot社区推荐使用基于JavaConfig的配置形式，所以，这里的启动类标注了<code>@Configuration</code>之后，本身其实也是一个IoC容器的配置类。</p><p>例如:</p><h4 id="3-1-1表达形式层面"><a href="#3-1-1表达形式层面" class="headerlink" title="3.1.1表达形式层面"></a>3.1.1表达形式层面</h4><p>基于XML配置的方式是这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--bean定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而基于JavaConfig的配置方式是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span>&#123;</span><br><span class="line">    <span class="comment">//bean定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何一个标注了@Configuration的Java类定义都是一个JavaConfig配置类。</p><h4 id="3-1-2注册bean定义层面"><a href="#3-1-2注册bean定义层面" class="headerlink" title="3.1.2注册bean定义层面"></a>3.1.2注册bean定义层面</h4><p>基于XML的配置形式是这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mockService"</span> <span class="attr">class</span>=<span class="string">"..MockServiceImpl"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而基于JavaConfig的配置形式是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MockService <span class="title">mockService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MockServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。</p><h4 id="3-1-3表达依赖注入关系层面"><a href="#3-1-3表达依赖注入关系层面" class="headerlink" title="3.1.3表达依赖注入关系层面"></a>3.1.3表达依赖注入关系层面</h4><p>为了表达bean与bean之间的依赖关系，在XML形式中一般是这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mockService"</span> <span class="attr">class</span>=<span class="string">"..MockServiceImpl"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">propery</span> <span class="attr">name</span> =<span class="string">"dependencyService"</span> <span class="attr">ref</span>=<span class="string">"dependencyService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dependencyService"</span> <span class="attr">class</span>=<span class="string">"DependencyServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而基于JavaConfig的配置形式是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MockService <span class="title">mockService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MockServiceImpl(dependencyService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DependencyService <span class="title">dependencyService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DependencyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个bean的定义依赖其他bean，则直接调用对应的JavaConfig类中依赖bean的创建方法就可以了。</p><p>@Configuration：提到@Configuration就要提到他的搭档@Bean。使用这两个注解就可以创建一个简单的spring配置类，可以用来替代相应的xml配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.test.Car"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wheel"</span> <span class="attr">ref</span> = <span class="string">"wheel"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"wheel"</span> <span class="attr">class</span>=<span class="string">"com.test.Wheel"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Conf</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        car.setWheel(wheel());</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Wheel <span class="title">wheel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wheel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-4验证"><a href="#3-1-4验证" class="headerlink" title="3.1.4验证"></a>3.1.4验证</h4><p>初始化一个IOC容器，并打印IOC容器中的所有bean的name：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(ConfigurationDemo.class);</span><br><span class="line">        String[] beanDefinitionNames = ctx.getBeanDefinitionNames();</span><br><span class="line">        Stream.of(beanDefinitionNames).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">Conf</span><br><span class="line">wheel</span><br><span class="line">car</span><br></pre></td></tr></table></figure><p>可以发现组件，以及配置类本身被成功加载。</p><p><code>@Configuration</code>的注解类标识这个类可以使用Spring IoC容器作为bean定义的来源。</p><p><code>@Bean</code>注解告诉Spring，一个带有@Bean的注解方法将返回一个对象，该对象应该被注册为在Spring应用程序上下文中的bean。</p><h3 id="3-2-SpringBootConfiguration的附加作用"><a href="#3-2-SpringBootConfiguration的附加作用" class="headerlink" title="3.2 @SpringBootConfiguration的附加作用"></a>3.2 @SpringBootConfiguration的附加作用</h3><p>借助IDEA搜索 <code>@SpringBootConfiguration</code> 的出现位置，发现除了 <code>@SpringBootApplication</code> 外，只有一个位置使用了它：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20200101151346.png" alt=""></p><p>发现是一个测试包中的usage（默认的 <code>SpringInitializer</code> 会把 <code>spring-boot-starter-test</code> 一起带进来，故可以搜到这个usage。如果小伙伴手动使用Maven创建 SpringBoot 应用且没有导入 <code>spring-boot-start-test</code> 依赖，则这个usage都不会搜到）。</p><p>翻看 SpringBoot 的官方文档，发现通篇只有两个位置提到了 <code>@SpringBootConfiguration</code>，还真有一个跟测试相关：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-testing-spring-boot-applications-detecting-config" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-testing-spring-boot-applications-detecting-config</a></p><p>第三段中有对 <code>@SpringBootConfiguration</code> 的描述：</p><blockquote><p>The search algorithm works up from the package that contains the test until it finds a class annotated with <code>@SpringBootApplication</code> or <code>@SpringBootConfiguration</code>. As long as you structured your code in a sensible way, your main configuration is usually found.</p><p>搜索算法从包含测试的程序包开始工作，直到找到带有 <code>@SpringBootApplication</code> 或 <code>@SpringBootConfiguration</code> 标注的类。只要您以合理的方式对代码进行结构化，通常就可以找到您的主要配置。</p></blockquote><p>这很明显是解释了 SpringBoot 主启动类与测试的关系，标注 <code>@SpringBootApplication</code> 或 <code>@SpringBootConfiguration</code> 的主启动类会被 Spring测试框架 的搜索算法找到。回过头看上面的截图，引用 <code>@SpringBootConfiguration</code> 的方法恰好叫 <strong>getOrFindConfigurationClasses</strong>，与文档一致。</p><h2 id="4-ComponentScan"><a href="#4-ComponentScan" class="headerlink" title="4. @ComponentScan"></a>4. @ComponentScan</h2><p><code>@ComponentScan</code>这个注解在Spring中很重要，它对应XML配置中的元素，<code>@ComponentScan</code>的功能其实就是自动扫描并加载符合条件的组件（比如<code>@Component</code>和@<code>Repository</code>等）或者bean定义，最终将这些bean定义加载到IoC容器中。</p><p>我们可以通过basePackages等属性来细粒度的定制<code>@ComponentScan</code>自动扫描的范围，如果不指定，则默认Spring框架实现会从声明<code>@ComponentScan</code>所在类的package进行扫描。</p><blockquote><p>注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。</p></blockquote><p>不过在上面的声明中有显式的指定了两个过滤条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br></pre></td></tr></table></figure><p>这两个过滤器又是做什么的呢</p><h3 id="4-1-TypeExcludeFilter"><a href="#4-1-TypeExcludeFilter" class="headerlink" title="4.1 TypeExcludeFilter"></a>4.1 TypeExcludeFilter</h3><p>文档注释原文翻译：</p><blockquote><p>Provides exclusion TypeFilters that are loaded from the BeanFactory and automatically applied to SpringBootApplication scanning. Can also be used directly with @ComponentScan as follows:</p><p>提供从 BeanFactory 加载并自动应用于 <code>@SpringBootApplication</code> 扫描的排除 <code>TypeFilter</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="meta">@ComponentScan</span>(excludeFilters = <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Implementations should provide a subclass registered with BeanFactory and override the match(MetadataReader, MetadataReaderFactory) method. They should also implement a valid hashCode and equals methods so that they can be used as part of Spring test’s application context caches. Note that TypeExcludeFilters are initialized very early in the application lifecycle, they should generally not have dependencies on any other beans. They are primarily used internally to support spring-boot-test.</p><p>实现应提供一个向 BeanFactory 注册的子类，并重写 <code>match(MetadataReader, MetadataReaderFactory)</code> 方法。它们还应该实现一个有效的 <code>hashCode</code> 和 <code>equals</code> 方法，以便可以将它们用作Spring测试的应用程序上下文缓存的一部分。</p><p>注意，<code>TypeExcludeFilters</code> 在应用程序生命周期的很早就初始化了，它们通常不应该依赖于任何其他bean。它们主要在内部用于支持 <code>spring-boot-test</code> 。</p></blockquote><p>从文档注释中大概能看出来，它是给了一种扩展机制，能让我们<strong>向IOC容器中注册一些自定义的组件过滤器，以在包扫描的过程中过滤它们</strong>。</p><p>这种Filter的核心方法是 <code>match</code> 方法，它实现了过滤的判断逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ListableBeanFactory &amp;&amp; getClass() == TypeExcludeFilter.class) &#123;</span><br><span class="line"><span class="keyword">for</span> (TypeExcludeFilter delegate : getDelegates()) &#123;</span><br><span class="line"><span class="keyword">if</span> (delegate.match(metadataReader, metadataReaderFactory)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;TypeExcludeFilter&gt; <span class="title">getDelegates</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection&lt;TypeExcludeFilter&gt; delegates = <span class="keyword">this</span>.delegates;</span><br><span class="line"><span class="keyword">if</span> (delegates == <span class="keyword">null</span>) &#123;</span><br><span class="line">delegates = ((ListableBeanFactory) <span class="keyword">this</span>.beanFactory).getBeansOfType(TypeExcludeFilter.class).values();</span><br><span class="line"><span class="keyword">this</span>.delegates = delegates;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> delegates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看if结构体中的第一句，它会从 <code>BeanFactory</code> （可以暂时理解成IOC容器）中获取所有类型为 <code>TypeExcludeFilter</code> 的组件，去执行自定义的过滤方法。</p><p>由此可见，<code>TypeExcludeFilter</code> 的作用是做<strong>扩展的组件过滤</strong>。</p><h3 id="4-2-AutoConfigurationExcludeFilter"><a href="#4-2-AutoConfigurationExcludeFilter" class="headerlink" title="4.2 AutoConfigurationExcludeFilter"></a>4.2 AutoConfigurationExcludeFilter</h3><p>看这个类名，总感觉跟自动配置相关，还是看一眼它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isConfiguration(metadataReader) &amp;&amp; isAutoConfiguration(metadataReader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isConfiguration</span><span class="params">(MetadataReader metadataReader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> metadataReader.getAnnotationMetadata().isAnnotated(Configuration.class.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAutoConfiguration</span><span class="params">(MetadataReader metadataReader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getAutoConfigurations().contains(metadataReader.getClassMetadata().getClassName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getAutoConfigurations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.autoConfigurations == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.autoConfigurations = SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,</span><br><span class="line">                <span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.autoConfigurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的 <code>match</code> 方法要判断两个部分：<strong>是否是一个配置类，是否是一个自动配置类</strong>。其实光从方法名上也就看出来了，下面的方法是其调用实现，里面有一个很关键的机制：<code>SpringFactoriesLoader.loadFactoryNames</code>，我们留到下面解释。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li><code>@SpringBootApplication</code> 是组合注解。</li><li><code>@ComponentScan</code> 中的 <code>exclude</code> 属性会将主启动类、自动配置类屏蔽掉。</li><li><code>@Configuration</code> 可标注配置类，<code>@SpringBootConfiguration</code> 并没有对其做实质性扩展。</li></ol><p><code>@EnableAutoConfiguration</code> 的作用篇幅较长，单独成篇。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JayChenFE/pic/master/20191231161238.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;1-新建入门程序&quot;&gt;&lt;a href=&quot;#1-新
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot启动引导-SpringFramework的手动装配</title>
    <link href="https://jaychenfe.github.io/2019/12/31/SpringBoot%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC-SpringFramework%E7%9A%84%E6%89%8B%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>https://jaychenfe.github.io/2019/12/31/SpringBoot启动引导-SpringFramework的手动装配/</id>
    <published>2019-12-31T16:42:43.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>在了解 <code>@EnableAutoConfiguration</code> 之前，先了解 SpringFramework 的原生手动装配机制，这对后续阅读 <code>@EnableAutoConfiguration</code> 有很大帮助。</p><h2 id="5-SpringFramework的手动装配"><a href="#5-SpringFramework的手动装配" class="headerlink" title="5.SpringFramework的手动装配"></a>5.SpringFramework的手动装配</h2><p>在原生的 SpringFramework 中，装配组件有三种方式：</p><ul><li>使用模式注解 <code>@Component</code> 等（Spring2.5+）</li><li>使用配置类 <code>@Configuration</code> 与 <code>@Bean</code> （Spring3.0+）</li><li>使用模块装配 <code>@EnableXXX</code> 与 <code>@Import</code> （Spring3.1+）</li></ul><p>其中使用 <code>@Component</code> 及衍生注解很常见</p><p>但<code>@Component</code>注解只能在自己编写的代码中标注，无法装配jar包中的组件。为此可以使用 <code>@Configuration</code> 与 <code>@Bean</code>，手动装配组件（如上面的 <code>@Configuration</code> 示例）。</p><p>但这种方式一旦注册过多，会导致编码成本高，维护不灵活等问题。</p><p>SpringFramework 提供了模块装配功能，通过给配置类标注 <code>@EnableXXX</code> 注解，再在注解上标注 <code>@Import</code> 注解，即可完成组件装配的效果。</p><p>下面介绍模块装配的使用方式。</p><h3 id="5-1-EnableXXX与-Import的使用"><a href="#5-1-EnableXXX与-Import的使用" class="headerlink" title="5.1 @EnableXXX与@Import的使用"></a>5.1 @EnableXXX与@Import的使用</h3><p>创建几个颜色的实体类，如Red，Yellow，Blue，Green，Black等。</p><p>新建 <strong>@EnableColor</strong> 注解，并声明 <code>@Import</code>。<strong>（注意注解上有三个必须声明的元注解）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableColor &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Import</code> 可以传入四种类型：普通类、配置类、<code>ImportSelector</code> 的实现类，<code>ImportBeanDefinitionRegistrar</code> 的实现类。具体如文档注释中描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125;, &#123;<span class="doctag">@link</span> ImportSelector&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125;, or regular component classes to import.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;?&gt;[] value();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>value中写的很明白了，可以导入<strong>配置类</strong>、<strong><code>ImportSelector</code> 的实现类</strong>，<strong><code>ImportBeanDefinitionRegistrar</code> 的实现类</strong>，或者<strong>普通类</strong>。</p><p>下面介绍 <code>@Import</code> 的用法。</p><h4 id="5-1-1-导入普通类"><a href="#5-1-1-导入普通类" class="headerlink" title="5.1.1 导入普通类"></a>5.1.1 导入普通类</h4><p>直接在 <code>@Import</code> 注解中标注Red类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Red.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableColor &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后启动类标注 <strong>@EnableColor</strong>，引导启动IOC容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableColor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(ColorConfiguration.class);</span><br><span class="line">        String[] beanDefinitionNames = ctx.getBeanDefinitionNames();</span><br><span class="line">        Stream.of(beanDefinitionNames).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">colorConfiguration</span><br><span class="line">com.example.demo.enablexxx.Red</span><br></pre></td></tr></table></figure><p>可见Red类已经被注册。</p><h4 id="5-1-2-导入配置类"><a href="#5-1-2-导入配置类" class="headerlink" title="5.1.2 导入配置类"></a>5.1.2 导入配置类</h4><p>新建 <strong>ColorRegistrarConfiguration</strong>，并标注 <code>@Configuration</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorRegistrarConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Yellow <span class="title">yellow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Yellow();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在 <strong>@EnableColor</strong> 的 <code>@Import</code> 注解中加入 <strong>ColorRegistrarConfiguration</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Red.class, ColorRegistrarConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableColor &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动IOC容器，打印结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">colorConfiguration</span><br><span class="line">com.example.demo.enablexxx.Red</span><br><span class="line">com.example.demo.enablexxx.ColorRegistrarConfiguration</span><br><span class="line">yellow</span><br></pre></td></tr></table></figure><p>可见配置类 ColorRegistrarConfiguration 和 Yellow 都已注册到IOC容器中。</p><h4 id="5-1-3-导入ImportSelector"><a href="#5-1-3-导入ImportSelector" class="headerlink" title="5.1.3 导入ImportSelector"></a>5.1.3 导入ImportSelector</h4><p>新建 <strong>ColorImportSelector</strong>，实现 <code>ImportSelector</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;Blue.class.getName(), Green.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在 <strong>@EnableColor</strong> 的 <code>@Import</code> 注解中加入 <strong>ColorImportSelector</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Red.class, ColorRegistrarConfiguration.class, ColorImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableColor &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动IOC容器，打印结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">colorConfiguration</span><br><span class="line">com.example.demo.enablexxx.Red</span><br><span class="line">com.example.demo.enablexxx.ColorRegistrarConfiguration</span><br><span class="line">yellow</span><br><span class="line">com.example.demo.enablexxx.Blue</span><br><span class="line">com.example.demo.enablexxx.Green</span><br></pre></td></tr></table></figure><p><strong>ColorImportSelector</strong> 没有注册到IOC容器中，两个新的颜色类被注册。</p><h4 id="5-1-4-导入ImportBeanDefinitionRegistrar"><a href="#5-1-4-导入ImportBeanDefinitionRegistrar" class="headerlink" title="5.1.4 导入ImportBeanDefinitionRegistrar"></a>5.1.4 导入ImportBeanDefinitionRegistrar</h4><p>新建 <strong>ColorImportBeanDefinitionRegistrar</strong>，实现 <code>ImportBeanDefinitionRegistrar</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">"black"</span>, <span class="keyword">new</span> RootBeanDefinition(Black.class));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在 <strong>@EnableColor</strong> 的 <code>@Import</code> 注解中加入 <strong>ColorImportBeanDefinitionRegistrar</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;Red.class, ColorRegistrarConfiguration.class, ColorImportSelector.class, ColorImportBeanDefinitionRegistrar.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableColor &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动IOC容器，打印结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">colorConfiguration</span><br><span class="line">com.example.demo.enablexxx.Red</span><br><span class="line">com.example.demo.enablexxx.ColorRegistrarConfiguration</span><br><span class="line">yellow</span><br><span class="line">com.example.demo.enablexxx.Blue</span><br><span class="line">com.example.demo.enablexxx.Green</span><br><span class="line">black</span><br></pre></td></tr></table></figure><p>由于在注册Black的时候要指定Bean的id，而上面已经标明了使用 “black” 作为id，故打印的 beanDefinitionName 就是black。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;在了解 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 之前，先了解 SpringFramework 的原生手动装配机制，这对后续阅读 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 有很大帮
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>win10安装wsl2和docker</title>
    <link href="https://jaychenfe.github.io/2019/08/28/win10%E5%AE%89%E8%A3%85wsl2%E5%92%8Cdocker/"/>
    <id>https://jaychenfe.github.io/2019/08/28/win10安装wsl2和docker/</id>
    <published>2019-08-28T21:43:29.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/69121280" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/69121280</a></p><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><ul><li>WSL2需要Windows build 18917 更新,WSL不需要.但是最好<strong>首先</strong>将操作系统更新到需要的版本,<strong>而不是</strong>先安装WSL再更新</li><li><strong>不要</strong>安装不在windows商店的Linux发行版(包括github上的各种centos以及centos官方docker镜像,centos目前不是windows商店的Linux发行版之一)</li><li>windows升级过程可能会有多个更新,每次更新都检查C盘,预留10G以上的硬盘空间</li></ul><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>以下默认使用管理员权限打开powershell</p><h2 id="1-确认操作系统版本"><a href="#1-确认操作系统版本" class="headerlink" title="1.确认操作系统版本"></a>1.确认操作系统版本</h2><p>开始菜单(右键)&gt;设置&gt;系统&gt;关于&gt;windows规格</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190824083248.png" alt=""></p><p>如果版本号(小数点之前的数字)小于18917需要更新,否则进入步骤3安装wsl </p><h2 id="2-升级window版本"><a href="#2-升级window版本" class="headerlink" title="2.升级window版本"></a>2.升级window版本</h2><h3 id="2-1开启快速通道-Insider-Preview"><a href="#2-1开启快速通道-Insider-Preview" class="headerlink" title="2.1开启快速通道(Insider Preview)"></a>2.1开启快速通道(Insider Preview)</h3><p>开始菜单(右键)&gt;设置&gt;更新和安全&gt;windows预览体验计划</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190828223853.png" alt=""><br><br></p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190829074144.png" alt=""></p><p><br></p><h3 id="2-2更新"><a href="#2-2更新" class="headerlink" title="2.2更新"></a>2.2更新</h3><p>开始菜单(右键)&gt;设置&gt;更新和安全&gt;windows更新</p><p>开始更新,<strong>可能需要重启,时间比较长</strong></p><p>更新完成后如下:</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190829075855.png" alt=""></p><p>操作系统版本大于18917即可</p><h2 id="3-安装wsl"><a href="#3-安装wsl" class="headerlink" title="3.安装wsl"></a>3.安装wsl</h2><h3 id="3-1-开启wsl"><a href="#3-1-开启wsl" class="headerlink" title="3.1 开启wsl"></a>3.1 开启wsl</h3><p>在powershell命令行中输入如下命令开启wsl</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190822214926.png" alt=""><br>可能需要重启</p><h3 id="3-2-在windows商店中选择合适的linux发行版"><a href="#3-2-在windows商店中选择合适的linux发行版" class="headerlink" title="3.2 在windows商店中选择合适的linux发行版"></a>3.2 在windows商店中选择合适的linux发行版</h3><p>这里我选择了Ubuntu,安装</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190829080630.png" alt=""></p><h3 id="3-3测试wsl"><a href="#3-3测试wsl" class="headerlink" title="3.3测试wsl"></a>3.3测试wsl</h3><p>命令行中输入<code>wsl -l -v 查看</code>,这里版本应该是1</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190829081316.png" alt=""></p><h2 id="4-升级到wsl2"><a href="#4-升级到wsl2" class="headerlink" title="4.升级到wsl2"></a>4.升级到wsl2</h2><h3 id="4-1开启VirtualMachinePlatform"><a href="#4-1开启VirtualMachinePlatform" class="headerlink" title="4.1开启VirtualMachinePlatform"></a>4.1开启VirtualMachinePlatform</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span><br></pre></td></tr></table></figure><h3 id="4-2将发行版的wsl版本设置为2"><a href="#4-2将发行版的wsl版本设置为2" class="headerlink" title="4.2将发行版的wsl版本设置为2"></a>4.2将发行版的wsl版本设置为2</h3><p>命令为<code>wsl --set-version &lt;Distro&gt; 2</code>,例如<code>wsl --set-version Ubuntu 2</code></p><p>如果想使wsl2 成为默认架构，可以使用以下命令执行此操作:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这将使你安装的任何新发行版初始化为 wsl2 发行版。</p><h3 id="4-3测试wsl2"><a href="#4-3测试wsl2" class="headerlink" title="4.3测试wsl2"></a>4.3测试wsl2</h3><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190829082356.png" alt=""></p><h2 id="5-安装docker"><a href="#5-安装docker" class="headerlink" title="5.安装docker"></a>5.安装docker</h2><h3 id="5-1进入wsl2"><a href="#5-1进入wsl2" class="headerlink" title="5.1进入wsl2"></a>5.1进入wsl2</h3><p>输入<code>wsl -u root</code>进入wsl2,并切换到根目录</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190829082930.png" alt=""></p><h3 id="5-2快速安装docker"><a href="#5-2快速安装docker" class="headerlink" title="5.2快速安装docker"></a>5.2快速安装docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="meta">$</span> sudo sh get-docker.sh</span><br><span class="line"><span class="meta">$</span> sudo service docker start</span><br></pre></td></tr></table></figure><p>测试一下,运行<code>docker run hello-world</code></p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190829083356.png" alt=""></p><h3 id="5-3在docker中安装mysql"><a href="#5-3在docker中安装mysql" class="headerlink" title="5.3在docker中安装mysql"></a>5.3在docker中安装mysql</h3><p>在 <a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">https://hub.docker.com/_/mysql</a>   找到合适的mysql镜像版本,这里使用mysql5.7.27</p><p>运行如下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p3306:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="number">123</span>qweasd -d mysql:<span class="number">5.7</span>.<span class="number">27</span></span><br></pre></td></tr></table></figure><p>这里启动了一个mysql5.7.27的docker镜像,密码为<code>123qweasd</code>,并将docker的3306端口(mysql默认端口)映射到了wsl2的3306端口</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190828215546.png" alt=""></p><p>在wsl2中使用<code>ifconfig</code>获取局域网ip记住</p><h2 id="6-在windows中测试"><a href="#6-在windows中测试" class="headerlink" title="6.在windows中测试"></a>6.在windows中测试</h2><p>在Win10中打开IDEA旗舰版,用自带的数据库连接工具连接成功</p><p>host和mysql密码和上一步相同</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190828215721.png" alt=""></p><p>至此,在windows中连接wsl2中的docker中的mysql成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/69121280&quot; target=&quot;_
      
    
    </summary>
    
      <category term="工具建设" scheme="https://jaychenfe.github.io/categories/%E5%B7%A5%E5%85%B7%E5%BB%BA%E8%AE%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>使用BaGet搭建私有nuget服务器</title>
    <link href="https://jaychenfe.github.io/2019/08/15/%E4%BD%BF%E7%94%A8BaGet%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89nuget%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://jaychenfe.github.io/2019/08/15/使用BaGet搭建私有nuget服务器/</id>
    <published>2019-08-15T22:18:30.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://medium.com/@onurvatan/net-core-custom-nuget-server-baget-on-docker-b763a3c7a276" target="_blank" rel="noopener">https://medium.com/@onurvatan/net-core-custom-nuget-server-baget-on-docker-b763a3c7a276</a></p><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>在微服务中,有公用的业务类库,如果用共享代码的方式引入,每个使用的人会带来版本维护上的诸多麻烦.如果发到官方<code>nuget</code>上,有两个问题</p><ul><li>代码太菜T_T</li><li>公司内部业务私密问题</li></ul><p>为此我们需要搭建一个私有的<code>nuget</code>服务器. 虽然微软官方有<a href="https://docs.microsoft.com/zh-cn/nuget/hosting-packages/nuget-server" target="_blank" rel="noopener">nuget-server</a>这种实现方式,但是还是有些麻烦.在查看了<a href="https://docs.microsoft.com/zh-cn/nuget/hosting-packages/overview" target="_blank" rel="noopener">官方推荐的第三方实现列表</a>后,决定使用<a href="https://github.com/loic-sharma/BaGet" target="_blank" rel="noopener">BaGet</a></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>公司服务器的环境是CentOS 7,已安装了docker</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>在任务目录中新建<code>baget_nuget</code>文件夹,用来存放相关内容,并在其中建立子文件夹<code>baget-data</code>和<code>baget.env</code>文件,文件内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ApiKey=你的ApiKey</span><br><span class="line">Storage__Type=FileSystem</span><br><span class="line">Storage__Path=/var/baget/packages</span><br><span class="line">Database__Type=Sqlite</span><br><span class="line">Database__ConnectionString=Data Source=/var/baget/baget.db</span><br><span class="line">Search__Type=Database</span><br><span class="line">AllowPackageOverwrites=True</span><br></pre></td></tr></table></figure><p><code>BaGet</code>的后端使用.net core,前端使用react.<code>baget.env</code>文件存储了<code>BaGet</code>配置所需的环境变量,其中<code>ApiKey</code>是发布类库时需要用到的key</p><h2 id="在docker中运行"><a href="#在docker中运行" class="headerlink" title="在docker中运行"></a>在docker中运行</h2><p>切换到上一步中新建的<code>baget_nuget</code>文件夹下,运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --name nuget-server -p 5555:80 --env-file baget.env -v &quot;$(pwd)/baget-data:/var/baget&quot; loicsharma/baget:latest</span><br></pre></td></tr></table></figure><p>此时docker的80端口就运行起了<code>Baget</code>的<code>nuget-server</code>并映射到了服务器本机的5555端口</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190815231318.png" alt=""></p><p>如果有图形界面,应该就可以看见如下的内容了</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190815232246.png" alt=""></p><p>如果没有图形界面在命令行中用<code>curl http://localhost:5555</code>测试一下,出现html内容文本即可</p><p>测试ok后进入下一步</p><h2 id="配置nginx映射"><a href="#配置nginx映射" class="headerlink" title="配置nginx映射"></a>配置nginx映射</h2><p>如果服务器的5555端口可以暴露出去,就可以省略这一步直接到下一步.</p><p>因为公司只有一个入口所以需要配置nginx映射</p><p>公司访问的域名是<code>www.xxxx.com</code>,我们需要事先在云的CDN在配置好二级域名,这里我们使用<code>nuget.xxx.com</code></p><p>nginx配置为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name nuget.xxx.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        proxy_pass http:<span class="comment">//localhost:5555/;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span> default_server;</span><br><span class="line">   <span class="comment">// ....其他配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190815232937.png" alt=""></p><p>这样我们就把对nuge.xxx.com的请求转发到了5555端口</p><h2 id="发布库并测试"><a href="#发布库并测试" class="headerlink" title="发布库并测试"></a>发布库并测试</h2><ul><li><p>在本地新建一个TestLib随意输入一些方法</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190816073646.png" alt=""></p></li><li><p>切换到TestLib目录使用<code>dotnet pack</code>命令打包</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190816073951.png" alt=""></p><p>生成了<code>nupkg</code>打包文件</p></li><li><p>切换到<code>bin\Debug</code>目录并使用发布</p><p>执行<code>dotnet nuget push -s http://nuget.xxx.com/v3/index.json -k 你的ApiKey TestLib.1.0.0.nupkg</code></p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190816082127.png" alt=""></p><p>发布成功</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190816082317.png" alt=""></p></li><li><p>使用类库</p><ol><li><p>新建一个控制台程序CallTest<br><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190816082929.png" alt=""></p></li><li><p>在 <code>工具/选项/Nuget包管理器/程序包源</code>  中增加私有nuget服务地址</p><p>名称随意 这里我使用了nuget.xxx.com,源填写<code>http://nuget.xxx.com/v3/index.json</code></p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190816083449.png" alt=""></p><p>添加成功</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190816083854.png" alt=""></p></li><li><p>引入TestLib</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190816084040.png" alt=""></p><p>选择私有地址,可以找到我们刚刚上传的库,安装</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190816084227.png" alt=""></p><p>这样就可以在程序中使用了</p></li><li><p>更新类库</p><p>待更新…..</p></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@onurvatan/net-core-c
      
    
    </summary>
    
      <category term="工具建设" scheme="https://jaychenfe.github.io/categories/%E5%B7%A5%E5%85%B7%E5%BB%BA%E8%AE%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>转载-IL汇编语言介绍（译）</title>
    <link href="https://jaychenfe.github.io/2019/08/06/%E8%BD%AC%E8%BD%BD-IL%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%EF%BC%88%E8%AF%91%EF%BC%89/"/>
    <id>https://jaychenfe.github.io/2019/08/06/转载-IL汇编语言介绍（译）/</id>
    <published>2019-08-06T21:34:47.000Z</published>
    <updated>2020-08-05T02:40:11.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="转载出处"><a href="#转载出处" class="headerlink" title="转载出处"></a>转载出处</h2><p><a href="https://www.cnblogs.com/xiaoxiangfeizi/archive/2011/08/08/2130768.html" target="_blank" rel="noopener">原文地址</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习IL,在CodeProject上看到一篇老外的文章，介绍IL的，写的比较好，就翻译了一下，供大家参考。水平有限，请大家包涵，如果你想认真学习，推荐你最好去看原文，原文是<a href="http://www.codeproject.com/KB/msil/ilassembly.aspx" target="_blank" rel="noopener">Introduction to IL Assembly Language</a>。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这篇文章介绍了基本的IL汇编语言知识，你可以用它从底层来分析你的.NET代码（任何.NET平台下的高级语言写的）。从底层，我说的底层是你的高级语言在编译器中完成它工作的地方，用这些基本知识，你可以为.NET语言重新开发一个你自己的编译器。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>IL汇编语言介绍</li><li>评估堆栈</li><li>IL数据类型</li><li>变量声明</li><li>判断和条件语句</li><li>循环</li><li>定义方法</li><li>通过引用传递参数</li><li>创建命名空间和类</li><li>对象的作用域</li><li>创建和使用类对象</li><li>创建构造函数和属性</li><li>创建WinForms窗体</li><li>错误和调试</li><li>总结</li><li>结论</li></ul><p>任何时候你在.NET中编译你的代码，不管你使用什么语言。它都会被转换成一种中间语言IL（Intermediate Language ），通常也被叫做微软中间语言MSIL（Microsoft Intermediate Language ）或通用中间语言CIL（Common Intermediate Language）。你可以把IL当作是JAVA中的“字节码”（译者注：也是一种中间语言，由JAVA虚拟机编译成的）。如果你对.NET是怎样处理不同数据类型以及怎样把我们写的代码转换成IL代码等等问题感兴趣，那么知道一些IL知识是非常有用的，包括你会知道．NET编译器产生的代码是什么。所以如果你知道IL，那么你可以检查编译器产生的代码是否正确，或者根据需要做一些修改（可能在大多数时候是不需要的），你可以更改IL代码去对程序做一些改动（一些在高级语言中不允许的）增加你代码的性能。这也可以帮助你从底层去分析你的代码。另外，如果你计划为．NET写一个编译器，那么你就必须了解IL。</p><p>IL本身是以二进制格式存储的，所以我们不可能阅读。但是和其它二进制代码有汇编语言一样，IL也有一种汇编语言叫作IL汇编语言（ＩＬＡｓｍ），IL汇编语言和其它汇编语言一样有许多指令。例如，两个数相加，有相加的指令，两个数相减，有相减的指令，等等。很显然．NET的运行时中的编译器（JIT）不能直接执行IL汇编语言，如果你用IL汇编语言编写了一些代码，那么首先你要把这些代码编译成IL代码，然后JIT才可以运行这些代码。</p><p>注意：请注意IL和IL汇编语言是两个不同的概念，当我们说到IL时，是指．ＮＥＴ编译器产生的二进制代码，而IL汇编语言不是二进制格式的。</p><p>注意：请注意我期望你们非常熟悉．ＮＥＴ平台（包括任何高级语言），在这篇文章里面，我不会去详细解释所有的东西，只是那些我认为需要解释的。如果你对一些东西比较迷惑，你可以联系我来进行更深入的讨论。</p><h2 id="IL汇编语言简介"><a href="#IL汇编语言简介" class="headerlink" title="IL汇编语言简介"></a>IL汇编语言简介</h2><p>现在我们开始我写这篇文章的主要目的，介绍IL汇编语言。IL汇编语言和其它汇编语言一样有一系列指令集。你可以在任何文本编辑器里面写IL汇编语言代码，像记事本等等然后用.NET平台自带的命令行编译器(<em>ILAsm.exe</em>)去编译它。对于使用高级语言的程序员来说，IL汇编语言是一种非常难以学习的语言，而对于使用C 或C++的程序员来说，可以很容易的接受它。学习IL汇编语言是很困难的工作，所以我们不要浪费时间，直入正题。在IL汇编语言中，我们要人工的做一切事情，包括数据进栈，内存管理等等。 你可以把IL汇编语言和汇编语言认为是一样的，但是汇编语言是在windos平台下执行的，而IL汇编语言是在.NET平台下执行的，另外还有一点就是IL汇编语言比汇编语言要简单一些，并且还有一些面向对象的特性。</p><p>那么我们用一个简单的例子来开始我们对这种语言的学习，在屏幕（控制台）上打印一个简单的字符串。在学习一种新语言的时候都有一种传统，就是创建一个hello world的程序，那么我们今天也这样做，只不过我们把打印的字符串改变了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test.IL</span></span><br><span class="line"><span class="comment">//A simple programme which prints a string on the console</span></span><br><span class="line"> </span><br><span class="line">.assembly <span class="keyword">extern</span> mscorlib &#123;&#125;</span><br><span class="line"> </span><br><span class="line">.assembly Test</span><br><span class="line">&#123;</span><br><span class="line">    .ver <span class="number">1</span>:<span class="number">0</span>:<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">.module test.exe</span><br><span class="line"> </span><br><span class="line">.<span class="function">method <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .maxstack <span class="number">1</span></span><br><span class="line">    .entrypoint</span><br><span class="line">    </span><br><span class="line">    ldstr <span class="string">"I am from the IL Assembly Language..."</span></span><br><span class="line">    </span><br><span class="line">    call void [mscorlib]System.Console::WriteLine (string)</span><br><span class="line">    ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图1.1 用IL汇编语言写的一个简单的测试程序</p><p>把上面的代码（图1.1 ）写到一个简单的文本编辑器中，如记事本中，然后把它保存为Test.il。我们先来编译运行这段代码，待会我们会详细的来看这段代码。要编译些段代码，输入以下的命令提示符</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ILAsm Test.il  (See the screen shot below)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190806212117.png" alt=""></p><p>​    图1.2 测试程序的输出，你可以看到我用来编译代码的命令</p><p><em>ILAsm.exe</em> 是.NET框架下自带的一个命令行工具，你可以在<windowsfolder>\Microsoft.NET\Framework\<version> 文件夹中找到它。当你编译完你的IL文件后，它会输出一个和你IL文件名字相同的exe文件，你可以用指令/OutPut=<filename> 更改输出的exe文件的名字，例如ILAsm Test.il /output=MyFile.exe.要运行这个exe文件，你只需要输入这个exe文件的名字，然后输入回车。输出马上会在屏幕上出现。现在让我们用一点时间去理解一下我们所写的代码。记住我在下面描述的代码是图1.1中的代码。</filename></version></windowsfolder></p><ul><li>最开始的两行（以//开始的）是注释，在IL汇编语言中，你可用在C#或C++中相同的方式去写注释，写多行注释或在行内写注释，你也可以用/<em> … </em>/</li><li>接下来我们告诉编译器去引用一个叫mscorlib的类库(.assembly extern mscorlib {})。在IL汇编语言中，任何语句都是以一个点号（.）开始的，以此告诉编译器这是一种特殊的指令。所以这里的.assembly 指令告诉编译器，我们准备去用一个外部的类库（不是我们自己写的，而是提前编译好的）</li><li>接下来的一个.assembly 指令(.assembly Test ….)定义了这个文件的程序集的信息，在上面的一个例子中，我们假设“Test”是这个程序集的名字，在括号内部是我们想给外部看的一些信息，就是版本信息。我们可以在这里面写上更多有关这个程序集的信息，如公钥等等。</li><li>下一条指令告诉了我们程序集中模块的名称(.module Test.exe). 我们知道，每一个程序集中至少应该有一个模块。</li><li>接下来的一条指令(.method static void main () cil managed), 这里的.method 标记告诉编译器我们准备定义一个方法，而且还是一个静态（Static）的方法（和C#中一样的关键字）并且返回空（Void）。另外这个方法的名字叫做main，并且它没有参数（因为它后面的圆括号中没有任何东西），最后面的cil managed 指令告诉编译器，把这段代码当作托管代码进行编译。</li><li>到方法里面去，第一条指令是最大栈(.maxstack 1). 这是非常重要的一点，它告诉编译器我们要加载到内存（实际是评估堆栈）中去的项的最大数目，我们将会在后面详细的进行讨论，如果你没有注意到，你暂时可以跳过。</li><li>.entrypoint 指令告诉编译器去把这个函数标记为整个应用程序的入口点（Entry Point ），也就是执行这个应用程序时最先执行的函数。</li><li>接下来的一个语句是(ldstr “I am from the IL Assembly Language…”), ldstr指令是用来把一个字符串加载到内存或评估堆栈中。在我们使用这些变量之前，是需要把这些变量加载到评估堆栈（evaluation stack ）中去的。我们在下面马上就会详细的讨论评估堆栈的。</li><li>下一条指令(<code>call void [mscorlib]System.Console::WriteLine (string)</code>) ，是调用一个在mscorlib 类库中的方法。注意我们调用时告诉了所有关于这个方法的信息，包括返回的类型，参数类型以及所属的类库。我们把后面的<code>(string)</code>)当作参数，string并不是一个变量，而是一种数据类型。前面的语句(<code>ldstr “I am from the IL…..”</code>)已经把这个字符串加载到栈里面去了，这个方法将会打印已加载进去了的字符串。</li><li>最后一句ret，尽管不需要去解释，它的意思是表示从方法中返回。</li></ul><p>通过上面的一些讲解，你可能对怎样去写IL汇编代码有一个大致的想法了，你也会认为IL汇编语言和高级语言是不同的像.NET下的语言(VB, C#)，然而，无论你写的代码是什么，你必须去遵守类似的规则（尽管操作类的时候可能会有一些改变），现在还有很多事情需要更详细的讨论，最主要的就是评估堆栈，那么我们先从它开始吧。</p><h2 id="Evaluation-Stack评估堆栈"><a href="#Evaluation-Stack评估堆栈" class="headerlink" title="Evaluation Stack评估堆栈"></a>Evaluation Stack评估堆栈</h2><p>评估堆栈可以认为是普通机器中的栈，栈是用来存储语句在执行之前的信息的。我们知道当我们对信息进行一些操作时，这些信息是要存入在内存中的。就像我们在汇编语言中执行指令之前都要把值移到寄存器中去，同样的我们要在进行操作（在上面的例子中就是输出）之前把信息（在上面的例子中也就是那个字符串）移到栈中，在我们的main方法（图1.1）之前，我们注意到，我们在执行我们的函数期间需要在.NET运行时中（CLR）存储一些信息。我们用<code>maxstack指令说明了，我们将会把一个值移到栈中，只移动一次。因此如果我们把指令写成.maxstack 3，那么运行时（CLR）就会在栈中开辟可以放三个变量的空间，任何时候都可以使用。注意，这并不是说明在我们的函数执行期间我们只能加载三个参数到栈中，而是说我们一次最多只能加载三个变量到栈中去。当执行完毕后，变量将会从栈中移除，所以我们还需要注意，不管函数什么时候调用，这个函数中被用到的参数在函数调用完毕后都会被从栈中移出，栈中的空间将会空出来。这也就是.NET中垃圾回收器所做的事。可以移到栈中去的数据类型是没有限制的，我们可以把任何数据（比如字符串，整形，对象等等）在任何时候加载到栈中去。</code></p><p>我们来看另外一个例子，它可以让我们对评估堆栈的概念有一个更清晰的认识。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Add.il</span></span><br><span class="line"><span class="comment">//Add Two Numbers</span></span><br><span class="line"> </span><br><span class="line">.assembly <span class="keyword">extern</span> mscorlib &#123;&#125;</span><br><span class="line"> </span><br><span class="line">.assembly Add</span><br><span class="line">&#123;</span><br><span class="line">    .ver <span class="number">1</span>:<span class="number">0</span>:<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">.module <span class="keyword">add</span>.exe</span><br><span class="line"> </span><br><span class="line">.<span class="function">method <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .maxstack <span class="number">2</span></span><br><span class="line">    .entrypoint</span><br><span class="line">    </span><br><span class="line">    ldstr <span class="string">"The sum of 50 and 30 is = "</span></span><br><span class="line">    call void [mscorlib]System.Console::Write (string)</span><br><span class="line">    </span><br><span class="line">    ldc.i4.s <span class="number">50</span></span><br><span class="line">    ldc.i4 <span class="number">30</span>    </span><br><span class="line">    <span class="keyword">add</span></span><br><span class="line">    call void [mscorlib]System.Console::Write (int32)</span><br><span class="line">    ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图1.3两数相加</p><p>main函数中的一部分与例1是一样的，只是模块的名称改变了。我们要讨论的就是main函数中的<code>.maxstack 2，它告诉运行时去分配足够的内存空间存储两个值。然后我们加载一个字符串到栈里面去，然后把它打印出来。然后我们同时加载两个整型数到内存（译者注：在篇文章中，内存就是指栈）中去（用ldc.i4.s和ldc.i4指令），然后执行相加指令最后输出一个整型的数字。相加的指令会在栈里面找两个数字，如果找到了，那么它就会把这两个数相加并把结果放在栈的顶部。相加后，调用另外一个函数Write，在控制台输出。调用这个方法之前要确保栈顶一定要有值。在这个例子里面，它会找一个整型，如果它找到了一个整型的数字，它将会把它打印出来，否则它会报错。</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不要对ldc.i4.s和ldc.i4感到迷惑，两者都是加载一个整型的数字，但是前者是单字节类型，后者是一个占四字节的数字。</span><br></pre></td></tr></table></figure><p>我希望你明白使用评估堆栈的方式以及它是如何工作的，现在我们去讨论更多关于IL汇编语言的知识</p><h2 id="IL数据类型"><a href="#IL数据类型" class="headerlink" title="IL数据类型"></a>IL数据类型</h2><p>学习一门新语言，首先我们应该去了解这门语言的数据类型。所以我们首先先看一下下面的这张表（图１.４），去了解一下IL汇编语言中的数据类型。但是在看之前，我要指出，在.NET平台下的各种不同语言中，数据类型没有一致性，例如一个整型数（32位），在VB.NET中定义为Integer，但是在C#和C++中被定义成int，尽管如此，在这两种情况下，它们统统是指System.Int32.另外我们记住它是否符合CLS（Common Language Specification ）规范。就像UInt32 ，在VB.NET中就没有，同时也不被CLS承认。</p><p><a href="http://images.cnblogs.com/cnblogs_com/xiaoxiangfeizi/201108/201108081203185536.png" target="_blank" rel="noopener"><img src="https://images.cnblogs.com/cnblogs_com/xiaoxiangfeizi/201108/201108081203236087.png" alt="image"></a></p><p>图1.4 IL汇编语言中的数据类型</p><p>我们也记得一些在IL汇编语言中的数据类型比如.i4, .i4.s, .u4 等等我们在上面的例子中用到过的。上面图表列出的数据类型都是被IL汇编语言所识别的，而且在表中也提到了哪些是符合ＣＬＳ规范，哪些是不符合的。所以把这些类型都记在脑海里。我们可以以下列形式调用任何函数：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">call int32 <span class="title">SomeFunction</span> (<span class="params"><span class="keyword">string</span>, int32, float64&lt;code lang=msil&gt;</span>)</span></span><br></pre></td></tr></table></figure><p>它的意思是函数<code>SomeFunction</code> 返回一个<code>int32</code> (<code>System.Int32</code>)的类型, 传入其它三种类型<code>string</code> (<code>System.String</code>), <code>int32</code> (<code>System.Int32</code>) and <code>float64</code>(<code>System.Double</code>) 的参数. 注意这些都是CLR和IL汇编语言中的基本数据类型. 如果我们对非基本类型(自定义类型)是怎样处理的感兴趣，我们可以如下写：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//In C#</span></span><br><span class="line">ColorTranslator.FromHtml(htmlColor)        </span><br><span class="line"><span class="comment">//In ILAsm</span></span><br><span class="line">call instance <span class="keyword">string</span> [System.Drawing]</span><br><span class="line">System.Drawing.ColorTranslator::ToHtml(valuetype </span><br><span class="line">[<span class="meta">System.Drawing</span>]System.Drawing.Color)</span><br></pre></td></tr></table></figure><p>你可能注意到，我们显示的声明了参数的类型。我们也定义了这个类型所在的命令空间，而且用一个关键字标识了我们将要引用的是一个非基本的数据类型。</p><p>在接下来的部分，我将用一个示例程序来演示使用这些类型，你对这些类型的认识将变得更清晰。但是首先，我们还是先来学习一下语言的基础，比如变量声明，循环，判断条件等等。</p><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>变量是每个程序语言中最主要的一部分，因此IL汇编语言也提供了一种我们声明和使用变量的方法。尽管没有高级语言(VB .NET, C#) 中的那样简单。在IL汇编语言中.locals 指令是用来定义变量的，这条指令一般是写在函数的最开始部分的，尽管你可以把变量声明放在任何地方，当然肯定要在使用前。下面是一个例子来演示怎样定义变量，给变量赋值，以及使用变量把它打印出来。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.<span class="function">locals <span class="title">init</span> (<span class="params">int32, <span class="keyword">string</span></span>)</span></span><br><span class="line"><span class="function">ldc.i4 34</span></span><br><span class="line"><span class="function">stloc.0</span></span><br><span class="line"><span class="function">ldstr "Some Text <span class="keyword">for</span> Local Variable"</span></span><br><span class="line"><span class="function">stloc.1</span></span><br><span class="line"><span class="function">ldloc.0</span></span><br><span class="line"><span class="function">call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">WriteLine</span>(<span class="params">int32</span>)</span></span><br><span class="line"><span class="function">ldloc.1</span></span><br><span class="line"><span class="function">call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">WriteLine</span>(<span class="params"><span class="keyword">string</span></span>)</span></span><br></pre></td></tr></table></figure><p>图1.5 局部变量</p><p>我们用.locals 定义了两个变量，一个是int32类型的，另外一个是string类型的。然后我们把一个整型数34加载到内存中去并且把这个值赋给了局部变量0，也就是第一个变量。在IL汇编语言中我们可以通过索引（定义的序号）来访问这些变量，这些索引是从0开始的。然后我们加载一个字符串到内存中然后把它赋给第二个变量。最后我们把这两个变量都打印出来了。ldloc.? 指令可以用来加载任何类型的变量到内存中去（整型，双精度，浮点型或者对象）。</p><p>我没有用到变量的名字，因为这些变量都是局部变量，我们不准备在方法外面去使用它。但是这并不代表你不能通过名称来定义变量。当然，肯定可以。定义局部变量的时候，你可以用它们的类型来来给这些变量取名。就像C#中。例如.locals init (int32 x, int32 y) 。</p><p>然后，你可以用同样的方法来加载或给这些变量赋值，例如用变量的名字来加载变量可以写成如下：<code>stloc x</code> 或<code>ldloc y。尽管你是用名称来定义这些变量的，但是你照样可以通过索引来访问这些变量，例如ldloc.0, stloc.0等等。</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：这篇文章的所有代码中，我用的都是没有名字的变量。</span><br></pre></td></tr></table></figure><p>现在你知道了怎样去操作变量以及栈了，如果你有什么问题，就复习一下上面的代码，因为下面我们将会处理一些和栈有关的比较难的问题。我们将会频繁的把数据加载到内存中去，然后取出。所以在学习下面的内容之前，熟悉怎样初始化变量，怎样对变量赋值以及怎样把变量加载到内存中去是非常必要的。</p><h2 id="判断-条件"><a href="#判断-条件" class="headerlink" title="判断/条件"></a>判断/条件</h2><p>判断和条件也是程序语言中不可缺少的部分，在低级语言中，例如本地汇编语言，判断是用jumps (or branch)，在IL汇编语言中，也是这样的，我们来看一下下面的代码片断。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">br JumpOver         <span class="comment">//Or use the br.s instead of br</span></span><br><span class="line"><span class="comment">//Other code here which will be skipped after getting br statement.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">JumpOver:</span><br><span class="line"><span class="comment">//The statements here will be executed</span></span><br></pre></td></tr></table></figure><p>把上面的语句与任何高级语言中的goto语句进行比较，goto语句是把控制流程转到写在goto语句后面的标签处。但是在这里，br代替了goto。如果你确定你要跳转的目标与跳转语句在-128到+127字节之间，那么你可以使用br.s，因为br.s会用int8来代替int32来代表跳转偏移量。上面方法中的跳转是无条件的跳转，因为在跳转语句之前没有判断条件，所以每次执行时程序都会直接跳转到JumpOver标签处。下面我们来看一个代码片段，使用条件跳转的，只有满足条件的才能进行跳转。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Branching.il</span></span><br><span class="line"><span class="function">method <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">   .maxstack 2</span></span><br><span class="line"><span class="function">   .entrypoint</span></span><br><span class="line"><span class="function">   <span class="comment">//Takes First values from the User</span></span></span><br><span class="line"><span class="function">   ldstr "Enter First Number"</span></span><br><span class="line"><span class="function">   call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">WriteLine</span> (<span class="params"><span class="keyword">string</span></span>)</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">   call  <span class="keyword">string</span> [mscorlib]System.Console::<span class="title">ReadLine</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">   call int32 [mscorlib]System.Int32::<span class="title">Parse</span>(<span class="params"><span class="keyword">string</span></span>)</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">   <span class="comment">//Takes Second values from the User</span></span></span><br><span class="line"><span class="function">   ldstr "Enter Second Number"</span></span><br><span class="line"><span class="function">   call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">WriteLine</span> (<span class="params"><span class="keyword">string</span></span>)</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">   call  <span class="keyword">string</span> [mscorlib]System.Console::<span class="title">ReadLine</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">   call int32 [mscorlib]System.Int32::<span class="title">Parse</span>(<span class="params"><span class="keyword">string</span></span></span></span><br><span class="line"><span class="function"><span class="params">   </span>)</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">   ble Smaller</span></span><br><span class="line"><span class="function">       ldstr "Second Number <span class="keyword">is</span> smaller than first."    </span></span><br><span class="line"><span class="function">       call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">WriteLine</span> (<span class="params"><span class="keyword">string</span></span>)</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">   br Exit</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">smaller:</span></span><br><span class="line"><span class="function">   ldstr "First number <span class="keyword">is</span> smaller than second."    </span></span><br><span class="line"><span class="function">   call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">WriteLine</span> (<span class="params"><span class="keyword">string</span></span>)</span></span><br><span class="line"><span class="function">exit:    </span></span><br><span class="line"><span class="function">   ret</span></span><br></pre></td></tr></table></figure><p>图1.6只有主函数</p><p>上面的程序接收了两个用户输入的数字,然后找出较小的一个.在这些语句里面需要注意的是“ble Smaller”语句,它告诉编译器去检查栈里面的第一数是否小于或等于第二个数,如果是小于,那么它将会跳转到”Smaller”这个标签处.如果大于第二个数,那么就不会执行跳转,接着执行下面的语句.也就是加载一个字符串然后输出.在这之后,有一个无条件的分支,这是非常必要的,因为如果没有的话,那么按照程序的流程,在”Smaller”标签后面的语句将会被执行.所以我们加了一个“br Exit”,就是让它跳转到”Exit”标签处然后执行这条语句,退出程序.</p><p>还有其它的一些判断式包括<code>beq</code> (==), <code>bne</code>(!= ),<code>bge</code> (&gt;= ),<code>bgt</code>(&gt;), <code>ble</code> (&lt;= ), <code>blt</code>(&lt;) ,还有<code>brfalse</code> (如果栈顶的元素是0),<code>brtrue(如果栈顶的元素非0).你可以用其中的任何一个去执行你程序中的一部分代码然后跳过其它的.就如我在前面提到的,在IL汇编语言中没有高级语言中的那些便利措施,如果你计划用IL汇编语言写代码,那么所有的事情你必做亲自做.</code></p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>在程序语言中比较基础的另外一部分就是循环.循环就是一遍遍执行重复的一段代码.它包括一些跳转分支,由循环里面的索引变量(判断是否满足条件)决定是否跳转.同上面一样,你需要看一下代码,然后花一点时间去理解循环是怎样工作的.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.<span class="function">method <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"></span>) cil managed </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">   <span class="comment">//Define two local</span></span></span><br><span class="line"><span class="function">   variables .locals <span class="title">init</span> (<span class="params">int32, int32</span>)</span></span><br><span class="line"><span class="function">   .maxstack 2</span></span><br><span class="line"><span class="function">   .entrypoint    </span></span><br><span class="line"><span class="function">   ldc.i4 4</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">   stloc.0        <span class="comment">//Upper    limit of the Loop, total 5 </span></span></span><br><span class="line"><span class="function">   ldc.i4 0 </span></span><br><span class="line"><span class="function">   stloc.1        <span class="comment">//Initialize the Starting of loop </span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Start:     </span></span><br><span class="line"><span class="function">   <span class="comment">//Check if the Counter exceeds</span></span></span><br><span class="line"><span class="function">   ldloc.1 </span></span><br><span class="line"><span class="function">   ldloc.0 </span></span><br><span class="line"><span class="function">   bgt Exit <span class="comment">//If Second variable exceeds the first variable, then exit</span></span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">   ldloc.1</span></span><br><span class="line"><span class="function">   call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">WriteLine</span>(<span class="params">int32</span>)</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">   <span class="comment">//Increase the Counter</span></span></span><br><span class="line"><span class="function">   ldc.i4 1</span></span><br><span class="line"><span class="function">   ldloc.1</span></span><br><span class="line"><span class="function">   <span class="keyword">add</span></span></span><br><span class="line"><span class="function">   stloc.1</span></span><br><span class="line"><span class="function">   br Start</span></span><br><span class="line"><span class="function">Exit:    </span></span><br><span class="line"><span class="function">   ret</span></span><br></pre></td></tr></table></figure><p>图1.7 只有主函数</p><p>在高级语言中,例如C#,上面的代码会写成下面的形式:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (temp=<span class="number">0</span>; temp &lt;<span class="number">5</span>; temp++)</span><br><span class="line">            System.Console.WriteLine (temp)</span><br></pre></td></tr></table></figure><p>让我们检查一下上面的代码，首先我们声明了两个变量，第一个变量初始化为4第二个变量初始化为0.循环是从“Start”标签处真正开始的，首先我们检查循环变量（变量2, ldloc 1）是否超过了循环变量的上界（变量1, ldloc 0），如果超过了循环变量的上限，那么程序就会跳转到“Exit”指令处，结束整个程序。如果没有超过，那么这个变量将会被打印到屏幕上，然后循环变量加1，然后又到“start”指令处，再来判断循环变量是否超过上限。这主是IL汇编语言中循环的工作机理。</p><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p>上面我们学习了，判断（条件和分支），循环，变量声明。现在我们来讨论在IL汇编语言中怎么去创建方法。IL汇编语言中创建方法与Ｃ＃和Ｃ＋＋中创建函数基本一样，只是有一点点改变，我希望到现在你们也能够猜到。所以下面我们先来看一段代码片断，然后我们来讨论写的这些代码。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Methods.il</span></span><br><span class="line"><span class="comment">//Creating Methods</span></span><br><span class="line"> </span><br><span class="line">.assembly <span class="keyword">extern</span> mscorlib &#123;&#125;</span><br><span class="line"> </span><br><span class="line">.assembly Methods</span><br><span class="line">&#123;</span><br><span class="line">    .ver <span class="number">1</span>:<span class="number">0</span>:<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">.module Methods.exe</span><br><span class="line"> </span><br><span class="line">.<span class="function">method <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .maxstack <span class="number">2</span></span><br><span class="line">    .entrypoint</span><br><span class="line">    </span><br><span class="line">    ldc.i4 <span class="number">10</span></span><br><span class="line">    ldc.i4 <span class="number">20</span></span><br><span class="line">    <span class="function">call int32 <span class="title">DoSum</span>(<span class="params">int32, int32</span>)</span></span><br><span class="line"><span class="function">    call <span class="keyword">void</span> <span class="title">PrintSum</span>(<span class="params">int32</span>)</span></span><br><span class="line"><span class="function">    ret</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">.method <span class="keyword">public</span> <span class="keyword">static</span> int32 <span class="title">DoSum</span> (<span class="params">int32 , int32 </span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .maxstack <span class="number">2</span>    </span><br><span class="line">    </span><br><span class="line">    ldarg<span class="number">.0</span></span><br><span class="line">    ldarg<span class="number">.1</span></span><br><span class="line">    <span class="keyword">add</span></span><br><span class="line">    </span><br><span class="line">    ret</span><br><span class="line">&#125;</span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintSum</span>(<span class="params">int32</span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .maxstack <span class="number">2</span></span><br><span class="line">    ldstr <span class="string">"The Result is : "</span></span><br><span class="line">    call void [mscorlib]System.Console::Write(string)</span><br><span class="line">    </span><br><span class="line">    ldarg<span class="number">.0</span></span><br><span class="line">    call void [mscorlib]System.Console::Write(int32)</span><br><span class="line">    </span><br><span class="line">    ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图１.７定义及调用方法</p><p>一个简单的把两数相加然后打印出结果的程序，为了简化代码，这两个数是提前定义好的。我们在这里定义了两个方法。注意两个方法都是静态的，所以我们可以不用创建实例直接调用。首先我们加载这两个数到栈中，然后调用第一个方法Dosum，它需要两个参数。在这个方法中，方法里面的声明与主函数中的差不多，我们在上面的例子中已经见过很多次了。我们又定义了评估堆栈的大小<code>maxstack，但是注意我们没有定义入口点.entrypoint ，因为每个程序只能有一个入口点，在上面的的这个例子中，我们把主函数定义成了入口点。ldarg.0和ldarg.1指令告诉运行时加载两个数到评估堆栈，也就是传进来的两个参数。然后我们用add语句把这两个数简单的相加，返回结果。注意这个方法返回一个Int32类型的整数。那么哪一个值将会被返回呢？当然是“相加”指令执行完毕后，在栈上面的数。同时我们调用一个也需要传入一个int32类型参数的方法PrintSum。因此DoSum方法返回的值将会传入到PrintSum方法中去，在PrintSum方法中，首先打印一个简单的字符串，然后加载传进来的一个参数，也把它打印出来。</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从上面我们可以看出在IL汇编语言中，创建一个方法并不是很难。是的，确实不难。在方法中也有引用传值，那么下面我们来看一下用引用传递参数。</span><br></pre></td></tr></table></figure><h2 id="用引用传递参数"><a href="#用引用传递参数" class="headerlink" title="用引用传递参数"></a>用引用传递参数</h2><p>IL也支持引用传递参数，这是理所当然，因为．ＮＥＴ下的高级语言中支持引用传递参数，而这些高级语言的代码又会转换成IL代码。而我们讨论的IL汇编语言就是产生IL代码的。当我们用引用传递参数的时候，会把参数在内存中的存储地址传递给相应的方法而不是像用值传递参数时，把值的副本传递给方法。我们用一个例子来看看IL汇编语言中是怎样用引用传递参数的。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">.<span class="function">method <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .maxstack <span class="number">2</span></span><br><span class="line">    .entrypoint</span><br><span class="line">    .<span class="function">locals <span class="title">init</span> (<span class="params">int32, int32</span>)</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    ldc.i4 10</span></span><br><span class="line"><span class="function">    stloc.0</span></span><br><span class="line"><span class="function">    ldc.i4 20</span></span><br><span class="line"><span class="function">    stloc.1</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    ldloca 0          <span class="comment">//Loads the address of first local variable </span></span></span><br><span class="line"><span class="function">    ldloc.1 <span class="comment">//Loads the value of Second Local Variable</span></span></span><br><span class="line"><span class="function">    call <span class="keyword">void</span> <span class="title">DoSum</span>(<span class="params">int32 &amp;, int32 </span>)</span></span><br><span class="line"><span class="function">    ldloc.0</span></span><br><span class="line"><span class="function">    <span class="comment">//Load First variable again, but value this time, not address</span></span></span><br><span class="line"><span class="function">    call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">WriteLine</span>(<span class="params">int32</span>)</span></span><br><span class="line"><span class="function">    ret </span></span><br><span class="line"><span class="function">&#125; </span></span><br><span class="line"><span class="function">.method    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoSum</span> (<span class="params">int32 &amp;, int32 </span>) cil managed </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    .maxstack <span class="number">2</span> </span><br><span class="line">    .<span class="function">locals    <span class="title">init</span> (<span class="params">int32</span>)    </span></span><br><span class="line"><span class="function">    <span class="comment">//Resolve the address,    and copy value to local variable </span></span></span><br><span class="line"><span class="function">    ldarg.0 </span></span><br><span class="line"><span class="function">    ldind.i4 </span></span><br><span class="line"><span class="function">    stloc.0</span></span><br><span class="line"><span class="function">    ldloc.0</span></span><br><span class="line"><span class="function">    <span class="comment">//Perform the Sum</span></span></span><br><span class="line"><span class="function">    ldarg.1</span></span><br><span class="line"><span class="function">    <span class="keyword">add</span></span></span><br><span class="line"><span class="function">    stloc.0</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">    ldarg.0</span></span><br><span class="line"><span class="function">    ldloc.0</span></span><br><span class="line"><span class="function">    stind.i4</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    ret</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>图１.８用引用传递参数</p><p>在上面的例子中比较有趣的就是我们使用了一些新的指令比如<code>ldloca，它的作用是加载某个变量的地址到栈中去，而不是它的值。在主函数中我们声明了两个局部变量，然后分别对它们赋初值１０和２０。然后我把第一个变量的地址和第二个变量的值加载到栈里面去，然后调用DoSum函数。如果你看到了这个函数调用的签名，那么你就会发现我们在第一个参数前面加了一个&amp;，说明栈里面加载的将会是变量的地址而不是变量的值，它告诉编译器我们将会用引用来传递参数。同样的在函数定义的地方，你也会看到第一个参数前面有同样的一个符号&amp;，当然不用说，也是告诉编译器参数需要以引用的方式传递进来。所以第一个参数是通过引用传递，第二个参数是传递值。现在问题就是怎样通过这个引用地址来得到这个值，以便我们后面对这个值进行一些操作，或者对这个变量重新赋值，如果有需要的话。为了达到这个目的，我们先把第一个参数（实际上是一个值的地址而不是值本身）加载到栈里面去，然后用ldind.i4 指令通过这个地址得到它的值（到这个地址所指的地方去，读出所指向的值，然后加载到栈里面去）。</code>我们把那个存到一个局部变量里面去，以便于我们后面可以重复的使用（如果不这样的话，我们后面要使用这个值的时候，就要重复这些步骤）。然后，很简单，我们得到那个地址所指向的值和第二个参数（通过值传递的），把它们加载到栈里面去，然后相加，最后把结果存储到同样的局部变量里面去。更有趣的一件事是我们在内存中改变了第一个参数（通过引用传递的参数）所指向的值。我们首先是加载第一个参数（通过引用传递的那个参数）到栈里面去，实际上是传进来的那个值的地址。然后加载我们想要被前面那个地址所指向的值（译者注：相当是改变前面的地址所指向的值）。然后用和我们上面用到的ldind.i4 指令相反的指令stind.i4。这条指令把已存在栈里面的值存到已经加载到栈里面的一个内存地址里面去 。（译者注：stind.i4的作用是在所提供的地址存储 int32 类型的值。在调用此指令之前，要确保地址和值已经加载到栈里面）。我们在主函数中打印出来这个值来看它是否改变了，注意DoSum方法并没有返回任何东西。在主函数中，我们仅仅需要重新加载第一个变量（现在是值，而不是内存地址），然后调用WriteLine方法把它打印出来。</p><p>这就是IL汇编语言中的引用变量，到现在为止，我们学习了声明变量，条件判断，循环，方法（值传递和引用传递）的使用方法，现在是该学习怎样在IL汇编语言中定义命名空间和类的时候了。</p><h2 id="创建命名空间和类"><a href="#创建命名空间和类" class="headerlink" title="创建命名空间和类"></a>创建命名空间和类</h2><p>当然，在IL汇编语言中肯定可以创建你自己的类和命名空间。实际上，就像其它任何高级语言一样，在IL汇编语言中创建自己的类以及命名空间是非常容易的。不信吗？那我们接下来看一看。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Classes.il</span></span><br><span class="line"><span class="comment">//Creating </span></span><br><span class="line">Classes</span><br><span class="line">.assembly <span class="keyword">extern</span></span><br><span class="line"> </span><br><span class="line">mscorlib &#123;&#125; .assembly Classes</span><br><span class="line"> </span><br><span class="line">&#123; .ver <span class="number">1</span>:<span class="number">0</span>:<span class="number">1</span>:<span class="number">0</span>    &#125; </span><br><span class="line">.module Classes.exe</span><br><span class="line">.namespace HangamaHouse</span><br><span class="line"> </span><br><span class="line">&#123; </span><br><span class="line">    .class <span class="keyword">public</span> ansi auto Myclass extends [mscorlib]System.Object</span><br><span class="line">    &#123;</span><br><span class="line">        .<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            .maxstack <span class="number">1</span></span><br><span class="line">            .entrypoint</span><br><span class="line">        </span><br><span class="line">            ldstr <span class="string">"Hello World From HangamaHouse.MyClass::main()"</span></span><br><span class="line">            call void [mscorlib]System.Console::WriteLine(string)</span><br><span class="line">            </span><br><span class="line">            ret</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图1.9创建自己的命名空间和类</p><p>我想，现在上面的代码不需要过多的解释了。非常简单。.namespace 指令，后面跟着一个名字<code>HangamaHouse，它告诉编译器我想要创建一个叫HangamaHouse的命名空间。在这个命名空间里，我们用.class 指令定义了一个类，并且告诉编译器，我这个类是公有的，它继承于System.Object 这个父类。我们定义的这个类里面只有一个公有的静态方法。其余的代码相信你肯定很熟悉。</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里我还想提一下，那就是你创建的所有类如果没有说明，那么默认都是继承于Object基类。像我们的这个例子，我们显示说明了这个类是继承于命名空间System里面的一个Object基类。如果我们没有显示的说明，它还是默认继承于Object这个基类。当然你定义的类也可以继承于别的类，那么你的类就不是继承于Object类（但是你的类所继承的类很有可能继承于Object，译者注：所有的类最终都是继承于Object这个类）。</span><br><span class="line">在上面的创建类的过程中还有两个关键字ansi和auto。Ansi告诉类中所有的字符串必须转换成ANSI（American National Standards Institute）字符。还有其它的一些选项是unicode和autochar（根据不同的平台，会自动转换成相对应的字符集）。另外一个关键字auto告诉运行时（CLR）自动为非托管内存中的对象的成员选择适当的布局。对应这个关键字的其它的选项还有sequential（对象的成员按照它们在被导出到非托管内存时出现的顺序依次布局）<span class="keyword">explicit</span>（对象的各个成员在非托管内存中的精确位置被显式控制）。想获得更多的信息请参考MSDN上的StructLayout或LayoutKind枚举变量。auto和ansi是类中默认的关键字，如果你没有定义任何东西，那么它们将会被自动的附上。</span><br></pre></td></tr></table></figure><h2 id="对象的作用域（成员访问修饰符）"><a href="#对象的作用域（成员访问修饰符）" class="headerlink" title="对象的作用域（成员访问修饰符）"></a>对象的作用域（成员访问修饰符）</h2><p>下面的表格总结了一下IL汇编语言中类的作用域</p><p><a href="http://images.cnblogs.com/cnblogs_com/xiaoxiangfeizi/201108/201108081203243546.png" target="_blank" rel="noopener"><img src="https://images.cnblogs.com/cnblogs_com/xiaoxiangfeizi/201108/201108081203285908.png" alt="image"></a></p><p>图1.10IL汇编语言中的成员访问修饰符</p><p>还有其它的一些可以用在方法和字段（类中的变量）前面的修饰符。你可以在MSDN上找到一个完整的列表。</p><h2 id="创建和使用类的对象"><a href="#创建和使用类的对象" class="headerlink" title="创建和使用类的对象"></a>创建和使用类的对象</h2><p>在这一部分，我将向你们演示怎样在IL汇编语言中创建一个类的对象并使用它。在这之前，你必须知道怎样在IL汇编语言中创建你自己的命名空间和类。但是如果不使用它，那么创建的这些东西就没有用，所以我们来开始创建一个简单的类并使用它。</p><p>我们来在IL汇编语言中创建我们自己的一个类库。这个简单的类库只包含一个公有的方法，这个方法接受一个变量并且返回这个变量的平方。简单的比较容易理解，我们来看代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.assembly <span class="keyword">extern</span> mscorlib &#123;&#125;</span><br><span class="line">.assembly MathLib</span><br><span class="line">&#123;</span><br><span class="line">    .ver <span class="number">1</span>:<span class="number">0</span>:<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.module MathLib.dll</span><br><span class="line"> </span><br><span class="line">.namespace HangamaHouse</span><br><span class="line">&#123;    </span><br><span class="line">    .class <span class="keyword">public</span> ansi auto MathClass extends [mscorlib]System.Object</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        .<span class="function">method <span class="keyword">public</span> int32 <span class="title">GetSquare</span>(<span class="params">int32</span>) cil managed</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            .maxstack <span class="number">3</span></span><br><span class="line">            ldarg<span class="number">.0</span>        <span class="comment">//Load the Object's 'this' pointer on the stack</span></span><br><span class="line">            ldarg<span class="number">.1</span></span><br><span class="line">            ldarg<span class="number">.1</span></span><br><span class="line">            mul</span><br><span class="line">            ret        </span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图1.11求数学平方的类库</p><p>注意：把上面的代码编译成DLL文件，用ILAsm MathLib.il /dll 指令</p><p>上面的代码看起来很简单，它定义了一个命名空间HangamaHouse，然后在命名空间里面定义了一个MathClass类，这个类和上面的代码（图1.10）中定义的类一样继承于System命名空间里面的Object类。在这个类里面我们定义了一个需要传入一个int32类型参数的方法GetSquare。 我们把<code>maxstack的大小定义为3，然后加载第0个参数。接下来我们重复的加载两次第二个参数。等等，我们在这里只接受了一个参数，但是我们却加载了参数0和参数1（总共两个参数）。这怎么可能？确实可以，实际上第一个参数(ldarg.0)是这个对象的this指针的引用，因为每个对象的实例都会把自己在内存中的地址也传进来。所以实际上我们的参数是从索引1处开始的。我们加载第一个参数两次去为了后面执行mul指令把这两个数相乘。最后的结果将会放在栈的顶部，然后在我们调用ret指令的时候，返回给调用这个方法的地方去。</code></p><p>这个类库编译没有问题，我们来看看一个使用这个类库的例子</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.assembly <span class="keyword">extern</span> mscorlib &#123;&#125;</span><br><span class="line">.assembly <span class="keyword">extern</span> MathLib &#123;.ver <span class="number">1</span>:<span class="number">0</span>:<span class="number">1</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//rest code here</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">.<span class="function">method <span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">Main</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .maxstack <span class="number">2</span></span><br><span class="line">    .entrypoint</span><br><span class="line">    .<span class="function">locals <span class="title">init</span> (<span class="params">valuetype [MathLib]HangamaHouse.MathClass mclass</span>) </span></span><br><span class="line"><span class="function">            </span></span><br><span class="line"><span class="function">    ldloca mclass</span></span><br><span class="line"><span class="function">    ldc.i4 5</span></span><br><span class="line"><span class="function">    call instance int32 [MathLib]HangamaHouse.MathClass::<span class="title">GetSquare</span>(<span class="params">int32</span>)</span></span><br><span class="line"><span class="function">    ldstr "The Square of 5 Returned : "</span></span><br><span class="line"><span class="function">    call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">Write</span>(<span class="params"><span class="keyword">string</span></span>)</span></span><br><span class="line"><span class="function">    call <span class="keyword">void</span> [mscorlib]System.Console::<span class="title">WriteLine</span>(<span class="params">int32</span>)</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">    ret</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>​    图1.12使用类库中的MathClass类</p><p>这个方法里面最前面的两行很简单。我们看到第三行定义了一个<code>MathClass类型的局部变量（HangamaHouse命名空间中的，注意我们已经在导入mscorlib 类库的时候导入了这个类库）。我们也提供了这个类库的版本信息，尽管可以不需要，因为我们在前面引用外部类库mscorlib类库的时候没有提供版本信息。另外在我们要创建的对象类型前面，我们加了关键字valuetype，我们也提供了这个类的完整签名包括类库的名字。接下来我们加载了局部变量mclass的地址到栈里面。然后加载了一个整型数5到栈里面，接着调用了MathClass类中的GetSquare方法。之所以能够这样做，是因为我们在之前已经加载了mclass类的对象，这个对象的内存引用已经加载到栈里面去了。当我们调用MathClass类的GetSquare方法时，它会在栈上面找这个对象的引用以及所要传入的参数。如果找到了，它就使用这个引用变量去调用那个方法。另外一个我们还注意的就是在调用方法的时候我们用到了一个我们以前从来没有用到的关键字instance，instance关键字告诉编译器我们将会以对象的实例来调用方法，它不是静态的方法。执行完这些指令后，GetSquare方法返回一个int32类型的数并把它存入栈里面，我们后面就以字符串的形式在控制台把这个数打印出来。</code></p><p>所以在这里最重要的事就是用.locals 指令和valuetype以及完整的签名包括类库名来声明一个类的对象，第二就是调用这个类里面的方法，它首先会加载这个类对象的引用，然后加载要传递给这个方法的任何变量，最后调用这个方法的时候加上关键字instance。</p><p>同样的，我们可以在类里面用属性和构造函数，并且在外面的代码里面使用它们。我这篇文章的下一部分将会介绍怎样在IL汇编语言中创建私有字段，构造函数和属性，然后用IL汇编代码去调用它们。</p><h2 id="创建构造函数和属性"><a href="#创建构造函数和属性" class="headerlink" title="创建构造函数和属性"></a>创建构造函数和属性</h2><p>构造函数在高级语言中是在创建对象时会调用的一个方法，但是在低级语言中，像IL汇编语言，你需要人工的去调用它，它是不返回任何东西的一个方法。下面的示例代码演示了怎样创建构造函数。我只是把需要的代码拿出来了，这篇文章的源代码里面包括了这一部分的所有代码。在阅读这一部分的时候，一定要集中注意力，因为这一部分将会教给你很多东西。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.class <span class="keyword">public</span> MathClass extends [mscorlib]System.ValueType</span><br><span class="line">&#123;        </span><br><span class="line">    .field <span class="keyword">private</span> int32 mValue</span><br><span class="line">    <span class="comment">//Other code goes here</span></span><br><span class="line"> </span><br><span class="line">    .method <span class="keyword">public</span> specialname rtspecialname </span><br><span class="line">        instance <span class="keyword">void</span> .ctor() cil managed</span><br><span class="line">    &#123;        </span><br><span class="line">            </span><br><span class="line">        ldarg<span class="number">.0</span></span><br><span class="line">        ldc.i4.s    <span class="number">15</span></span><br><span class="line">        stfld int32 HangamaHouse.MathClass::mValue</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Other code goes here.</span></span><br></pre></td></tr></table></figure><p>图1.13 MathLib类的构造函数</p><p>第一个你会注意到的就是我创建的类是继承于<code>System.ValyeType而不是继承于Object。在.NET里面，一个类实际上也是一种类型所以它继承于ValueType。在这之前我的类是继承于Object类，但是现在不是时候去讨论这两者的区别了，因为我们要创造一个完整的类（有构造函数，属性等等），如果你不想利用类的这些特性，你可以让你的类继承于任何类。</code></p><p>在声明了类之后，我定义了一个私有字段mValue（高级语言中的私有变量）。然后我用.method 指令声明了一个构造函数。记住，构造函数也是一个方法。现在你会对用.ctor代替类名（在高级语言像c++中也是如此）觉得吃惊。是的，在IL汇编语言中.ctor就代表构造函数。这是一个默认的构造函数，因为它没有任何参数。我们在这里做的就是用ldarg.0语句来加载对象的引用，然后我们加载一个常量15，赋值给类中的私有变量mValue。stfld语句可以用来对任何字段赋值。我们提供了这个字段的完整签名。我想你现在应该不会吃惊我们为什么要这样做。最后我们从这个方法（构造函数）中返回。</p><p>你可能也注意到了我们在声明构造函数的时候用了一系列关键字，包括specialname和rtspecilaname.实际上，这些关键字告诉运行时把这些方法的名字当作一种特殊的名字。你可以在声明构造函数或属性的使用它，但是这些不是必要的。</p><p>不像高级语言那样，在IL汇编语言中，构造函数不是自动调用的，而是需要你显示的调用它，下面的一个代码片断演示了怎样调用一个构造函数去初始化类中的变量。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .maxstack <span class="number">2</span></span><br><span class="line">    .entrypoint</span><br><span class="line">    .<span class="function">locals <span class="title">init</span> (<span class="params">valuetype [MathLib]HangamaHouse.MathClass mclass</span>) </span></span><br><span class="line"><span class="function">            </span></span><br><span class="line"><span class="function">    ldloca mclass            </span></span><br><span class="line"><span class="function">    call instance <span class="keyword">void</span> [MathLib]HangamaHouse.MathClass::.<span class="title">ctor</span>(<span class="params"></span>)</span></span><br></pre></td></tr></table></figure><p>上面的代码创建一个MathClass类型的局部变量mclass，这个类型是在HangamaHouse命名空间里面的。然后我们加载这个对象变量的地址到材里面去，然后调用构造函数（.ctro方法），如果你仔细观察，你就会发现它和我们在IL汇编语言中调用其它普通方法一样，没有区别，同样的，你可以定义重载的构造函数当你在定义.ctor方法的时候，让它接受几个参数。然后像我们调用默认构造函数一样去调用它。</p><p>现在来讨论属性，其实属性实质上也是方法，看一下它的特性，我们就会完全明白。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.<span class="function">method  specialname <span class="keyword">public</span> instance int32 <span class="title">get_Value</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ldarg<span class="number">.0</span></span><br><span class="line">    ldfld int32 HangamaHouse.MathClass::mValue</span><br><span class="line">    ret</span><br><span class="line">&#125;</span><br><span class="line">.<span class="function">method specialname <span class="keyword">public</span> instance <span class="keyword">void</span> <span class="title">set_Value</span>(<span class="params">int32 </span>) cil managed</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ldarg<span class="number">.0</span></span><br><span class="line">    ldarg<span class="number">.1</span></span><br><span class="line">    stfld int32 HangamaHouse.MathClass::mValue</span><br><span class="line">    </span><br><span class="line">    ret</span><br><span class="line">&#125;        </span><br><span class="line"><span class="comment">//Define the property, Value</span></span><br><span class="line">.<span class="function">property int32 <span class="title">Value</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .<span class="function"><span class="keyword">get</span> instance int32 <span class="title">get_Value</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    .<span class="keyword">set</span> instance <span class="keyword">void</span> <span class="title">set_Value</span>(<span class="params">int32 </span>)</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>图1.15属性</p><p>你可以看一下上面的代码，你会肯定的说，这和方法的代码一样。但是你在这可以看到另外一个东西，那就是.property 指令，在里面它定义了两个东西，一个是属性get，一个是属性set。说明这两个方法属于属性的一部分。我们可以说这两个方法在上面都定义了，一个是<code>get_Value</code> 方法一个是<code>set_Value方法。这些方法就像在文章中出现的一些普通方法，调用属性很简单，因为它们就像方法一样。</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.maxstack <span class="number">2</span> .locals</span><br><span class="line">init (valuetype [MathLib]HangamaHouse.MathClass tclass) </span><br><span class="line"> </span><br><span class="line">ldloca tclass</span><br><span class="line">ldc.i4 <span class="number">25</span> </span><br><span class="line">call instance void [MathLib]HangamaHouse.MathClass::set_Value(int32) </span><br><span class="line">ldloca tclass </span><br><span class="line">call instance int32 [MathLib]HangamaHouse.MathClass::get_Value()</span><br><span class="line">ldstr <span class="string">"Propert Value Set to : "</span> </span><br><span class="line">call void [mscorlib]System.Console::Write(string) </span><br><span class="line">call void [mscorlib]System.Console::WriteLine(int32)</span><br></pre></td></tr></table></figure><p>图1.16 使用属性，GetSquare方法也被调用了</p><p>不要吃惊，我们创建了一个类的实例，然后调用了set_Value方法（实际上是一个属性，我们准备去修改这个属性的值）。然后为了证实一下值是否被修改了，我们重新读取了一下这个属性，然后把它打印出来。</p><p>到现在为止，我们已经讨论了IL汇编语言中的大部分内容。但是还有很重要的一部分，那就是错误和调试。（译者注：老外这好像写错了，因为调试是在最后一部分，下面实际上是讲如何创建窗体）</p><h2 id="创建窗体"><a href="#创建窗体" class="headerlink" title="创建窗体"></a>创建窗体</h2><p>这部分内容告诉我们怎样联系上面所讲的内容创建一个简单的GUI，Windows窗体。在这个应用程序里面，我从<code>System.Windows.Forms.Form</code> 类中继承创建了一个简单的窗体，它没有包含任何控件，但是我修改了一些它的属性，例如BackColor,Text和WindowState。代码一步一步的比较简单。大家一起来看一下我结束这篇文章之前的最后一段代码。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.namespace MyForm</span><br><span class="line">&#123;</span><br><span class="line">  .class <span class="keyword">public</span> TestForm extends </span><br><span class="line">       [<span class="meta">System.Windows.Forms</span>]System.Windows.Forms.Form</span><br><span class="line">  &#123;</span><br><span class="line">    .field private class [System]System.ComponentModel.IContainer components</span><br><span class="line">    .<span class="function">method <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>) cil managed</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      .entrypoint</span><br><span class="line">      .maxstack  <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">      <span class="comment">//Create New Object of TestForm Class and Call the Constructor     </span></span><br><span class="line">      newobj     instance void MyForm.TestForm::.ctor()</span><br><span class="line">      call       <span class="keyword">void</span> [System.Windows.Forms]</span><br><span class="line">          System.Windows.Forms.Application::Run(</span><br><span class="line">          class [System.Windows.Forms]System.Windows.Forms.Form)</span><br><span class="line">      ret</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>图1.17Windows Form的入口函数</p><p>这是整个应用程序的入口函数，首先（在<code>MyForm命名空间里面创建类TestForm后</code>），我们定义了一个IContainer的局部变量（字段）。注意在定义这种字段之前，我们加上了关键字class 。然后在主函数里，我们用<code>newobj指令创建了一个TestForm 类的对象。然后我们调用Application.Run 方法去运行这个应用程序。如果你把它与高级语言相比，你就会发现，它和我们现在用的手法是一样的。现在我们来看看我们类（TestForm）的构造函数。</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.method <span class="keyword">public</span> specialname rtspecialname instance </span><br><span class="line">       <span class="keyword">void</span>  .ctor() cil managed</span><br><span class="line">   &#123;     </span><br><span class="line">     .maxstack  <span class="number">4</span></span><br><span class="line">           </span><br><span class="line">     ldarg<span class="number">.0</span></span><br><span class="line">    <span class="comment">//Call Base Class Constructor</span></span><br><span class="line">     call       instance <span class="keyword">void</span> [System.Windows.Forms]</span><br><span class="line">                       System.Windows.Forms.Form::.ctor()</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//Initialize the Components</span></span><br><span class="line">     ldarg<span class="number">.0</span></span><br><span class="line">     newobj   instance void [System]System.ComponentModel.Container::.ctor()</span><br><span class="line">     stfld    class [System]System.ComponentModel.IContainer </span><br><span class="line">                       MyForm.TestForm::components</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//Set the Title of the Window (Form)</span></span><br><span class="line">     ldarg<span class="number">.0</span></span><br><span class="line">     ldstr      <span class="string">"This is the Title of the Form...."</span></span><br><span class="line">     call   instance <span class="keyword">void</span> [System.Windows.Forms]</span><br><span class="line">                      System.Windows.Forms.Control::set_Text(string)</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//Set the Back Color of the Form</span></span><br><span class="line">     ldarg<span class="number">.0</span></span><br><span class="line">     ldc.i4 <span class="number">0xff</span></span><br><span class="line">     ldc.i4 <span class="number">0</span></span><br><span class="line">     ldc.i4 <span class="number">0</span></span><br><span class="line">     call valuetype [System.Drawing]System.Drawing.Color </span><br><span class="line">                    [System.Drawing]System.Drawing.Color::FromArgb(</span><br><span class="line">                    int32, int32, int32)</span><br><span class="line"> </span><br><span class="line">     call   instance <span class="keyword">void</span> [System.Windows.Forms]</span><br><span class="line">                    System.Windows.Forms.Control::set_BackColor(</span><br><span class="line">                    valuetype [System.Drawing]System.Drawing.Color)</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     <span class="comment">//Maximize the Form using WindowState Property</span></span><br><span class="line">     ldarg<span class="number">.0</span></span><br><span class="line">     ldc.i4 <span class="number">2</span>        <span class="comment">//2 for Maximize</span></span><br><span class="line">     call instance <span class="keyword">void</span> [System.Windows.Forms]</span><br><span class="line">                    System.Windows.Forms.Form::set_WindowState(</span><br><span class="line">                    valuetype [System.Windows.Forms]</span><br><span class="line">                    System.Windows.Forms.FormWindowState)</span><br><span class="line">     ret</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>图1.18TestForm中的.ctor方法（构造函数）</p><p>非常简单，我们只是调用了基类的.ctor方法（构造函数）。然后我们创建一个Container 类的对象，把它当作我们的一个组件对象（类中的字段），窗体初始化到此就完成了。接下来我们为我们的新窗体设置一些属性。首先设置窗体的标题（Text属性）。我们加载一个字符串到栈里面去，然后调用Control类的 set_Text方法（因为Text属性是从Control继承而来的），设置了Text属性后，我们开始去设置BackColor属性。我们调用FromArgb方法从红，绿，蓝中获取颜色值。我们首先加载了三个值到栈里面然后调用Color.FromArgb方法去得到一个Color类的对象，然后把这个Color值赋给BackColor属性。我们跟前面设置Text属性一样的方式来设置BackColor属性。最后我们把<code>WindowState</code> 属性设置为Maximized（最大化），用同样的方式。你可能注意到了我们加载了一个常量到栈里面去，这个常量是一个<code>FormWindowState</code> 的枚举值，每个枚举变量都已经提前定义好了值。</p><p>尽管创建窗体的代码已经完成了，但是我们在这里也定义了一个Dispose事件（窗体的析构函数），通过这个事件我们可以移除不需要的对象以此来清理内存。如果你对Dispose事件的代码感兴趣，那么看一下几行代码。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.<span class="function">method family <span class="keyword">virtual</span> instance <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"><span class="keyword">bool</span> disposing</span>) cil managed</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    .maxstack  <span class="number">2</span></span><br><span class="line"> </span><br><span class="line">    ldarg<span class="number">.0</span></span><br><span class="line">    ldfld      class [System]System.ComponentModel.IContainer </span><br><span class="line">                 MyForm.TestForm::components</span><br><span class="line">    callvirt   instance void [mscorlib]System.IDisposable::Dispose()</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//Call Base Class's Dispose Event</span></span><br><span class="line">    ldarg<span class="number">.0</span></span><br><span class="line">    ldarg<span class="number">.1</span></span><br><span class="line">    call       instance <span class="keyword">void</span> [System.Windows.Forms]</span><br><span class="line">                  System.Windows.Forms.Form::Dispose(bool)</span><br><span class="line">    ret</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个Dispose方法是重载的，所以它被声明为虚方法。我们只需要加载这个对象的引用（this），加载一个组件(component)字段，然后通过IDisposable调用Dispose方法，然后调用我们窗体的Dispose方法就可以了。</p><p>所以创建一个用户界面（UI）不是一件非常困难的事（尽管有一点）。从现在开始，你可以在你的窗体里面加上其它的控件比如textBox,lable等等，然后响应它们的事件，你能吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误和调试</span><br></pre></td></tr></table></figure><p>每门程序语言里面都有错误，IL汇编语言中也不例外。像其它语言中的错误一样，在ＩＬ汇编语言中，你也可以遇到编译错误（语法错误），运行错误，逻辑错误。我不打算去详细的讲解这些错误是什么，因为你们都非常熟悉。这部分的目的是介绍一些帮助你调试程序的工具和技巧。首先在你编译程序的时候可以生成一个ｄｅｂｕｇ文件，在用ILAsm.exe编译代码时加上/debug分支即可，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1: ILAsm.exe Test.il /debug</span><br></pre></td></tr></table></figure><p>它将会产生一个叫Text.exe的exe文件和一个叫Test.pdb的调试信息文件，在后面调试的过程中，你将会用到这个文件。</p><p>你可以用一个工具去检验一下你的应用程序（实际上是程序集），就是PE 验证（<em>peverify.exe</em>），.NET Framework SDK 自带的一个工具，你可以在<em>C:\Program Files\Microsoft .NET\Framework SDK\Bin</em> 目录下（默认的）找到它。<em>peverify</em>工具并不是在源代码中去验证程序集，而是通过exe文件来验证编译器是否产生了无效的代码。在某些情况下，你需要去验证一下你的程序集，比如你使用的第三编译工具来编译你的代码，你就需要验证一下。这个工具用起来很简单，看下面的一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   1: peverify.exe Test.exe </span><br><span class="line">要想知道更多的用法，你可以用*peverify.exe* */?*来查看*peverify.exe* 其它的用法。</span><br></pre></td></tr></table></figure><p>你可以通过<em>ILDasm.exe</em>来得到任何编译过的Exe或DLL文件的IL代码，<em>ILDasm.exe</em>是另外一个非常有用的.net自带的工具，它可以帮助你在底层分析你的代码。如果你在高级语言中编写代码，而你又想看一下编译器产生的IL代码，那么这个工具也非常有用。你可以在和<em>peverify.exe</em>相同的目录下找到它。你可以用这种方法得到任何.NET下exe文件的IL代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1: ILDasm.exe SomeProject.exe /out:SomeProject.il</span><br></pre></td></tr></table></figure><p>还有其它很多可以用来调试分析．ＮＥＴ应用程序的工具，比如<em>DbgClr.exe, CorDbg.exe。</em>你可以在MSDN，.NET Framework SDK 或其它第三方网站上找到许多有关的资料。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章里面，我们学习了IL汇编语言然后用IL汇编语言写了一些程序。我们从IL汇编语言的基础开始。写了一个在控制台输出一个字符串的简单程序。然后学习了一点评估堆栈的知识，用一些简单的代码（两数相加）来演示了它是怎样工作的。接着我们学习了IL数据类型，用这些数据类型声明变量，用来进行条件判断，写循环等等。我们也学会了定义了方法，在那之后，我们转向了创建命名空间和类。我们创建了我们自己的类库，用别的程序调用它。然后又在我们的类里面创建了构造函数和属性。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>用IL汇编语言写代码并不是一件简单的事情。还有很多东西在这篇文章里面没有讨论，比如数组，异常处理等等。但是当你对IL汇编语言熟悉之后，你可以用它做很多事情。如果你想从底层来分析你的代码，或者计划为.NET开发一个编译器，那么IL汇编语言将会非常有用。如果你是一个.NET的初学者，那么我不建议你去学习它因为学习它之前，你必须对.NET平台有一个很好的理解。但是从另一方面说，它又可以帮助你去了解.NET的运行时（CLR）在幕后是怎样工作的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;转载出处&quot;&gt;&lt;a href=&quot;#转载出处&quot; class=&quot;headerlink&quot; title=&quot;转载出处&quot;&gt;&lt;/a&gt;转载出处&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xiaoxiangfeizi/a
      
    
    </summary>
    
      <category term="硬核C Sharp" scheme="https://jaychenfe.github.io/categories/%E7%A1%AC%E6%A0%B8C-Sharp/"/>
    
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://jaychenfe.github.io/2019/06/10/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaychenfe.github.io/2019/06/10/建造者模式/</id>
    <published>2019-06-10T08:18:07.000Z</published>
    <updated>2020-08-05T02:40:11.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h2><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190630122328.png" alt=""></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="KFC点餐-C-实现"><a href="#KFC点餐-C-实现" class="headerlink" title="KFC点餐(C#实现)"></a>KFC点餐(C#实现)</h2><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190630122140.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;h2 id=&quot;模型图&quot;&gt;&lt;a href=&quot;#模型图&quot; class=&quot;headerlink&quot; title=&quot;模型图&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://jaychenfe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="https://jaychenfe.github.io/2019/05/22/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaychenfe.github.io/2019/05/22/命令模式/</id>
    <published>2019-05-22T22:53:03.000Z</published>
    <updated>2020-08-05T02:40:11.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190526093521.png" alt=""></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="菜单程序-Js实现"><a href="#菜单程序-Js实现" class="headerlink" title="菜单程序(Js实现)"></a>菜单程序(Js实现)</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h3><p>假设我们正在编写一个用户界面程序，该用户界面上至少有数十个Button 按钮。因为项目比较复杂，所以我们决定让某个程序员负责绘制这些按钮，而另外一些程序员则负责编写点击按钮后的具体行为，这些行为都将被封装在对象里。在大型项目开发中，这是很正常的分工。对于绘制按钮的程序员来说，他完全不知道某个按钮未来将用来做什么，可能用来刷新菜单界面，也可能用来增加一些子菜单，他只知道点击这个按钮会发生某些事情</p><p>这里运用命令模式的理由：点击了按钮之后，必须向某些负责具体行为的对象发送请求，这些对象就是请求的接收者。但是目前并不知道接收者是什么对象，也不知道接收者究竟会做什么。此时我们需要借助命令对象的帮助，以便解开按钮和负责具体行为对象之间的耦合。</p><p>设计模式的主题总是把不变的事物和变化的事物分离开来，命令模式也不例外。按下按钮之后会发生一些事情是不变的，而具体会发生什么事情是可变的。通过command 对象的帮助，将来我们可以轻易地改变这种关联，因此也可以在将来再次改变按钮的行为</p><h3 id="传统实现"><a href="#传统实现" class="headerlink" title="传统实现"></a>传统实现</h3><p>下面进入代码编写阶段</p><p>首先在页面中完成这些按钮的“绘制”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  &lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;button id="button1"&gt;点击按钮1&lt;/</span>button&gt;</span><br><span class="line">        &lt;button id=<span class="string">"button2"</span>&gt;点击按钮<span class="number">2</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button id="button3"&gt;点击按钮3&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            <span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementById(<span class="string">'button1'</span>),</span><br><span class="line">            <span class="keyword">var</span> button2 = <span class="built_in">document</span>.getElementById(<span class="string">'button2'</span>),</span><br><span class="line">            <span class="keyword">var</span> button3 = <span class="built_in">document</span>.getElementById(<span class="string">'button3'</span>);</span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>接下来定义setCommand 函数，setCommand 函数负责往按钮上面安装命令。可以肯定的是，点击按钮会执行某个command 命令，执行命令的动作被约定为调用command 对象的execute()方法。<br>虽然还不知道这些命令究竟代表什么操作，但负责绘制按钮的程序员不关心这些事情，他只需要预留好安装命令的接口，command 对象自然知道如何和正确的对象沟通：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span> (<span class="params">button, command</span>) </span>&#123;</span><br><span class="line">              button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  command.execute();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br></pre></td></tr></table></figure><p>最后，负责编写点击按钮之后的具体行为的程序员总算交上了他们的成果，他们完成了刷新菜单界面、增加子菜单和删除子菜单这几个功能，这几个功能被分布在MenuBar 和SubMenu 这两个对象中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">    refresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'刷新菜单目录'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'增加子菜单'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    del: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在让button 变得有用起来之前，我们要先把这些行为都封装在命令类中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span> (<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;;</span><br><span class="line">RefreshMenuBarCommand.prototype.execute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.refresh();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> AddSubMenuCommand = <span class="function"><span class="keyword">function</span> (<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AddSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.add();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> DelSubMenuCommand = <span class="function"><span class="keyword">function</span> (<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;;</span><br><span class="line">DelSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后就是把命令接收者传入到command 对象中，并且把command 对象安装到button 上面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> RefreshMenuBarCommand(MenuBar);</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = <span class="keyword">new</span> AddSubMenuCommand(SubMenu);</span><br><span class="line"><span class="keyword">var</span> delSubMenuCommand = <span class="keyword">new</span> DelSubMenuCommand(SubMenu);</span><br><span class="line">setCommand(button1, refreshMenuBarCommand);</span><br><span class="line">setCommand(button2, addSubMenuCommand);</span><br><span class="line">setCommand(button3, delSubMenuCommand);</span><br></pre></td></tr></table></figure><h3 id="JavaScript-中的命令模式"><a href="#JavaScript-中的命令模式" class="headerlink" title="JavaScript 中的命令模式"></a>JavaScript 中的命令模式</h3><p>也许我们会感到很奇怪，所谓的命令模式，看起来就是给对象的某个方法取了execute 的名字。引入command 对象和receiver 这两个无中生有的角色无非是把简单的事情复杂化了，即使不用什么模式，用下面寥寥几行代码就可以实现相同的功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindClick = <span class="function"><span class="keyword">function</span> (<span class="params">button, func</span>) </span>&#123;</span><br><span class="line">    button.onclick = func;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">    refresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'刷新菜单界面'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'增加子菜单'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    del: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bindClick(button1, MenuBar.refresh);</span><br><span class="line">bindClick(button2, SubMenu.add);</span><br><span class="line">bindClick(button3, SubMenu.del);</span><br></pre></td></tr></table></figure><p>其实,命令模式的由来，其实是回调（callback）函数的一个面向对象的替代品。<br>JavaScript 作为将函数作为一等对象的语言，跟策略模式一样，命令模式也早已融入到了JavaScript 语言之中。运算块不一定要封装在command.execute 方法中，也可以封装在普通函数中。函数作为一等对象，本身就可以被四处传递。即使我们依然需要请求“接收者”，那也未必使用面向对象的方式，闭包可以完成同样的功能。</p><p>在面向对象设计中，命令模式的接收者被当成command 对象的属性保存起来，同时约定执行命令的操作调用command.execute 方法。在使用闭包的命令模式实现中，接收者被封闭在闭包产生的环境中，执行命令的操作可以更加简单，仅仅执行回调函数即可。无论接收者被保存为对象的属性，还是被封闭在闭包产生的环境中，在将来执行命令的时候，接收者都能被顺利访问。用<br>闭包实现的命令模式如下代码所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> button, func </span>)</span>&#123;</span><br><span class="line">button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">func();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'刷新菜单界面'</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver </span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">receiver.refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = RefreshMenuBarCommand( MenuBar );</span><br><span class="line">setCommand( button1, refreshMenuBarCommand );</span><br></pre></td></tr></table></figure><p>如果想更明确地表达当前正在使用命令模式，或者除了执行命令之外，将来有可能还要提供撤销命令等操作。那我们最好还是把执行函数改为调用execute 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span> (<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            receiver.refresh();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span> (<span class="params">button, command</span>) </span>&#123;</span><br><span class="line">    button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = RefreshMenuBarCommand(MenuBar);</span><br><span class="line">setCommand(button1, refreshMenuBarCommand);</span><br></pre></td></tr></table></figure><h2 id="计算器-C-实现"><a href="#计算器-C-实现" class="headerlink" title="计算器(C#)实现"></a>计算器(C#)实现</h2><p>设计一个计算器具有以下功能</p><ul><li>可以进行整数的加减乘除</li><li>用户可以撤销操作</li><li>用户可以重新执行撤销的操作</li></ul><p>代码如下:</p><p>Command类</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> "Command"</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Command</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">UnExecute</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Calculator类(Receiver)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> "Receiver"</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _curr = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span>(<span class="params"><span class="keyword">char</span> @<span class="keyword">operator</span>, <span class="keyword">int</span> operand</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (@<span class="keyword">operator</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>: _curr += operand; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>: _curr -= operand; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>: _curr *= operand; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>: _curr /= operand; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Current value = <span class="subst">&#123;_curr&#125;</span> (afterOperating: <span class="subst">&#123;@<span class="keyword">operator</span>&#125;</span> <span class="subst">&#123;operand&#125;</span>)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CalculatorCommand类(ConcreteCommand)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> "ConcreteCommand"</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CalculatorCommand</span> : <span class="title">Command</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Calculator _calculator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">char</span> _operator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">int</span> _operand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculatorCommand</span>(<span class="params">Calculator calculator, <span class="keyword">char</span> @<span class="keyword">operator</span>, <span class="keyword">int</span> operand</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _operator = @<span class="keyword">operator</span>;</span><br><span class="line">        _operand = operand;</span><br><span class="line">        _calculator = calculator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _calculator.Operation(_operator, _operand);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UnExecute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _calculator.Operation(Undo(_operator), _operand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">Undo</span>(<span class="params"><span class="keyword">char</span> @<span class="keyword">operator</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">char</span> undo;</span><br><span class="line">        <span class="keyword">switch</span> (@<span class="keyword">operator</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                undo = <span class="string">'-'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                undo = <span class="string">'+'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                undo = <span class="string">'/'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                undo = <span class="string">'*'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                undo = <span class="string">' '</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> undo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User类(Invoker)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> "Invoker"</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Calculator _calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Command&gt; _commandList = <span class="keyword">new</span> List&lt;Command&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _current = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Redo</span>(<span class="params"><span class="keyword">int</span> levels</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"\n---- Redo &#123;0&#125; levels "</span>, levels);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levels; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_current &gt;= _commandList.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> command = _commandList[_current++];</span><br><span class="line">            command.Execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>(<span class="params"><span class="keyword">int</span> levels</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"\n---- Undo &#123;0&#125; levels "</span>, levels);</span><br><span class="line">        <span class="comment">// Perform undo operations</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levels; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_current &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> command = _commandList[--_current];</span><br><span class="line">            command.UnExecute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Compute</span>(<span class="params"><span class="keyword">char</span> @<span class="keyword">operator</span>, <span class="keyword">int</span> operand</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// Create command operation and execute it</span></span><br><span class="line">        Command command = <span class="keyword">new</span> CalculatorCommand(_calculator, @<span class="keyword">operator</span>, operand);</span><br><span class="line">        command.Execute();</span><br><span class="line">        <span class="comment">// Add command to undo list</span></span><br><span class="line">        _commandList.Add(command);</span><br><span class="line">        _current++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         <span class="comment">// Create user and let her compute</span></span><br><span class="line">         User user = <span class="keyword">new</span> User();</span><br><span class="line">         user.Compute(<span class="string">'+'</span>, <span class="number">100</span>);</span><br><span class="line">         user.Compute(<span class="string">'-'</span>, <span class="number">50</span>);</span><br><span class="line">         user.Compute(<span class="string">'*'</span>, <span class="number">10</span>);</span><br><span class="line">         user.Compute(<span class="string">'/'</span>, <span class="number">2</span>);</span><br><span class="line">         <span class="comment">// Undo 4 commands</span></span><br><span class="line">         user.Undo(<span class="number">4</span>); </span><br><span class="line">         <span class="comment">// Redo 3 commands</span></span><br><span class="line">         user.Redo(<span class="number">3</span>); </span><br><span class="line">         <span class="comment">// Wait for user</span></span><br><span class="line">         Console.Read();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="盒马生鲜-python实现"><a href="#盒马生鲜-python实现" class="headerlink" title="盒马生鲜(python实现)"></a>盒马生鲜(python实现)</h2><blockquote><p>David：听说阿里开了一家实体店——盒马鲜生，特别火爆！明天就周末了，我们一起去吃大闸蟹吧！ Tony：吃货！真是味觉的哥伦布啊，哪里的餐饮新店都少不了你的影子。不过听说盒马鲜生到处是黑科技诶，而且海生是自己挑的，还满新奇的。</p><p>David：那就说好了，明天 11：00，盒马鲜生，不吃不散！</p><p>Tony 和 David 来到杭州上城区的一家分店。这里食客众多，物品丰富，特别是生鲜，从几十块钱的小龙虾到几百块的大青蟹，再到一千多的俄罗斯帝王蟹，应有尽有。帝王蟹是吃不起了，Tony 和 David 挑了一只 900g 的一号大青蟹。</p><p>食材挑好了，接下来就是现厂加工。加工的方式有多种，清蒸、姜葱炒、香辣炒、避风塘炒等，可以任意选择，当然不同的方式价格也有所不同。因为我们选的蟹是当时活动推荐的，所以免加工费。选择一种加工方式后进行下单，下单后会给你一个呼叫器，厨师做好了会有专门的服务人员送过来，坐着等就可以了……</p></blockquote><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190526102057.png" alt=""><br>盒马鲜生之所以这么火爆，一方面是因为中国从来就不缺像 David 这样的吃货，另一方面是因为里面的海生很新鲜，而且可以自己挑选。很多人都喜欢吃大闸蟹，但是你有没有注意到一个问题？从你买大闸蟹到吃上大闸蟹的整个过程，可能都没有见过厨师，而你却能享受美味的佳肴。这里有一个很重要的角色就是服务员，她帮你下订单，然后把订单传送给厨师，厨师收到订单后根据订单做餐。我们用代码来模拟一下这个过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入ABCMeta和abstractmethod来定义抽象类和抽象方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chef</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"厨师"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">steamFood</span><span class="params">(self, originalMaterial)</span>:</span></span><br><span class="line">        print(originalMaterial + <span class="string">"清蒸中..."</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"清蒸"</span> + originalMaterial</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stirFriedFood</span><span class="params">(self, originalMaterial)</span>:</span></span><br><span class="line">        print(originalMaterial + <span class="string">"爆炒中..."</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"香辣炒"</span> + originalMaterial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    <span class="string">"订单"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, originalMaterial)</span>:</span></span><br><span class="line">        self._chef = Chef()</span><br><span class="line">        self._name = name</span><br><span class="line">        self._originalMaterial = originalMaterial</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDisplayName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name + self._originalMaterial</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processingOrder</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SteamedOrder</span><span class="params">(Order)</span>:</span></span><br><span class="line">    <span class="string">"清蒸"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, originalMaterial)</span>:</span></span><br><span class="line">        super().__init__(<span class="string">"清蒸"</span>, originalMaterial)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processingOrder</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (self._chef <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</span><br><span class="line">            <span class="keyword">return</span> self._chef.steamFood(self._originalMaterial)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpicyOrder</span><span class="params">(Order)</span>:</span></span><br><span class="line">    <span class="string">"香辣炒"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, originalMaterial)</span>:</span></span><br><span class="line">        super().__init__(<span class="string">"香辣炒"</span>, originalMaterial)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processingOrder</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (self._chef <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</span><br><span class="line">            <span class="keyword">return</span> self._chef.stirFriedFood(self._originalMaterial)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span>:</span></span><br><span class="line">    <span class="string">"服务员"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__order = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receiveOrder</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        self.__order = order</span><br><span class="line">        print(<span class="string">"服务员"</span> + self.__name + <span class="string">"：您的 "</span> + order.getDisplayName() +</span><br><span class="line">              <span class="string">" 订单已经收到,请耐心等待"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">placeOrder</span><span class="params">(self)</span>:</span></span><br><span class="line">        food = self.__order.processingOrder()</span><br><span class="line">        print(<span class="string">"服务员"</span> + self.__name + <span class="string">"：您的餐 "</span> + food + <span class="string">" 已经准备好，请您慢用!"</span>)</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testOrder</span><span class="params">()</span>:</span></span><br><span class="line">    waiter = Waiter(<span class="string">"Anna"</span>)</span><br><span class="line">    steamedOrder = SteamedOrder(<span class="string">"大闸蟹"</span>)</span><br><span class="line">    print(<span class="string">"客户David：我要一份"</span> + steamedOrder.getDisplayName())</span><br><span class="line">    waiter.receiveOrder(steamedOrder)</span><br><span class="line">    waiter.placeOrder()</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    spicyOrder = SpicyOrder(<span class="string">"大闸蟹"</span>)</span><br><span class="line">    print(<span class="string">"客户Tony：我要一份"</span> + steamedOrder.getDisplayName())</span><br><span class="line">    waiter.receiveOrder(spicyOrder)</span><br><span class="line">    waiter.placeOrder()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testOrder()</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">客户David：我要一份清蒸大闸蟹</span><br><span class="line">服务员Anna：您的 清蒸大闸蟹 订单已经收到,请耐心等待</span><br><span class="line">大闸蟹清蒸中...</span><br><span class="line">服务员Anna：您的餐 清蒸大闸蟹 已经准备好，请您慢用!</span><br><span class="line"></span><br><span class="line">客户Tony：我要一份清蒸大闸蟹</span><br><span class="line">服务员Anna：您的 香辣炒大闸蟹 订单已经收到,请耐心等待</span><br><span class="line">大闸蟹爆炒中...</span><br><span class="line">服务员Anna：您的餐 香辣炒大闸蟹 已经准备好，请您慢用!</span><br></pre></td></tr></table></figure><h2 id="游戏-python实现"><a href="#游戏-python实现" class="headerlink" title="游戏(python实现)"></a>游戏(python实现)</h2><p>在游戏中，有两个最基本的动作，一个是行走（也叫移动），一个是攻击。这几乎是所有游戏都少不了的基础功能，不然就没法玩了！</p><p>现在我们来模拟一下游戏角色（英雄）中的移动和攻击，为简单起见，假设移动只有上移（U）、下移（D）、左移（L）、右移（R）、上跳（J）、下蹲（S）这 6 个动作，而攻击（A）只有 1 种，括号中字符代表每一个动作在键盘中的按键，也就是对应动作的调用，这些动作的命令可以单独使用，但更多的时候会组合在一起使用。比如，弹跳就是上跳 + 下蹲两个的动作的组合，我们用 JP 表示；而弹跳攻击是弹跳 + 攻击的组合（也就是上跳 + 攻击 + 下蹲），我们用 JA 表示；而移动也可以两个方向一起移动，如上移 + 右移，我们用 RU 表示。下面的程序中，为简单起见，这里用标准输入的字符来代表按键输入事件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameRole</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每次移动的步距</span></span><br><span class="line">    STEP = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__x = <span class="number">0</span></span><br><span class="line">        self.__y = <span class="number">0</span></span><br><span class="line">        self.__z = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leftMove</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__x -= self.STEP</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightMove</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__x += self.STEP</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upMove</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__y += self.STEP</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">downMove</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__y -= self.STEP</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpMove</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__z += self.STEP</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">squatMove</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__z -= self.STEP</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"攻击..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showPosition</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"x:"</span> + str(self.__x) + <span class="string">", y:"</span> +</span><br><span class="line">              str(self.__y) + <span class="string">", z:"</span> + str(self.__z))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCommand</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    <span class="string">"游戏角色的命令类"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, role)</span>:</span></span><br><span class="line">        self._role = role</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setRole</span><span class="params">(self, role)</span>:</span></span><br><span class="line">        self._role = role</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Left</span><span class="params">(GameCommand)</span>:</span></span><br><span class="line">    <span class="string">"左移命令"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._role.leftMove()</span><br><span class="line">        self._role.showPosition()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Right</span><span class="params">(GameCommand)</span>:</span></span><br><span class="line">    <span class="string">"右移命令"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._role.rightMove()</span><br><span class="line">        self._role.showPosition()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Up</span><span class="params">(GameCommand)</span>:</span></span><br><span class="line">    <span class="string">"上移命令"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._role.upMove()</span><br><span class="line">        self._role.showPosition()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Down</span><span class="params">(GameCommand)</span>:</span></span><br><span class="line">    <span class="string">"下移命令"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._role.downMove()</span><br><span class="line">        self._role.showPosition()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jump</span><span class="params">(GameCommand)</span>:</span></span><br><span class="line">    <span class="string">"弹跳命令"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._role.jumpMove()</span><br><span class="line">        self._role.showPosition()</span><br><span class="line">        <span class="comment"># 跳起后空中停留半秒</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squat</span><span class="params">(GameCommand)</span>:</span></span><br><span class="line">    <span class="string">"下蹲命令"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._role.squatMove()</span><br><span class="line">        self._role.showPosition()</span><br><span class="line">        <span class="comment"># 下蹲后伏地半秒</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attack</span><span class="params">(GameCommand)</span>:</span></span><br><span class="line">    <span class="string">"攻击命令"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._role.attack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacroCommand</span><span class="params">(GameCommand)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, role=None)</span>:</span></span><br><span class="line">        super().__init__(role)</span><br><span class="line">        self.__commands = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addCommand</span><span class="params">(self, command)</span>:</span></span><br><span class="line">        <span class="comment"># 让所有的命令作用于同一个对象</span></span><br><span class="line">        <span class="comment"># command.setRole(self._role)</span></span><br><span class="line">        self.__commands.append(command)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeCommand</span><span class="params">(self, command)</span>:</span></span><br><span class="line">        self.__commands.remove(command)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> command <span class="keyword">in</span> self.__commands:</span><br><span class="line">            command.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameInvoker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__command = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCommand</span><span class="params">(self, command)</span>:</span></span><br><span class="line">        self.__command = command</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__command <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.__command.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testGame</span><span class="params">()</span>:</span></span><br><span class="line">    role = GameRole()</span><br><span class="line">    invoker = GameInvoker()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        strCmd = input(<span class="string">"请输入命令："</span>)</span><br><span class="line">        strCmd = strCmd.upper()</span><br><span class="line">        <span class="keyword">if</span> (strCmd == <span class="string">"L"</span>):</span><br><span class="line">            invoker.setCommand(Left(role)).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"R"</span>):</span><br><span class="line">            invoker.setCommand(Right(role)).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"U"</span>):</span><br><span class="line">            invoker.setCommand(Up(role)).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"D"</span>):</span><br><span class="line">            invoker.setCommand(Down(role)).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"JP"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Jump(role))</span><br><span class="line">            cmd.addCommand(Squat(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"A"</span>):</span><br><span class="line">            invoker.setCommand(Attack(role)).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"LU"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Left(role))</span><br><span class="line">            cmd.addCommand(Up(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"LD"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Left(role))</span><br><span class="line">            cmd.addCommand(Down(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"RU"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Right(role))</span><br><span class="line">            cmd.addCommand(Up(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"RD"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Right(role))</span><br><span class="line">            cmd.addCommand(Down(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"LA"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Left(role))</span><br><span class="line">            cmd.addCommand(Attack(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"RA"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Right(role))</span><br><span class="line">            cmd.addCommand(Attack(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"UA"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Up(role))</span><br><span class="line">            cmd.addCommand(Attack(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"DA"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Down(role))</span><br><span class="line">            cmd.addCommand(Attack(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"JA"</span>):</span><br><span class="line">            cmd = MacroCommand()</span><br><span class="line">            cmd.addCommand(Jump(role))</span><br><span class="line">            cmd.addCommand(Attack(role))</span><br><span class="line">            cmd.addCommand(Squat(role))</span><br><span class="line">            invoker.setCommand(cmd).action()</span><br><span class="line">        <span class="keyword">elif</span> (strCmd == <span class="string">"Q"</span>):</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testGame()</span><br></pre></td></tr></table></figure><p>在上面的 Demo 中 MacroCommand 是一种组合命令，也叫<strong>宏命令</strong>（Macro Command）。宏命令是一个具体命令类，它拥有一个集合属性，在该集合中包含了对其他命令对象的引用，如上面的弹跳命令是上跳、攻击、下蹲 3 个命令的组合，引用了 3 个命令对象。</p><p>当调用宏命令的 execute() 方法时，会循环地调用每一个子命令的 execute() 方法。一个宏命令的成员可以是简单命令，还可以继续是宏命令，宏命令将递归地调用它所包含的每个成员命令的 execute() 方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JayChenFE/pic
      
    
    </summary>
    
      <category term="设计模式" scheme="https://jaychenfe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>中介者模式</title>
    <link href="https://jaychenfe.github.io/2019/05/19/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaychenfe.github.io/2019/05/19/中介者模式/</id>
    <published>2019-05-19T08:23:54.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="泡泡堂-js实现"><a href="#泡泡堂-js实现" class="headerlink" title="泡泡堂(js实现)"></a>泡泡堂(js实现)</h2><h3 id="2人版本"><a href="#2人版本" class="headerlink" title="2人版本"></a>2人版本</h3><p>游戏之初只支持两个玩家同时进行对战</p><p>先定义一个玩家构造函数，它有3 个简单的原型方法：<code>Play.prototype.win</code>、<code>Play.prototype.lose</code>以及表示玩家死亡的<code>Play.prototype.die</code>。</p><p>当其中一个玩家死亡的时候游戏便结束, 同时通知它的对手胜利</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.enemy = <span class="literal">null</span>; <span class="comment">// 敌人</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Player.prototype.win = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' won '</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Player.prototype.lose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' lost'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Player.prototype.die = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lose();</span><br><span class="line">    <span class="keyword">this</span>.enemy.win();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//接下来创建2 个玩家对象：</span></span><br><span class="line"><span class="keyword">var</span> player1 = <span class="keyword">new</span> Player(<span class="string">'皮蛋'</span>);</span><br><span class="line"><span class="keyword">var</span> player2 = <span class="keyword">new</span> Player(<span class="string">'小乖'</span>);</span><br><span class="line"><span class="comment">//给玩家相互设置敌人：</span></span><br><span class="line">player1.enemy = player2;</span><br><span class="line">player2.enemy = player1;</span><br><span class="line"></span><br><span class="line">player1.die();<span class="comment">// 输出：皮蛋 lost、小乖 won</span></span><br></pre></td></tr></table></figure><p>真正的泡泡堂游戏至多可以有8 个玩家，并分成红蓝两队进行游戏。</p><h3 id="为游戏增加队伍"><a href="#为游戏增加队伍" class="headerlink" title="为游戏增加队伍"></a>为游戏增加队伍</h3><p>现在我们改进一下游戏。因为玩家数量变多，用下面的方式来设置队友和敌人无疑很低效：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">player1.partners= [player1,player2,player3,player4];</span><br><span class="line">player1.enemies = [player5,player6,player7,player8];</span><br><span class="line">Player5.partners= [player5,player6,player7,player8];</span><br><span class="line">Player5.enemies = [player1,player2,player3,player4];</span><br></pre></td></tr></table></figure><p>所以我们定义一个数组players 来保存所有的玩家，在创建玩家之后，循环players 来给每个玩家设置队友和敌人</p><p>再改写构造函数Player，使每个玩家对象都增加一些属性，分别是队友列表、敌人列表 、玩家当前状态、角色名字以及玩家所在的队伍颜色：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span>(<span class="params"> name, teamColor </span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.partners = []; <span class="comment">// 队友列表</span></span><br><span class="line"><span class="keyword">this</span>.enemies = []; <span class="comment">// 敌人列表</span></span><br><span class="line"><span class="keyword">this</span>.state = <span class="string">'live'</span>; <span class="comment">// 玩家状态</span></span><br><span class="line"><span class="keyword">this</span>.name = name; <span class="comment">// 角色名字</span></span><br><span class="line"><span class="keyword">this</span>.teamColor = teamColor; <span class="comment">// 队伍颜色</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>玩家胜利和失败之后的展现依然很简单，只是在每个玩家的屏幕上简单地弹出提示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Player.prototype.win = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 玩家团队胜利</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'winner: '</span> + <span class="keyword">this</span>.name );</span><br><span class="line">&#125;;</span><br><span class="line">Player.prototype.lose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 玩家团队失败</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'loser: '</span> + <span class="keyword">this</span>.name );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>玩家死亡的方法要变得稍微复杂一点，我们需要在每个玩家死亡的时候，都遍历其他队友的生存状况，如果队友全部死亡，则这局游戏失败，同时敌人队伍的所有玩家都取得胜利，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Player.prototype.die = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 玩家死亡</span></span><br><span class="line">    <span class="keyword">var</span> all_dead = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'dead'</span>; <span class="comment">// 设置玩家状态为死亡</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, partner; partner = <span class="keyword">this</span>.partners[i++];) &#123; <span class="comment">// 遍历队友列表</span></span><br><span class="line">        <span class="keyword">if</span> (partner.state !== <span class="string">'dead'</span>) &#123; <span class="comment">// 如果还有一个队友没有死亡，则游戏还未失败</span></span><br><span class="line">            all_dead = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (all_dead === <span class="literal">true</span>) &#123; <span class="comment">// 如果队友全部死亡</span></span><br><span class="line">        <span class="keyword">this</span>.lose(); <span class="comment">// 通知自己游戏失败</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, partner; partner = <span class="keyword">this</span>.partners[i++];) &#123; <span class="comment">// 通知所有队友玩家游戏失败</span></span><br><span class="line">            partner.lose();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, enemy; enemy = <span class="keyword">this</span>.enemies[i++];) &#123; <span class="comment">// 通知所有敌人游戏胜利</span></span><br><span class="line">            enemy.win();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后定义一个工厂来创建玩家：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> playerFactory = <span class="function"><span class="keyword">function</span> (<span class="params">name, teamColor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newPlayer = <span class="keyword">new</span> Player(name, teamColor); <span class="comment">// 创建新玩家</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, player; player = players[i++];) &#123; <span class="comment">// 通知所有的玩家，有新角色加入</span></span><br><span class="line">        <span class="keyword">if</span> (player.teamColor === newPlayer.teamColor) &#123; <span class="comment">// 如果是同一队的玩家</span></span><br><span class="line">            player.partners.push(newPlayer); <span class="comment">// 相互添加到队友列表</span></span><br><span class="line">            newPlayer.partners.push(player);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            player.enemies.push(newPlayer); <span class="comment">// 相互添加到敌人列表</span></span><br><span class="line">            newPlayer.enemies.push(player);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    players.push(newPlayer);</span><br><span class="line">    <span class="keyword">return</span> newPlayer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用这段代码创建8 个玩家：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//红队：</span></span><br><span class="line"><span class="keyword">var</span> player1 = playerFactory(<span class="string">'皮蛋'</span>, <span class="string">'red'</span>),</span><br><span class="line">    player2 = playerFactory(<span class="string">'小乖'</span>, <span class="string">'red'</span>),</span><br><span class="line">    player3 = playerFactory(<span class="string">'宝宝'</span>, <span class="string">'red'</span>),</span><br><span class="line">    player4 = playerFactory(<span class="string">'小强'</span>, <span class="string">'red'</span>);</span><br><span class="line"><span class="comment">//蓝队：</span></span><br><span class="line"><span class="keyword">var</span> player5 = playerFactory(<span class="string">'黑妞'</span>, <span class="string">'blue'</span>),</span><br><span class="line">    player6 = playerFactory(<span class="string">'葱头'</span>, <span class="string">'blue'</span>),</span><br><span class="line">    player7 = playerFactory(<span class="string">'胖墩'</span>, <span class="string">'blue'</span>),</span><br><span class="line">    player8 = playerFactory(<span class="string">'海盗'</span>, <span class="string">'blue'</span>);</span><br></pre></td></tr></table></figure><p>让红队玩家全部死亡：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">player1.die();</span><br><span class="line">player2.die();</span><br><span class="line">player4.die();</span><br><span class="line">player3.die();</span><br></pre></td></tr></table></figure><p>执行结果如图</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190519090133.png" alt=""></p><h3 id="玩家增多带来的困扰"><a href="#玩家增多带来的困扰" class="headerlink" title="玩家增多带来的困扰"></a>玩家增多带来的困扰</h3><p>现在我们已经可以随意地为游戏增加玩家或者队伍，但问题是，每个玩家和其他玩家都是紧紧耦合在一起的。在此段代码中，每个玩家对象都有两个属性，this.partners 和this.enemies，用来保存其他玩家对象的引用。当每个对象的状态发生改变，比如角色移动、吃到道具或者死亡时，都必须要显式地遍历通知其他对象。</p><p>如果在一个大型网络游戏中，画面里有成百上千个玩家，几十支队伍在互相厮杀。如果有一个玩家掉线，必须从所<br>有其他玩家的队友列表和敌人列表中都移除这个玩家。游戏也许还有解除队伍和添加到别的队伍的功能，红色玩家可以突然变成蓝色玩家，这就不再仅仅是循环能够解决的问题了。</p><h3 id="用中介者模式改造泡泡堂游戏"><a href="#用中介者模式改造泡泡堂游戏" class="headerlink" title="用中介者模式改造泡泡堂游戏"></a>用中介者模式改造泡泡堂游戏</h3><p>现在我们开始用中介者模式来改造上面的泡泡堂游戏， 改造后的玩家对象和中介者的关系<br>如图 所示:</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190519090727.png" alt=""></p><p>首先仍然是定义Player 构造函数和player 对象的原型方法，在player 对象的这些原型方法中，不再负责具体的执行逻辑，而是把操作转交给中介者对象，我们把中介者对象命名为playerDirector：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span>(<span class="params">name, teamColor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">// 角色名字</span></span><br><span class="line">    <span class="keyword">this</span>.teamColor = teamColor; <span class="comment">// 队伍颜色</span></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'alive'</span>; <span class="comment">// 玩家生存状态</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Player.prototype.win = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' won '</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Player.prototype.lose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' lost'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*******************玩家死亡*****************/</span></span><br><span class="line">Player.prototype.die = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'dead'</span>;</span><br><span class="line">    playerDirector.reciveMessage(<span class="string">'playerDead'</span>, <span class="keyword">this</span>); <span class="comment">// 给中介者发送消息，玩家死亡</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*******************移除玩家*****************/</span></span><br><span class="line">Player.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    playerDirector.reciveMessage(<span class="string">'removePlayer'</span>, <span class="keyword">this</span>); <span class="comment">// 给中介者发送消息，移除一个玩家</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************玩家换队*****************/</span></span><br><span class="line">Player.prototype.changeTeam = <span class="function"><span class="keyword">function</span> (<span class="params">color</span>) </span>&#123;</span><br><span class="line">    playerDirector.reciveMessage(<span class="string">'changeTeam'</span>, <span class="keyword">this</span>, color); <span class="comment">// 给中介者发送消息，玩家换队</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再继续改写之前创建玩家对象的工厂函数，可以看到，因为工厂函数里不再需要给创建的玩家对象设置队友和敌人，这个工厂函数几乎失去了工厂的意义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> playerFactory = <span class="function"><span class="keyword">function</span> (<span class="params">name, teamColor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newPlayer = <span class="keyword">new</span> Player(name, teamColor); <span class="comment">// 创造一个新的玩家对象</span></span><br><span class="line">    playerDirector.reciveMessage(<span class="string">'addPlayer'</span>, newPlayer); <span class="comment">// 给中介者发送消息，新增玩家</span></span><br><span class="line">    <span class="keyword">return</span> newPlayer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后，我们需要实现这个中介者playerDirector 对象，一般有以下两种方式。</p><ul><li><p>利用发布—订阅模式。将playerDirector 实现为订阅者，各player 作为发布者，一旦player的状态发生改变，便推送消息给playerDirector，playerDirector 处理消息后将反馈发送给其他player。</p></li><li><p>在 playerDirector中开放一些接收消息的接口，各 player可以直接调用该接口来给playerDirector发送消息，player只需传递一个参数给 playerDirector，这个参数的目的是使 playerDirector可以识别发送者。同样， playerDirector接收到消息之后会将处理结果反馈给其他 player。</p></li></ul><p>在这里我们使用第二种方式，playerDirector 开放一个对外暴露的接口reciveMessage，负责接收player 对象发送的消息，而player 对象发送消息的时候，总是把自身this 作为参数发送给playerDirector，以便playerDirector 识别消息来自于哪个玩家对象，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> playerDirector = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> players = &#123;&#125;, <span class="comment">// 保存所有玩家</span></span><br><span class="line">        operations = &#123;&#125;; <span class="comment">// 中介者可以执行的操作</span></span><br><span class="line">    <span class="comment">/****************新增一个玩家***************************/</span></span><br><span class="line">    operations.addPlayer = <span class="function"><span class="keyword">function</span> (<span class="params">player</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> teamColor = player.teamColor; <span class="comment">// 玩家的队伍颜色</span></span><br><span class="line">        players[teamColor] = players[teamColor] || []; <span class="comment">// 如果该颜色的玩家还没有成立队伍，则</span></span><br><span class="line"></span><br><span class="line">        players[teamColor].push(player); <span class="comment">// 添加玩家进队伍</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/****************移除一个玩家***************************/</span></span><br><span class="line">    operations.removePlayer = <span class="function"><span class="keyword">function</span> (<span class="params">player</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> teamColor = player.teamColor, <span class="comment">// 玩家的队伍颜色</span></span><br><span class="line">            teamPlayers = players[teamColor] || []; <span class="comment">// 该队伍所有成员</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = teamPlayers.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">// 遍历删除</span></span><br><span class="line">            <span class="keyword">if</span> (teamPlayers[i] === player) &#123;</span><br><span class="line">                teamPlayers.splice(i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/****************玩家换队***************************/</span></span><br><span class="line">    operations.changeTeam = <span class="function"><span class="keyword">function</span> (<span class="params">player, newTeamColor</span>) </span>&#123; <span class="comment">// 玩家换队</span></span><br><span class="line">        operations.removePlayer(player); <span class="comment">// 从原队伍中删除</span></span><br><span class="line">        player.teamColor = newTeamColor; <span class="comment">// 改变队伍颜色</span></span><br><span class="line">        operations.addPlayer(player); <span class="comment">// 增加到新队伍中</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    operations.playerDead = <span class="function"><span class="keyword">function</span> (<span class="params">player</span>) </span>&#123; <span class="comment">// 玩家死亡</span></span><br><span class="line">        <span class="keyword">var</span> teamColor = player.teamColor,</span><br><span class="line">            teamPlayers = players[teamColor]; <span class="comment">// 玩家所在队伍</span></span><br><span class="line">        <span class="keyword">var</span> all_dead = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, player; player = teamPlayers[i++];) &#123;</span><br><span class="line">            <span class="keyword">if</span> (player.state !== <span class="string">'dead'</span>) &#123;</span><br><span class="line">                all_dead = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (all_dead === <span class="literal">true</span>) &#123; <span class="comment">// 全部死亡</span></span><br><span class="line">            teamPlayers.forEach(<span class="function"><span class="params">player</span> =&gt;</span> &#123; <span class="comment">// 本队所有玩家lose</span></span><br><span class="line">                player.lose();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> color <span class="keyword">in</span> players) &#123;</span><br><span class="line">                <span class="keyword">if</span> (color !== teamColor) &#123;</span><br><span class="line">                    players[color].forEach(<span class="function"><span class="params">player</span> =&gt;</span> &#123; <span class="comment">// 其他队伍所有玩家win</span></span><br><span class="line">                        player.win();</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> reciveMessage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>); <span class="comment">// arguments 的第一个参数为消息名称</span></span><br><span class="line">        <span class="comment">// arguments删除掉第一个参数剩余的传给实际调用的方法</span></span><br><span class="line">        operations[message].apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; reciveMessage &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>可以看到，除了中介者本身，没有一个玩家知道其他任何玩家的存在，玩家与玩家之间的耦合关系已经完全解除，某个玩家的任何操作都不需要通知其他玩家，而只需要给中介者发送一个消息，中介者处理完消息之后会把处理结果反馈给其他的玩家对象。我们还可以继续给中介者扩展更多功能，以适应游戏需求的不断变化。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>注意每次测试重置状态</p><ul><li><p>测试1:红方全部死亡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">player1.die();</span><br><span class="line">player2.die();</span><br><span class="line">player3.die();</span><br><span class="line">player4.die();</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190519101139.png" alt=""></p></li><li><p>测试2:皮蛋和小乖掉线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">player1.remove();</span><br><span class="line">player2.remove();</span><br><span class="line">player3.die();</span><br><span class="line">player4.die();</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190519101642.png" alt=""></p></li><li><p>测试3:皮蛋从红队叛变到蓝队</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">player1.changeTeam(<span class="string">'blue'</span>);</span><br><span class="line">player2.die();</span><br><span class="line">player3.die();</span><br><span class="line">player4.die();</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190519102026.png" alt=""></p></li></ul><h2 id="找房子-python实现"><a href="#找房子-python实现" class="headerlink" title="找房子(python实现)"></a>找房子(python实现)</h2><blockquote><p>人在江湖漂，岂能顺心如意？与大多数毕业生一样，第一份工作很难持续两年以上。Tony 也在一家公司工作了一年半后，换了一个东家。</p><p>在北京这个硕大的城市里，换工作基本就意味着要换房子。不得不说，找房子是一件烦心而累人的工作。</p><ol><li>你首先要知道自己要怎样的房子：多大面积（多少平米），什么价位，是否有窗户，是否有独卫。</li><li>要去网上查找各种房源信息，找到最匹配的几个户型。</li><li>之后要去电话咨询，过滤虚假信息和过时信息。</li><li>最后，也是最累人的一步，要去实地考查，看看真实的房子与网上的信息是否相符，房间是否有异味，周围设施是否齐全。这一步你可能会从东城穿越西城，再来到南城，而后又折腾去北城……想想都累！</li><li>最后的最后，你还要与各种脾性的房东进行周旋，去讨价还价。</li></ol><p>Tony 想了想，还是找中介算了。在北京这座城市，你几乎找不到一手房东，90%的房源信息都掌握在房屋中介手中！既然都找不到一手房东，还不如找一家正规点的中介。</p><p>于是 Tony 找到了我爱我家，认识了里面的职员 Vangie。Vangie 问了他对房子的要求。Tony 说：“18平米左右，要有独卫，要有窗户，最好是朝南，有厨房更好！价位在2000左右。”Vangie 立马就说：“上地西里有一间，但没有厨房；当代城市家园有两间，一间主卧，一间次卧，但卫生间是共用的；美和园有一间，比较适合你，但价格会贵一点。” 真是了如指掌啊！说完就带着 Tony 开始看房了……</p><p>一天就找到了还算合适的房子。但不得不再次吐槽：北京的房子真 TM 贵啊，18平米，精装修，有朝南窗户，一个超小（1m宽不到）的阳台，卫生间5人共用，厨房共用，价格要2600每月。押一付三，加一个月的中介费，一次交了一万多，要开始吃土了，内心滴了无数滴血……</p></blockquote><p>上面的生活场景中，Tony 通过中介来找房子，因为找房子的过程实在太繁琐了，而且对房源信息不了解。通过中介，他省去了很多麻烦的细节，合同也是直接跟中介签，你甚至可能都不知道房东是谁。</p><p>我们将通过程序来模拟一下上面找房子的过程。</p><p>源码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseInfo</span>:</span></span><br><span class="line">    <span class="string">"房源信息"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, area, price, hasWindow, bathroom, kitchen, address,</span></span></span><br><span class="line"><span class="function"><span class="params">                 owner)</span>:</span></span><br><span class="line">        self.__area = area</span><br><span class="line">        self.__price = price</span><br><span class="line">        self.__window = hasWindow</span><br><span class="line">        self.__bathroom = bathroom</span><br><span class="line">        self.__kitchen = kitchen</span><br><span class="line">        self.__address = address</span><br><span class="line">        self.__owner = owner</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAddress</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__address</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOwnerName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__owner.getName()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, isShowOwner=True)</span>:</span></span><br><span class="line">        print(<span class="string">"面积:"</span> + str(self.__area) + <span class="string">"平米"</span>, <span class="string">"价格:"</span> + str(self.__price) + <span class="string">"元"</span>,</span><br><span class="line">              <span class="string">"窗户:"</span> + (<span class="string">"有"</span> <span class="keyword">if</span> self.__window <span class="keyword">else</span> <span class="string">"没有"</span>),</span><br><span class="line">              <span class="string">"卫生间:"</span> + self.__bathroom,</span><br><span class="line">              <span class="string">"厨房:"</span> + (<span class="string">"有"</span> <span class="keyword">if</span> self.__kitchen <span class="keyword">else</span> <span class="string">"没有"</span>),</span><br><span class="line">              <span class="string">"地址:"</span> + self.getAddress(),</span><br><span class="line">              <span class="string">"房东:"</span> + self.getOwnerName() <span class="keyword">if</span> isShowOwner <span class="keyword">else</span> <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HousingAgency</span>:</span></span><br><span class="line">    <span class="string">"房屋中介"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__houseInfos = []</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addHouseInfo</span><span class="params">(self, houseInfo)</span>:</span></span><br><span class="line">        self.__houseInfos.append(houseInfo)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeHouseInfo</span><span class="params">(self, houseInfo)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> self.__houseInfos:</span><br><span class="line">            <span class="keyword">if</span> (info == houseInfo):</span><br><span class="line">                self.__houseInfos.remove(info)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSearchCondition</span><span class="params">(self, description)</span>:</span></span><br><span class="line">        <span class="string">"这里有一个将用户描述信息转换成搜索条件的逻辑。(为节省篇幅这里原样返回描述)"</span></span><br><span class="line">        <span class="keyword">return</span> description</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatchInfos</span><span class="params">(self, searchCondition)</span>:</span></span><br><span class="line">        <span class="string">"根据房源信息的各个属性查找最匹配的信息。(为节省篇幅这里略去匹配的过程，全部输出)"</span></span><br><span class="line">        print(self.getName(), <span class="string">"为您找以下最适合的房源："</span>)</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> self.__houseInfos:</span><br><span class="line">            info.showInfo(<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__houseInfos</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signContract</span><span class="params">(self, houseInfo, time)</span>:</span></span><br><span class="line">        <span class="string">"与房东签订协议"</span></span><br><span class="line">        print(self.getName(), <span class="string">"与房东"</span>, houseInfo.getOwnerName(), <span class="string">"签订"</span>,</span><br><span class="line">              houseInfo.getAddress(), <span class="string">"的房子的的租赁合同，租期"</span>, time, <span class="string">"年。 合同期内"</span>,</span><br><span class="line">              self.getName(), <span class="string">"有权对其进行使用和转租！"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signContracts</span><span class="params">(self, time)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> self.__houseInfos:</span><br><span class="line">            self.signContract(info, time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseOwner</span>:</span></span><br><span class="line">    <span class="string">"房东"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, address)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__address = address</span><br><span class="line">        self.__houseInfo = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAddress</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__address</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setHouseInfo</span><span class="params">(self, area, price, hasWindow, bathroom, kitchen)</span>:</span></span><br><span class="line">        self.__houseInfo = HouseInfo(area, price, hasWindow, bathroom, kitchen,</span><br><span class="line">                                     self.getAddress(), self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">publishHouseInfo</span><span class="params">(self, agency)</span>:</span></span><br><span class="line">        agency.addHouseInfo(self.__houseInfo)</span><br><span class="line">        print(self.getName() + <span class="string">"在"</span>, agency.getName(), <span class="string">"发布房源出租信息："</span>)</span><br><span class="line">        self.__houseInfo.showInfo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Custom</span>:</span></span><br><span class="line">    <span class="string">"房客，租房人"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findHouse</span><span class="params">(self, description, agency)</span>:</span></span><br><span class="line">        print(<span class="string">"我是"</span> + self.getName() + <span class="string">", 我想要找一个\""</span> + description + <span class="string">"\"的房子"</span>)</span><br><span class="line">        print()</span><br><span class="line">        <span class="keyword">return</span> agency.getMatchInfos(agency.getSearchCondition(description))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">seeHouse</span><span class="params">(self, houseInfos)</span>:</span></span><br><span class="line">        <span class="string">"去看房，选择最使用的房子。(这里省略看房的过程)"</span></span><br><span class="line">        size = len(houseInfos)</span><br><span class="line">        <span class="keyword">return</span> houseInfos[size - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signContract</span><span class="params">(self, houseInfo, agency, time)</span>:</span></span><br><span class="line">        <span class="string">"与中介签订协议"</span></span><br><span class="line">        print(self.getName(), <span class="string">"与中介"</span>, agency.getName(), <span class="string">"签订"</span>,</span><br><span class="line">              houseInfo.getAddress(), <span class="string">"的房子的租赁合同, 租期"</span>, time, <span class="string">"年。合同期内"</span>,</span><br><span class="line">              self.__name, <span class="string">"有权对其进行使用！"</span>)</span><br></pre></td></tr></table></figure><p>测试代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testRenting</span><span class="params">()</span>:</span></span><br><span class="line">    myHome = HousingAgency(<span class="string">"我爱我家"</span>)</span><br><span class="line">    zhangsan = HouseOwner(<span class="string">"张三"</span>, <span class="string">"上地西里"</span>)</span><br><span class="line">    zhangsan.setHouseInfo(<span class="number">20</span>, <span class="number">2500</span>, <span class="number">1</span>, <span class="string">"独立卫生间"</span>, <span class="number">0</span>)</span><br><span class="line">    zhangsan.publishHouseInfo(myHome)</span><br><span class="line">    lisi = HouseOwner(<span class="string">"李四"</span>, <span class="string">"当代城市家园"</span>)</span><br><span class="line">    lisi.setHouseInfo(<span class="number">16</span>, <span class="number">1800</span>, <span class="number">1</span>, <span class="string">"公用卫生间"</span>, <span class="number">0</span>)</span><br><span class="line">    lisi.publishHouseInfo(myHome)</span><br><span class="line">    wangwu = HouseOwner(<span class="string">"王五"</span>, <span class="string">"金隅美和园"</span>)</span><br><span class="line">    wangwu.setHouseInfo(<span class="number">18</span>, <span class="number">2600</span>, <span class="number">1</span>, <span class="string">"独立卫生间"</span>, <span class="number">1</span>)</span><br><span class="line">    wangwu.publishHouseInfo(myHome)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    myHome.signContracts(<span class="number">3</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    tony = Custom(<span class="string">"Tony"</span>)</span><br><span class="line">    houseInfos = tony.findHouse(<span class="string">"18平米左右，要有独卫，要有窗户，最好是朝南，有厨房更好！价位在2000左右"</span>,</span><br><span class="line">                                myHome)</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">"正在看房，寻找最合适的住巢……"</span>)</span><br><span class="line">    print()</span><br><span class="line">    AppropriateHouse = tony.seeHouse(houseInfos)</span><br><span class="line">    tony.signContract(AppropriateHouse, myHome, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testRenting()</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">张三在 我爱我家 发布房源出租信息：</span><br><span class="line">面积:20平米 价格:2500元 窗户:有 卫生间:独立卫生间 厨房:没有 地址:上地西里 房东:张三</span><br><span class="line">李四在 我爱我家 发布房源出租信息：</span><br><span class="line">面积:16平米 价格:1800元 窗户:有 卫生间:公用卫生间 厨房:没有 地址:当代城市家园 房东:李四</span><br><span class="line">王五在 我爱我家 发布房源出租信息：</span><br><span class="line">面积:18平米 价格:2600元 窗户:有 卫生间:独立卫生间 厨房:有 地址:金隅美和园 房东:王五</span><br><span class="line"></span><br><span class="line">我爱我家 与房东 张三 签订 上地西里 的房子的的租赁合同，租期 3 年。 合同期内 我爱我家 有权对其进行使用和转租！</span><br><span class="line">我爱我家 与房东 李四 签订 当代城市家园 的房子的的租赁合同，租期 3 年。 合同期内 我爱我家 有权对其进行使用和转租！</span><br><span class="line">我爱我家 与房东 王五 签订 金隅美和园 的房子的的租赁合同，租期 3 年。 合同期内 我爱我家 有权对其进行使用和转租！</span><br><span class="line"></span><br><span class="line">我是Tony, 我想要找一个&quot;18平米左右，要有独卫，要有窗户，最好是朝南，有厨房更好！价位在2000左右&quot;的房子</span><br><span class="line"></span><br><span class="line">我爱我家 为您找以下最适合的房源：</span><br><span class="line">面积:20平米 价格:2500元 窗户:有 卫生间:独立卫生间 厨房:没有 地址:上地西里 </span><br><span class="line">面积:16平米 价格:1800元 窗户:有 卫生间:公用卫生间 厨房:没有 地址:当代城市家园 </span><br><span class="line">面积:18平米 价格:2600元 窗户:有 卫生间:独立卫生间 厨房:有 地址:金隅美和园 </span><br><span class="line"></span><br><span class="line">正在看房，寻找最合适的住巢……</span><br><span class="line"></span><br><span class="line">Tony 与中介 我爱我家 签订 金隅美和园 的房子的租赁合同, 租期 1 年。合同期内 Tony 有权对其进行使用！</span><br></pre></td></tr></table></figure><p>从网状到星状</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190528230507.png" alt=""></p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190528230707.png" alt=""></p><p>类图变化</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190528230852.png" alt=""></p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190528230921.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://jaychenfe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="https://jaychenfe.github.io/2019/05/17/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaychenfe.github.io/2019/05/17/组合模式/</id>
    <published>2019-05-17T22:50:53.000Z</published>
    <updated>2020-08-05T02:40:11.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190518102446.png" alt=""></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="绘图-C-实现"><a href="#绘图-C-实现" class="headerlink" title="绘图(C#实现)"></a>绘图(C#实现)</h2><h3 id="旧版实现"><a href="#旧版实现" class="headerlink" title="旧版实现"></a>旧版实现</h3><p>用绘图这个例子来说明Composite模式，通过一些基本图像元素（直线、圆等）以及一些复合图像元素（由基本图像元素组合而成）构建复杂的图形树。<br>在设计中我们对每一个对象都配备一个Draw()方法，在调用时，会显示相关的图形。<br>可以看到，这里复合图像元素它在充当对象的同时，又是那些基本图像元素的一个容器。<br>先看一下基本的类结构图：<br><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190518102716.png" alt=""></p><p>图中橙色的区域表示的是复合图像元素</p><p>示意性代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Graphics</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Picture</span> : <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Picture</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">GetChilds</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//返回所有的子对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而其他作为树枝构件，实现代码如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Line</span> : <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Line</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入组合模式"><a href="#引入组合模式" class="headerlink" title="引入组合模式"></a>引入组合模式</h3><p>现在我们要对该图像元素进行处理：在客户端程序中，需要判断返回对象的具体类型到底是基本图像元素，还是复合图像元素。如果是复合图像元素，我们将要用递归去处理，然而这种处理的结果却增加了客户端程序与复杂图像元素内部结构之间的依赖。那么我们如何去解耦这种关系呢？</p><p>我们希望的是客户程序可以像处理基本图像元素一样来处理复合图像元素，这就要引入Composite模式了，需要把对于子对象的管理工作交给复合图像元素，为了进行子对象的管理，它必须提供必要的Add()，Remove()等方法，类结构图如下：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190518111554.png" alt=""></p><p>代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Graphics</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Graphics g</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Graphics g</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Picture</span> : <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> ArrayList PicList = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Picture</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (Graphics g <span class="keyword">in</span> PicList)</span><br><span class="line">        &#123;</span><br><span class="line">            g.Draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        PicList.Add(g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        PicList.Remove(g);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Line</span> : <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Line</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Graphics</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样引入Composite模式后，客户端程序不再依赖于复合图像元素的内部实现了。</p><p>然而，我们程序中仍然存在着问题，因为Line，Rectangle，Circle已经没有了子对象，它是一个基本图像元素，因此Add()，Remove()的方法对于它来说没有任何意义，而且把这种错误不会在编译的时候报错，把错误放在了运行期。</p><p>我们希望能够捕获到这类错误，并加以处理，稍微改进一下我们的程序：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Line</span> : <span class="title">Graphics</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Line</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>            &#123; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="comment">//抛出一个我们自定义的异常</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="comment">//抛出一个我们自定义的异常</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这样改进以后，我们可以捕获可能出现的错误，做进一步的处理。</p><p>上面的这种实现方法属于<strong>透明式的Composite模式</strong>。</p><h3 id="安全的组合模式"><a href="#安全的组合模式" class="headerlink" title="安全的组合模式"></a>安全的组合模式</h3><p>如果我们想要更安全的一种做法，就需要把管理子对象的方法声明在树枝构件Picture类里面，这样如果叶子节点Line，Rectangle，Circle使用这些方法时，在编译期就会出错，看一下类结构图：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190518172816.png" alt=""></p><p>代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Graphics</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">protected</span> <span class="keyword">string</span> Name;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="title">Graphics</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         Name = name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Picture</span> : <span class="title">Graphics</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">protected</span> ArrayList PicList = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Picture</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>     &#123; &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">foreach</span> (Graphics g <span class="keyword">in</span> PicList)</span><br><span class="line">         &#123;</span><br><span class="line">             g.Draw();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         PicList.Add(g);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Graphics g</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         PicList.Remove(g);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Line</span> : <span class="title">Graphics</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Line</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>     &#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Graphics</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function">         : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>     &#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Graphics</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>     &#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">$"Draw a<span class="subst">&#123;Name&#125;</span>"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这种方式属于安全式的Composite模式</p><p>在这种方式下，虽然避免了前面所讨论的错误，但是它也使得叶子节点和树枝构件具有不一样的接口。</p><p>这种方式和透明式的Composite各有优劣，具体使用哪一个，需要根据问题的实际情况而定。</p><p>通过Composite模式，客户程序在调用Draw()的时候不用再去判断复杂图像元素中的子对象到底是基本图像元素，还是复杂图像元素，看一下简单的客户端调用：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Picture root = <span class="keyword">new</span> Picture(<span class="string">"Root"</span>);</span><br><span class="line"></span><br><span class="line">           root.Add(<span class="keyword">new</span> Line(<span class="string">"Line"</span>));</span><br><span class="line">           root.Add(<span class="keyword">new</span> Circle(<span class="string">"Circle"</span>));</span><br><span class="line">           root.Add(<span class="keyword">new</span> Rectangle(<span class="string">"Rectangle"</span>));</span><br><span class="line"></span><br><span class="line">           root.Draw();</span><br><span class="line">           Console.ReadLine();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="组装电脑-python实现"><a href="#组装电脑-python实现" class="headerlink" title="组装电脑(python实现)"></a>组装电脑(python实现)</h2><p>只要你对硬件稍微有一些了解，或者打开过机箱换过组件，一定知道 CPU、内存、显卡是插在主板上的，而硬盘也是连在主板上的，在机箱的后面有一排的插口，可以连接鼠标、键盘、耳麦、摄像头等外接配件，而显示器需要单独插电源才能工作。我们可以用代码来模拟台式电脑的组成，这里假设每一个组件都有开始工作和结束工作两个功能，还可以显示自己的信息和组成结构。</p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>:</span></span><br><span class="line">    <span class="string">"组件，所有子配件的基类"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent=<span class="string">""</span>)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isComposite</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startup</span><span class="params">(self, indent=<span class="string">""</span>)</span>:</span></span><br><span class="line">        print(indent + self._name + <span class="string">" 准备开始工作..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shutdown</span><span class="params">(self, indent=<span class="string">""</span>)</span>:</span></span><br><span class="line">        print(indent + self._name + <span class="string">" 即将结束工作..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span><span class="params">(Component)</span>:</span></span><br><span class="line">    <span class="string">"中央处理器"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent, end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"CPU:"</span> + self._name + <span class="string">",可以进行高速计算。"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryCard</span><span class="params">(Component)</span>:</span></span><br><span class="line">    <span class="string">"内存条"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent, end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"内存:"</span> + self._name + <span class="string">",可以缓存数据，读写速度快。"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HardDisk</span><span class="params">(Component)</span>:</span></span><br><span class="line">    <span class="string">"硬盘"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent, end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"硬盘:"</span> + self._name + <span class="string">",可以永久存储数据，容量大。"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicsCard</span><span class="params">(Component)</span>:</span></span><br><span class="line">    <span class="string">"显卡"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent, end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"显卡:"</span> + self._name + <span class="string">",可以高速计算和处理图形图像。"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">(Component)</span>:</span></span><br><span class="line">    <span class="string">"电源"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent, end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"电源:"</span> + self._name + <span class="string">",可以持续给主板和外接配件供电。"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fan</span><span class="params">(Component)</span>:</span></span><br><span class="line">    <span class="string">"风扇"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent, end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"风扇:"</span> + self._name + <span class="string">"，辅助CPU散热。"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Displayer</span><span class="params">(Component)</span>:</span></span><br><span class="line">    <span class="string">"显示器"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent, end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"显示器:"</span> + self._name + <span class="string">"，负责内容的显示。"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span><span class="params">(Component)</span>:</span></span><br><span class="line">    <span class="string">"配件组合器"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line">        self._components = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(self._name + <span class="string">",由以下部件组成:"</span>)</span><br><span class="line">        indent += <span class="string">"\t"</span></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> self._components:</span><br><span class="line">            element.showInfo(indent)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isComposite</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addComponent</span><span class="params">(self, component)</span>:</span></span><br><span class="line">        self._components.append(component)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeComponent</span><span class="params">(self, component)</span>:</span></span><br><span class="line">        self._components.remove(component)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startup</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        super().startup(indent)</span><br><span class="line">        indent += <span class="string">"\t"</span></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> self._components:</span><br><span class="line">            element.startup(indent)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shutdown</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        super().startup(indent)</span><br><span class="line">        indent += <span class="string">"\t"</span></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> self._components:</span><br><span class="line">            element.shutdown(indent)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mainboard</span><span class="params">(Composite)</span>:</span></span><br><span class="line">    <span class="string">"主板"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent + <span class="string">"主板:"</span>, end=<span class="string">""</span>)</span><br><span class="line">        super().showInfo(indent)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputerCase</span><span class="params">(Composite)</span>:</span></span><br><span class="line">    <span class="string">"机箱"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent + <span class="string">"机箱:"</span>, end=<span class="string">""</span>)</span><br><span class="line">        super().showInfo(indent)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span><span class="params">(Composite)</span>:</span></span><br><span class="line">    <span class="string">"电脑"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(self, indent)</span>:</span></span><br><span class="line">        print(indent + <span class="string">"电脑:"</span>, end=<span class="string">""</span>)</span><br><span class="line">        super().showInfo(indent)</span><br></pre></td></tr></table></figure><p>测试代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testComputer</span><span class="params">()</span>:</span></span><br><span class="line">    cpu = CPU(<span class="string">"Intel Core i5-6600K"</span>)</span><br><span class="line">    memoryCard = MemoryCard(<span class="string">"Kingston Fury DDR4"</span>)</span><br><span class="line">    hardDisk = HardDisk(<span class="string">"Kingston V300 "</span>)</span><br><span class="line">    graphicsCard = GraphicsCard(<span class="string">"Colorful iGame750"</span>)</span><br><span class="line">    mainBoard = Mainboard(<span class="string">"GIGABYTE Z170M M-ATX"</span>)</span><br><span class="line">    mainBoard.addComponent(cpu)</span><br><span class="line">    mainBoard.addComponent(memoryCard)</span><br><span class="line">    mainBoard.addComponent(hardDisk)</span><br><span class="line">    mainBoard.addComponent(graphicsCard)</span><br><span class="line"></span><br><span class="line">    battery = Battery(<span class="string">"Antec VP 450P"</span>)</span><br><span class="line">    fan = Fan(<span class="string">"DEEPCOOL 120T"</span>)</span><br><span class="line">    computerCase = ComputerCase(<span class="string">"SAMA MATX"</span>)</span><br><span class="line">    computerCase.addComponent(battery)</span><br><span class="line">    computerCase.addComponent(mainBoard)</span><br><span class="line">    computerCase.addComponent(fan)</span><br><span class="line"></span><br><span class="line">    displayer = Displayer(<span class="string">"AOC LV243XIP"</span>)</span><br><span class="line"></span><br><span class="line">    computer = Computer(<span class="string">"Tony DIY电脑"</span>)</span><br><span class="line">    computer.addComponent(displayer)</span><br><span class="line">    computer.addComponent(computerCase)</span><br><span class="line"></span><br><span class="line">    computer.showInfo(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"\n开机过程:"</span>)</span><br><span class="line">    computer.startup(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"\n关机过程:"</span>)</span><br><span class="line">    computer.shutdown(<span class="string">""</span>)</span><br><span class="line">    </span><br><span class="line">testComputer()</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">电脑:Tony DIY电脑,由以下部件组成:</span><br><span class="line">    显示器:AOC LV243XIP，负责内容的显示。</span><br><span class="line">    机箱:SAMA MATX,由以下部件组成:</span><br><span class="line">        电源:Antec VP <span class="number">450</span>P,可以持续给主板和外接配件供电。</span><br><span class="line">        主板:GIGABYTE Z170M M-ATX,由以下部件组成:</span><br><span class="line">            CPU:Intel Core i5<span class="number">-6600</span>K,可以进行高速计算。</span><br><span class="line">            内存:Kingston Fury DDR4,可以缓存数据，读写速度快。</span><br><span class="line">            硬盘:Kingston V300 ,可以永久存储数据，容量大。</span><br><span class="line">            显卡:Colorful iGame750,可以高速计算和处理图形图像。</span><br><span class="line">        风扇:DEEPCOOL <span class="number">120</span>T，辅助CPU散热。</span><br><span class="line"></span><br><span class="line">开机过程:</span><br><span class="line">Tony DIY电脑 准备开始工作...</span><br><span class="line">    AOC LV243XIP 准备开始工作...</span><br><span class="line">    SAMA MATX 准备开始工作...</span><br><span class="line">        Antec VP <span class="number">450</span>P 准备开始工作...</span><br><span class="line">        GIGABYTE Z170M M-ATX 准备开始工作...</span><br><span class="line">            Intel Core i5<span class="number">-6600</span>K 准备开始工作...</span><br><span class="line">            Kingston Fury DDR4 准备开始工作...</span><br><span class="line">            Kingston V300  准备开始工作...</span><br><span class="line">            Colorful iGame750 准备开始工作...</span><br><span class="line">        DEEPCOOL <span class="number">120</span>T 准备开始工作...</span><br><span class="line"></span><br><span class="line">关机过程:</span><br><span class="line">Tony DIY电脑 准备开始工作...</span><br><span class="line">    AOC LV243XIP 即将结束工作...</span><br><span class="line">    SAMA MATX 准备开始工作...</span><br><span class="line">        Antec VP <span class="number">450</span>P 即将结束工作...</span><br><span class="line">        GIGABYTE Z170M M-ATX 准备开始工作...</span><br><span class="line">            Intel Core i5<span class="number">-6600</span>K 即将结束工作...</span><br><span class="line">            Kingston Fury DDR4 即将结束工作...</span><br><span class="line">            Kingston V300  即将结束工作...</span><br><span class="line">            Colorful iGame750 即将结束工作...</span><br><span class="line">        DEEPCOOL <span class="number">120</span>T 即将结束工作...</span><br></pre></td></tr></table></figure><p>类图如下:</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190518100929.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JayChenFE/pic
      
    
    </summary>
    
      <category term="设计模式" scheme="https://jaychenfe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="https://jaychenfe.github.io/2019/05/14/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaychenfe.github.io/2019/05/14/抽象工厂模式/</id>
    <published>2019-05-14T22:48:11.000Z</published>
    <updated>2020-08-05T02:40:11.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190514225137.png" alt=""></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="计算员工的工资-C-实现"><a href="#计算员工的工资-C-实现" class="headerlink" title="计算员工的工资(C#实现)"></a>计算员工的工资(C#实现)</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>中国企业需要一项简单的财务计算：每月月底，财务人员要计算员工的工资。</p><p>员工的工资 = (基本工资 + 奖金 - 个人所得税)。这是一个放之四海皆准的运算法则。</p><p>为了简化系统，我们假设员工基本工资总是4000美金。</p><p>中国企业奖金和个人所得税的计算规则是:</p><ul><li><p>奖金 = 基本工资(4000) * 10%</p></li><li><p>个人所得税 = (基本工资 + 奖金) * 40%</p></li></ul><p>我们现在要为此构建一个软件系统（代号叫Softo），满足中国企业的需求。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>奖金(Bonus)、个人所得税(Tax)的计算是Softo系统的业务规则(Service)。</p><p>工资的计算(Calculator)则调用业务规则(Service)来计算员工的实际工资。</p><p>工资的计算作为业务规则的前端(或者客户端Client)将提供给最终使用该系统的用户(财务人员)使用。</p><h3 id="针对中国企业为系统建模"><a href="#针对中国企业为系统建模" class="headerlink" title="针对中国企业为系统建模"></a>针对中国企业为系统建模</h3><p>根据上面的分析，为<code>Softo</code>系统建模如下：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190516221339.png" alt=""></p><p>实现代码如下:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ChineseBonus bonus = <span class="keyword">new</span> ChineseBonus();</span><br><span class="line">            <span class="keyword">double</span> bonusValue = bonus.Calculate();</span><br><span class="line"></span><br><span class="line">            ChineseTax tax = <span class="keyword">new</span> ChineseTax();</span><br><span class="line">            <span class="keyword">double</span> taxValue = tax.Calculate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> salary = Constant.BaseSalary + bonusValue - taxValue;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"Chinese Salary is："</span> + salary);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 公用的常量</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Constant</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> BaseSalary = <span class="number">4000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 计算中国个人所得税</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChineseTax</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> (Constant.BaseSalary + (Constant.BaseSalary * <span class="number">0.1</span>)) * <span class="number">0.4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 计算中国个人奖金</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChineseBonus</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Constant.BaseSalary * <span class="number">0.1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>运行程序，输入的结果如下：</p><p>Chinese Salary is：2640</p><h3 id="针对美国企业为系统建模"><a href="#针对美国企业为系统建模" class="headerlink" title="针对美国企业为系统建模"></a>针对美国企业为系统建模</h3><p>为了拓展国际市场，我们要把该系统移植给美国公司使用。</p><p>美国企业的工资计算同样是: 员工的工资 = 基本工资 + 奖金 - 个人所得税。</p><p>但是他们的奖金和个人所得税的计算规则不同于中国企业:</p><p>美国企业奖金和个人所得税的计算规则是:</p><ul><li><p>奖金 = 基本工资 * 15 %</p></li><li><p>个人所得税 = (基本工资 <em> 5% + 奖金 </em> 25%)  </p></li></ul><p>根据前面为中国企业建模经验，我们仅仅将<code>ChineseTax</code>、<code>ChineseBonus</code>修改为<code>AmericanTax</code>、<code>AmericanBonus</code>。 修改后的模型如下：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190516222853.png" alt=""></p><p>实现代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            AmericanBonus bonus = <span class="keyword">new</span> AmericanBonus();</span><br><span class="line">            <span class="keyword">double</span> bonusValue = bonus.Calculate();</span><br><span class="line"></span><br><span class="line">            AmericanTax tax = <span class="keyword">new</span> AmericanTax();</span><br><span class="line">            <span class="keyword">double</span> taxValue = tax.Calculate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> salary = Constant.BaseSalary + bonusValue - taxValue;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"American Salary is："</span> + salary);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 公用的常量</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Constant</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> BaseSalary = <span class="number">4000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 计算美国个人所得税</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AmericanTax</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Constant.BaseSalary*<span class="number">0.05</span> + (Constant.BaseSalary * <span class="number">0.15</span>*<span class="number">0.25</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 计算美国个人奖金</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AmericanBonus</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Constant.BaseSalary * <span class="number">0.15</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行程序，输入的结果如下：</p><p>American Salary is：4250</p><h3 id="问题改进"><a href="#问题改进" class="headerlink" title="问题改进"></a>问题改进</h3><p>我们针对中国和美国分别做了实现,即使整合在一起,卖给中国和美国的企业时,调用处的代码仍然需要改变,违反了开闭原则.</p><p>更为致命的问题是：我们需要将这个移植工作转包给一个叫Hippo的软件公司。 由于版权问题，我们并未提供Softo系统的源码给Hippo公司，导致实际上移植工作无法进行。</p><p>为此，我们考虑增加一个工具类(命名为Factory)，代码如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Bonus bonus = <span class="keyword">new</span> Factory().CreateBonus();</span><br><span class="line">        <span class="keyword">double</span> bonusValue = bonus.Calculate();</span><br><span class="line"></span><br><span class="line">        Tax tax = <span class="keyword">new</span> Factory().CreateTax();</span><br><span class="line">        <span class="keyword">double</span> taxValue = tax.Calculate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> salary = Constant.BaseSalary + bonusValue - taxValue;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">"Chinese Salary is："</span> + salary);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Factory类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Factory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tax <span class="title">CreateTax</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChineseTax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bonus <span class="title">CreateBonus</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChineseBonus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 个人所得税抽象类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Tax</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 奖金抽象类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Bonus</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算中国个人所得税</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChineseTax</span> : <span class="title">Tax</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Constant.BaseSalary + (Constant.BaseSalary * <span class="number">0.1</span>)) * <span class="number">0.4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算中国个人奖金</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChineseBonus</span> : <span class="title">Bonus</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Constant.BaseSalary * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 公用的常量</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Constant</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> BaseSalary = <span class="number">4000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为系统增加抽象工厂方法"><a href="#为系统增加抽象工厂方法" class="headerlink" title="为系统增加抽象工厂方法"></a>为系统增加抽象工厂方法</h3><p>如果我们使用上面的工厂方法,移植时还是要增加<code>AmericanTax</code>和<code>AmericanBonus</code>类,<code>Factory</code>类也要作相应修改,工作量并没有任何缩减</p><p>从Factory类在系统移植时修改的内容我们可以看出: 实际上它是专属于美国企业或者中国企业的。名称上应该叫<code>AmericanFactory</code>,<code>ChineseFactory</code>更合适.</p><p>解决方案是增加一个抽象工厂类<code>AbstractFactory</code>，增加一个静态方法，该方法根据一个配置文件(App.config或者Web.config) 一个项(比如<code>factoryName</code>)动态地判断应该实例化哪个工厂类，这样，我们就把移植工作转移到了对配置文件的修改。修改后的模型如下：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190516231640.png" alt=""></p><p><code>AbstractFactory</code>类代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 抽象Factory类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">GetInstance</span>(<span class="params"><span class="keyword">string</span> factoryName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        AbstractFactory instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (factoryName != <span class="string">""</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = (AbstractFactory)Assembly.GetExecutingAssembly().CreateInstance(factoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Tax <span class="title">CreateTax</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Bonus <span class="title">CreateBonus</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部代码如下:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .AddJsonFile(<span class="string">"app.json"</span>, <span class="literal">true</span>, <span class="literal">true</span>).Build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> factoryName = configuration[<span class="string">"factoryName"</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> factory = AbstractFactory.GetInstance(factoryName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bonus = factory.CreateBonus();</span><br><span class="line">        <span class="keyword">var</span> bonusValue = bonus.Calculate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tax = factory.CreateTax();</span><br><span class="line">        <span class="keyword">var</span> taxValue = tax.Calculate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> salary = Constant.BaseSalary + bonusValue - taxValue;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$"Salary is：<span class="subst">&#123;salary&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 抽象Factory类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">GetInstance</span>(<span class="params"><span class="keyword">string</span> factoryName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        AbstractFactory instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (factoryName != <span class="string">""</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = (AbstractFactory)Assembly.GetExecutingAssembly().CreateInstance(factoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Tax <span class="title">CreateTax</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Bonus <span class="title">CreateBonus</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> AmericanFactory类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AmericanFactory</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Tax <span class="title">CreateTax</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AmericanTax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Bonus <span class="title">CreateBonus</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AmericanBonus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> ChineseFactory类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChineseFactory</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Tax <span class="title">CreateTax</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChineseTax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Bonus <span class="title">CreateBonus</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChineseBonus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 奖金抽象类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Bonus</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 个人所得税抽象类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Tax</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算中国个人奖金</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChineseBonus</span> : <span class="title">Bonus</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Constant.BaseSalary * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算中国个人所得税</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChineseTax</span> : <span class="title">Tax</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Constant.BaseSalary + (Constant.BaseSalary * <span class="number">0.1</span>)) * <span class="number">0.4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算美国奖金</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AmericanBonus</span> : <span class="title">Bonus</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Constant.BaseSalary * <span class="number">0.15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算美国个人所得税</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AmericanTax</span> : <span class="title">Tax</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Constant.BaseSalary * <span class="number">0.05</span> + (Constant.BaseSalary * <span class="number">0.15</span> * <span class="number">0.25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Constant</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> BaseSalary = <span class="number">4000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>app.json</code>内容如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"factoryName"</span>: <span class="string">"AbstractFactory.AmericanFactory"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件的工作很简单，只要写一篇幅配置文档说明书提供给移植该系统的团队(比如Hippo公司) 就可以方便地切换使该系统运行在美国或中国企业。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JayChenFE/pic
      
    
    </summary>
    
      <category term="设计模式" scheme="https://jaychenfe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>访问者模式</title>
    <link href="https://jaychenfe.github.io/2019/05/13/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaychenfe.github.io/2019/05/13/访问者模式/</id>
    <published>2019-05-13T22:18:36.000Z</published>
    <updated>2020-08-05T02:40:11.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="学生-C-实现"><a href="#学生-C-实现" class="headerlink" title="学生(C#实现)"></a>学生(C#实现)</h2><p>一个班级里有学霸和学渣两种类型的学生。当出成绩时，学霸开心，学渣不开心。当放假时，学霸不开心，学渣开心。<br><strong>未来不会有第三种类型的学生，但未来可能会有新的事件发生，比如布置作业、春游等</strong>。</p><h3 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h3><p>伪代码:</p> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> students = <span class="keyword">new</span> List&lt;Student&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                    <span class="keyword">new</span> BrainyStudent(),</span><br><span class="line">                    <span class="keyword">new</span> InferiorStudent()</span><br><span class="line">                    <span class="comment">//...</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 出成绩了</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> student <span class="keyword">in</span> students)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (student <span class="keyword">is</span> BrainyStudent)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"出成绩了,开心"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"出成绩了,不开心"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 放假了</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> student <span class="keyword">in</span> students)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (student <span class="keyword">is</span> BrainyStudents)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"放假了不能学习,不开心"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"放假了不用学习,开心"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 抽象学生类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学霸</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BrainyStudents</span> : <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学渣</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InferiorStudent</span> : <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但这样写明显不符合面向对象的开放封闭原则，怎么改呢？</p><h3 id="初步重构"><a href="#初步重构" class="headerlink" title="初步重构"></a>初步重构</h3><p>有一个容易想到的方法，就是把出成绩和放假作为一个抽象方法，写到抽象学生类里面，学霸和学渣分别实现这两个方法</p> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 抽象学生类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 放假方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Vacation</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 出成绩方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ReleaseScore</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">             <span class="keyword">var</span> students = <span class="keyword">new</span> List&lt;Student&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                    <span class="keyword">new</span> BrainyStudent(),</span><br><span class="line">                    <span class="keyword">new</span> InferiorStudent()</span><br><span class="line">                    <span class="comment">//...</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> student <span class="keyword">in</span> students)</span><br><span class="line">            &#123;</span><br><span class="line">                student.ReleaseScore();</span><br><span class="line">                student.Vacation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 抽象学生类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 放假方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Vacation</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 出成绩方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ReleaseScore</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学霸</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BrainyStudent</span> : <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Vacation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"放假了不能学习，不开心"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ReleaseScore</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"出成绩了，开心"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学渣</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InferiorStudent</span> : <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Vacation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"放假了不用学习,开心"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ReleaseScore</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"出成绩了,不开心"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看上去很符合开放封闭原则，因为如果有新的类型的学生，只需要添加一个新的学生类，让它去实现两个抽象方法即可，不用改其它类的代码。<br>但仔细看需求，题目说不会有新的类型学生，而是会有新类型的事件！<br>也就是说，如果现在要春游，就需要在抽象学生类里加一个<code>springOuting()</code>方法，然后分别在学霸和学渣里实现。一共需要改三个类！一点也不符合开放封闭原则。<br><strong>所以一定要搞清楚固定的东西是什么，可能会变的东西是什么。</strong></p><h3 id="使用访问者模式重构"><a href="#使用访问者模式重构" class="headerlink" title="使用访问者模式重构"></a>使用访问者模式重构</h3><p>因为会变的是遍历列表时对学生的访问方法（出成绩、放假、春游），而不是学生类型（学霸、学渣），所以这里就<strong>不应该像上面那样将学生的行为抽象，而是应该将访问的方式抽象</strong>：</p> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 抽象学生类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 处理Visitor这个抽象事件。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>（可能是出成绩、放假等。这里抽象化了，以便随时改)</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="v"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor v</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Visitor</span></span><br><span class="line">    &#123;    <span class="comment">// 抽象的访问方式类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">VisitBrainyStudent</span>(<span class="params">BrainyStudent brainyStudent</span>)</span>;    <span class="comment">// 访问学霸</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">VisitInferiorStudent</span>(<span class="params">InferiorStudent inferiorStudent</span>)</span>;    <span class="comment">// 访问学渣</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学霸</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BrainyStudent</span> : <span class="title">Student</span></span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 学霸处理事件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="v"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor v</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 调用对学霸的处理方法</span></span><br><span class="line">            v.VisitBrainyStudent(<span class="keyword">this</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学渣</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InferiorStudent</span> : <span class="title">Student</span></span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 学渣处理事件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="v"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor v</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 调用对学渣的处理方法</span></span><br><span class="line">            v.VisitInferiorStudent(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样写好以后，要添加访问方法（出成绩、放假、春游），只需要继承Visitor类，并实现学霸和学渣分别不同的反应即可。比如：</p> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReleaseScoreVisitor</span> : <span class="title">Visitor</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitBrainyStudent</span>(<span class="params">BrainyStudent brainyStudent</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">"出成绩了，开心"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitInferiorStudent</span>(<span class="params">InferiorStudent inferiorStudent</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">"出成绩了，不开心"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VacationVisitor</span> : <span class="title">Visitor</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitBrainyStudent</span>(<span class="params">BrainyStudent brainyStudent</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">"放假了，不开心"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitInferiorStudent</span>(<span class="params">InferiorStudent inferiorStudent</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">"放假了，开心"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>调用:</p> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        List&lt;Student&gt; students = <span class="keyword">new</span> List&lt;Student&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> BrainyStudent(),</span><br><span class="line">            <span class="keyword">new</span> InferiorStudent()</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Visitor v = <span class="keyword">new</span> ReleaseScoreVisitor();</span><br><span class="line">        Visitor v2 = <span class="keyword">new</span> VacationVisitor();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> student <span class="keyword">in</span> students)</span><br><span class="line">        &#123;</span><br><span class="line">            student.Accept(v);</span><br><span class="line">            student.Accept(v2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要添加访问方法（放假、春游等）,就只需要<strong>添加</strong>访问方式类，而不需要修改写好的类，这样才真正符合开放封闭原则。<br>在遍历集合时，把访问单个对象的<strong>方式</strong>抽象出来，这就是访问者模式。<br>所以说，<strong>一定要搞清楚固定的东西是什么，可能会变的东西是什么</strong>，才好理解访问者模式的思想。</p><h2 id="雇员信息-C-实现"><a href="#雇员信息-C-实现" class="headerlink" title="雇员信息(C#实现)"></a>雇员信息(C#实现)</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://jaychenfe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="https://jaychenfe.github.io/2019/05/09/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaychenfe.github.io/2019/05/09/策略模式/</id>
    <published>2019-05-09T22:18:36.000Z</published>
    <updated>2020-08-05T02:40:11.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="电影票打折方案-C-实现"><a href="#电影票打折方案-C-实现" class="headerlink" title="电影票打折方案(C#实现)"></a>电影票打折方案(C#实现)</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>   Sunny软件公司为某电影院开发了一套影院售票系统，在该系统中需要为不同类型的用户提供不同的电影票打折方式，具体打折方案如下：</p><ul><li>学生凭学生证可享受票价8折优惠</li><li>年龄在10周岁及以下的儿童可享受每张票减免10元的优惠（原始票价需大于等于20元）</li><li>影院VIP用户除享受票价半价优惠外还可进行积分，积分累计到一定额度可换取电影院赠送的奖品</li><li>该系统在将来可能还要根据需要引入新的打折方式</li></ul><h3 id="旧的实现方式"><a href="#旧的实现方式" class="headerlink" title="旧的实现方式"></a>旧的实现方式</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            OldMovieTicket oldMovieTicket = <span class="keyword">new</span> OldMovieTicket</span><br><span class="line">            &#123;</span><br><span class="line">                Price = <span class="number">60.0</span> <span class="comment">//原始票价</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$"原始价为：<span class="subst">&#123;oldMovieTicket.Price&#125;</span>"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"---------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$"折后价为：<span class="subst">&#123;oldMovieTicket.GetPrice(<span class="string">"student"</span>)&#125;</span>"</span>);<span class="comment">//学生票</span></span><br><span class="line">            Console.WriteLine(<span class="string">"---------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$"折后价为：<span class="subst">&#123;oldMovieTicket.GetPrice(<span class="string">"children"</span>)&#125;</span>"</span>);<span class="comment">//儿童票</span></span><br><span class="line">            Console.WriteLine(<span class="string">"---------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$"折后价为：<span class="subst">&#123;oldMovieTicket.GetPrice(<span class="string">"vip"</span>)&#125;</span>"</span>);<span class="comment">//vip票</span></span><br><span class="line">            Console.WriteLine(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电影票类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">OldMovieTicket</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 电影票价格</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算打折之后的票价</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">string</span> type</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//学生票折后票价计算</span></span><br><span class="line">            <span class="keyword">if</span> (type.Equals(<span class="string">"student"</span>, StringComparison.OrdinalIgnoreCase))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"学生票："</span>);</span><br><span class="line">                <span class="keyword">return</span> Price * <span class="number">0.8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//儿童票折后票价计算</span></span><br><span class="line">            <span class="keyword">if</span> (type.Equals(<span class="string">"children"</span>, StringComparison.OrdinalIgnoreCase)</span><br><span class="line">                &amp;&amp; Price &gt;= <span class="number">20</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"儿童票："</span>);</span><br><span class="line">                <span class="keyword">return</span> Price - <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//VIP票折后票价计算</span></span><br><span class="line">            <span class="keyword">if</span> (type.Equals(<span class="string">"vip"</span>, StringComparison.OrdinalIgnoreCase))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"VIP票："</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">"增加积分！"</span>);</span><br><span class="line">                <span class="keyword">return</span> Price * <span class="number">0.5</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Price; <span class="comment">//如果不满足任何打折要求，则返回原始票价</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它至少存在如下三个问题：</p><ul><li><code>OldMovieTicket</code>类的<code>GetPrice()</code>方法非常庞大，它包含各种打折算法的实现代码，在代码中出现了较长的if…else…语句，不利于测试和维护</li><li>增加新的打折算法或者对原有打折算法进行修改时必须修改<code>OldMovieTicket</code>类的源代码，违反了“开闭原则”，系统的灵活性和可扩展性较差。</li><li>算法的复用性差，如果在另一个系统（如商场销售管理系统）中需要重用某些打折算法，只能通过对源代码进行复制粘贴来重用，无法单独重用其中的某个或某些算法（重用较为麻烦）。</li></ul><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190512223213.png" alt=""></p><p>MovieTicket充当环境类角色，Discount充当抽象策略角色，StudentDiscount、 ChildrenDiscount 和VIPDiscount充当具体策略角色</p><h2 id="人员排序-python实现"><a href="#人员排序-python实现" class="headerlink" title="人员排序(python实现)"></a>人员排序(python实现)</h2><p>有一 Person 类，有年龄（age）、体重（weight）、身高（height）三个属性。现要对 Person 的一组对象进行排序，但并没有确定根据什么规则来排序，有时需要根据年龄进行排序，有时需要根据身高进行排序，有时可能是根据身高和体重的综合情况来排序，还有可能……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">"人类"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, weight, height)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.weight = weight</span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showMysef</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">" "</span> + str(self.age) + <span class="string">" years old, "</span> +</span><br><span class="line">              str(self.weight) + <span class="string">"kg, "</span> + str(self.height) + <span class="string">"m."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICompare</span>:</span></span><br><span class="line">    <span class="string">"比较算法"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">comparable</span><span class="params">(self, person1, person2)</span>:</span></span><br><span class="line">        <span class="string">"person1 &gt; person2 返回值&gt;0，person1 == person2 返回0， person1 &lt; person2 返回值小于0"</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareByAge</span><span class="params">(ICompare)</span>:</span></span><br><span class="line">    <span class="string">"通过年龄排序"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">comparable</span><span class="params">(self, person1, person2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> person1.age - person2.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareByHeight</span><span class="params">(ICompare)</span>:</span></span><br><span class="line">    <span class="string">"通过身高进行排序"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">comparable</span><span class="params">(self, person1, person2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> person1.height - person2.height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortPerson</span>:</span></span><br><span class="line">    <span class="string">"Person的排序类"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, compare)</span>:</span></span><br><span class="line">        self.__compare = compare</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, personList)</span>:</span></span><br><span class="line">        <span class="string">"排序算法，这里采用最简单的冒泡排序"</span></span><br><span class="line">        n = len(personList)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, n - i - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> (self.__compare.comparable(personList[j], personList[j + <span class="number">1</span>])</span><br><span class="line">                        &gt; <span class="number">0</span>):</span><br><span class="line">                    tmp = personList[j]</span><br><span class="line">                    personList[j] = personList[j + <span class="number">1</span>]</span><br><span class="line">                    personList[j + <span class="number">1</span>] = tmp</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>测试代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testSortPerson</span><span class="params">()</span>:</span></span><br><span class="line">    personList = [</span><br><span class="line">        Person(<span class="string">"Tony"</span>, <span class="number">2</span>, <span class="number">54.5</span>, <span class="number">0.82</span>),</span><br><span class="line">        Person(<span class="string">"Jack"</span>, <span class="number">31</span>, <span class="number">74.5</span>, <span class="number">1.80</span>),</span><br><span class="line">        Person(<span class="string">"Nick"</span>, <span class="number">54</span>, <span class="number">44.5</span>, <span class="number">1.59</span>),</span><br><span class="line">        Person(<span class="string">"Eric"</span>, <span class="number">23</span>, <span class="number">62.0</span>, <span class="number">1.78</span>),</span><br><span class="line">        Person(<span class="string">"Helen"</span>, <span class="number">16</span>, <span class="number">45.7</span>, <span class="number">1.60</span>)</span><br><span class="line">    ]</span><br><span class="line">    sorter0 = SortPerson(CompareByAge())</span><br><span class="line">    sorter0.sort(personList)</span><br><span class="line">    print(<span class="string">"根据年龄进行排序后的结果："</span>)</span><br><span class="line">    <span class="keyword">for</span> person <span class="keyword">in</span> personList:</span><br><span class="line">        person.showMysef()</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    sorter1 = SortPerson(CompareByHeight())</span><br><span class="line">    sorter1.sort(personList)</span><br><span class="line">    print(<span class="string">"根据身高进行排序后的结果："</span>)</span><br><span class="line">    <span class="keyword">for</span> person <span class="keyword">in</span> personList:</span><br><span class="line">        person.showMysef()</span><br></pre></td></tr></table></figure><p>输出结果:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">根据年龄进行排序后的结果：</span><br><span class="line">Tony 2 years old, 54.5kg, 0.82m.</span><br><span class="line">Helen 16 years old, 45.7kg, 1.6m.</span><br><span class="line">Eric 23 years old, 62.0kg, 1.78m.</span><br><span class="line">Jack 31 years old, 74.5kg, 1.8m.</span><br><span class="line">Nick 54 years old, 44.5kg, 1.59m.</span><br><span class="line"></span><br><span class="line">根据身高进行排序后的结果：</span><br><span class="line">Tony 2 years old, 54.5kg, 0.82m.</span><br><span class="line">Nick 54 years old, 44.5kg, 1.59m.</span><br><span class="line">Helen 16 years old, 45.7kg, 1.6m.</span><br><span class="line">Eric 23 years old, 62.0kg, 1.78m.</span><br><span class="line">Jack 31 years old, 74.5kg, 1.8m.</span><br></pre></td></tr></table></figure></p><p>类图表示如下：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190509224250.png" alt=""></p><p>python本身其实也可以实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter,attrgetter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testPersonListInPython</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"用Python的方式对Person进行排序"</span></span><br><span class="line"></span><br><span class="line">    personList = [</span><br><span class="line">        Person(<span class="string">"Tony"</span>, <span class="number">2</span>, <span class="number">54.5</span>, <span class="number">0.82</span>),</span><br><span class="line">        Person(<span class="string">"Jack"</span>, <span class="number">31</span>, <span class="number">74.5</span>, <span class="number">1.80</span>),</span><br><span class="line">        Person(<span class="string">"Nick"</span>, <span class="number">54</span>, <span class="number">44.5</span>, <span class="number">1.59</span>),</span><br><span class="line">        Person(<span class="string">"Eric"</span>, <span class="number">23</span>, <span class="number">62.0</span>, <span class="number">1.78</span>),</span><br><span class="line">        Person(<span class="string">"Helen"</span>, <span class="number">16</span>, <span class="number">45.7</span>, <span class="number">1.60</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用使用operator模块根据年龄进行排序</span></span><br><span class="line">    print(<span class="string">"根据年龄进行排序后的结果："</span>)</span><br><span class="line">    sortedPerons = sorted(personList, key = attrgetter(<span class="string">'age'</span>))</span><br><span class="line">    <span class="keyword">for</span> person <span class="keyword">in</span> sortedPerons:</span><br><span class="line">        person.showMysef()</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"根据身高进行排序后的结果："</span>)</span><br><span class="line">    sortedPerons1 = sorted(personList, key=attrgetter(<span class="string">'height'</span>))</span><br><span class="line">    <span class="keyword">for</span> person <span class="keyword">in</span> sortedPerons1:</span><br><span class="line">        person.showMysef()</span><br></pre></td></tr></table></figure><p>为了学习设计模式,我们舍弃了Python本身的语言特性.</p><p>另外,Python 语言本身的特性，还是难以实现一些特殊的需求，如要根据身高和体重的综合情况来排序（身高和体重的权重分别是 0.6 和 0.4）。用策略模式就可以很方便地实现，只需要增加一个<code>CompareByHeightAndWeight</code>的策略类就可以，如下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareByHeightAndWeight</span><span class="params">(ICompare)</span>:</span></span><br><span class="line">    <span class="string">"根据身高和体重的综合情况来排序(身高和体重的权重分别是0.6和0.4)"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">comparable</span><span class="params">(self, person1, person2)</span>:</span></span><br><span class="line">        value1 = person1.height * <span class="number">0.6</span> + person1.weight * <span class="number">0.4</span></span><br><span class="line">        value2 = person2.height * <span class="number">0.6</span> + person2.weight * <span class="number">0.4</span></span><br><span class="line">        <span class="keyword">return</span> value1 - value2</span><br></pre></td></tr></table></figure><h2 id="策略模式-Python实现"><a href="#策略模式-Python实现" class="headerlink" title="策略模式(Python实现)"></a>策略模式(Python实现)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""http://stackoverflow.com/questions/963965/how-is-this-strategy-pattern-written-in-python-the-sample-in-wikipedia</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In most of other languages Strategy pattern is implemented via creating some base strategy interface/abstract class and</span></span><br><span class="line"><span class="string">subclassing it with a number of concrete strategies (as we can see at http://en.wikipedia.org/wiki/Strategy_pattern),</span></span><br><span class="line"><span class="string">however Python supports higher-order functions and allows us to have only one class and inject functions into it's</span></span><br><span class="line"><span class="string">instances, as shown in this example.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyExample</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func=None)</span>:</span></span><br><span class="line">        self.name = <span class="string">'Strategy Example 0'</span></span><br><span class="line">        <span class="keyword">if</span> func <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.execute = types.MethodType(func, self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_replacement1</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(self.name + <span class="string">' from execute 1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_replacement2</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(self.name + <span class="string">' from execute 2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    strat0 = StrategyExample()</span><br><span class="line"></span><br><span class="line">    strat1 = StrategyExample(execute_replacement1)</span><br><span class="line">    strat1.name = <span class="string">'Strategy Example 1'</span></span><br><span class="line"></span><br><span class="line">    strat2 = StrategyExample(execute_replacement2)</span><br><span class="line">    strat2.name = <span class="string">'Strategy Example 2'</span></span><br><span class="line"></span><br><span class="line">    strat0.execute()</span><br><span class="line">    strat1.execute()</span><br><span class="line">    strat2.execute()</span><br></pre></td></tr></table></figure><h2 id="Javascript中的策略模式"><a href="#Javascript中的策略模式" class="headerlink" title="Javascript中的策略模式"></a>Javascript中的策略模式</h2><p>在JavaScript 语言中，函数也是对象，所以更简单和直接的做法是把strategy直接定义为函数：</p><h3 id="计算奖金"><a href="#计算奖金" class="headerlink" title="计算奖金"></a>计算奖金</h3><p>很多公司的年终奖是根据员工的工资基数和年底绩效情况来发放的。例如，绩效为S 的人年终奖有4 倍工资，绩效为A 的人年终奖有3 倍工资，而绩效为B 的人年终奖是2 倍工资。假设财务部要求我们提供一段代码，来方便他们计算员工的年终奖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">        <span class="string">"S"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"A"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"B"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params"> level, salary </span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> strategies[ level ]( salary );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( calculateBonus( <span class="string">'S'</span>, <span class="number">20000</span> ) ); <span class="comment">// 输出：80000</span></span><br><span class="line"><span class="built_in">console</span>.log( calculateBonus( <span class="string">'A'</span>, <span class="number">10000</span> ) ); <span class="comment">// 输出：30000</span></span><br></pre></td></tr></table></figure><h3 id="实现缓动动画"><a href="#实现缓动动画" class="headerlink" title="实现缓动动画"></a>实现缓动动画</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>用JavaScript 实现动画效果的原理跟动画片的制作一样，动画片是把一些差距不大的原画以较快的帧数播放，来达到视觉上的动画效果。在JavaScript 中，可以通过连续改变元素的某个CSS属性，比如left、top、background-position 来实现动画效果。下图 就是通过改变节点的background-position，让人物动起来的。</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190513221329.png" alt=""></p><h4 id="思路和一些准备工作"><a href="#思路和一些准备工作" class="headerlink" title="思路和一些准备工作"></a>思路和一些准备工作</h4><p>我们目标是编写一个动画类和一些缓动算法，让小球以各种各样的缓动效果在页面中运动。现在来分析实现这个程序的思路。在运动开始之前，需要提前记录一些有用的信息，至少包括以下信息：</p><ul><li>动画开始时，小球所在的原始位置；</li><li>小球移动的目标位置；</li><li>动画开始时的准确时间点；</li><li>小球运动持续的时间。</li></ul><h3 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h3><p>假设我们正在编写一个注册的页面，在点击注册按钮之前，有如下几条校验逻辑。 </p><ul><li><p>用户名不能为空。 </p></li><li><p>密码长度不能少于 6 位。 </p></li><li><p>手机号码必须符合格式。</p></li></ul><h4 id="第一个版本"><a href="#第一个版本" class="headerlink" title="第一个版本"></a>第一个版本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http:// xxx.com/register"</span> <span class="attr">id</span>=<span class="string">"registerForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        请输入用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        请输入密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        请输入手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phoneNumber"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">'registerForm'</span>);</span></span><br><span class="line"><span class="javascript">        registerForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (registerForm.userName.value === <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'用户名不能为空'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (registerForm.password.value.length &lt; <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'密码长度不能少于6 位'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(registerForm.phoneNumber.value)) &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'手机号码格式不正确'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缺点如下: </p><ul><li><code>registerForm.onsubmit</code>函数比较庞大，包含了很多 if-else 语句，这些语句需要覆盖所有的校验规则。 </li><li><code>registerForm.onsubmit</code> 函数缺乏弹性，如果增加了一种新的校验规则，或者想把密码的长度校验从 6 改成 8，我们都必须深入<code>registerForm.onsubmit</code>函数的内部实现，这是违反开 放—封闭原则的。 </li><li>算法的复用性差</li></ul><h4 id="用策略模式重构"><a href="#用策略模式重构" class="headerlink" title="用策略模式重构"></a>用策略模式重构</h4><p>第一步,我们要把这些校验逻辑都封装成策略对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">       isNonEmpty: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123; <span class="comment">// 不为空</span></span><br><span class="line">           <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> errorMsg;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       minLength: <span class="function"><span class="keyword">function</span> (<span class="params">value, length, errorMsg</span>) </span>&#123; <span class="comment">// 限制最小长度</span></span><br><span class="line">           <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">               <span class="keyword">return</span> errorMsg;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       isMobile: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123; <span class="comment">// 手机号码格式</span></span><br><span class="line">           <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span><br><span class="line">               <span class="keyword">return</span> errorMsg;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>接下来,我们准备实现<code>Validator</code> 类。<code>Validator</code>类在这里作为 <code>Context</code>，负责接收用户的请求 并委托给 <code>strategy</code> 对象。在给出<code>Validator</code> 类的代码之前，有必要提前了解用户是如何向 <code>Validator</code>类发送请求的，这有助于我们知道如何去编写 <code>Validator</code> 类的代码。代码如下： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> validataFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator(); <span class="comment">// 创建一个validator 对象</span></span><br><span class="line">       <span class="comment">/***************添加一些校验规则****************/</span></span><br><span class="line">       validator.add(registerForm.userName, <span class="string">'isNonEmpty'</span>, <span class="string">'用户名不能为空'</span>);</span><br><span class="line">       validator.add(registerForm.password, <span class="string">'minLength:6'</span>, <span class="string">'密码长度不能少于6 位'</span>);</span><br><span class="line">       validator.add(registerForm.phoneNumber, <span class="string">'isMobile'</span>, <span class="string">'手机号码格式不正确'</span>);</span><br><span class="line">       <span class="keyword">var</span> errorMsg = validator.start(); <span class="comment">// 获得校验结果</span></span><br><span class="line">       <span class="keyword">return</span> errorMsg; <span class="comment">// 返回校验结果</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">'registerForm'</span>);</span><br><span class="line">   registerForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> errorMsg = validataFunc(); <span class="comment">// 如果errorMsg 有确切的返回值，说明未通过校验</span></span><br><span class="line">       <span class="keyword">if</span> (errorMsg) &#123;</span><br><span class="line">           alert(errorMsg);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 阻止表单提交</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>从这段代码中可以看到，我们先创建了一个 <code>validator</code> 对象，然后通过 <code>validator.add</code> 方法， 往 <code>validator</code> 对象中添加一些校验规则。<code>validator.add</code> 方法接受 3 个参数，<code>validator.add( registerForm.password, &#39;minLength:6&#39;, &#39;密码长度不能少于 6 位&#39; )</code>这句代码说明： </p><ul><li><code>registerForm.password</code> 为参与校验的 input 输入框。 </li><li><code>minLength:6</code>是一个以冒号隔开的字符串。冒号前面的<code>minLength</code>代表客户挑选的<code>strategy</code>对象，冒号后面的数字 6 表示在校验过程中所必需的一些参数。<code>&#39;minLength:6&#39;</code>的意思就是 校验 <code>registerForm.password</code> 这个文本输入框的 value 最小长度为 6。如果这个字符串中不 包含冒号，说明校验过程中不需要额外的参数信息，比如<code>&#39;isNonEmpty&#39;</code>。 </li><li>第 3 个参数是当校验未通过时返回的错误信息。 </li></ul><p>当我们往 <code>validator</code> 对象里添加完一系列的校验规则之后，会调用 <code>validator.start()</code>方法来 启动校验。如果 <code>validator.start()</code>返回了一个确切的 <code>errorMsg</code> 字符串当作返回值，说明该次校验 没有通过，此时需让 <code>registerForm.onsubmit</code> 方法返回 false 来阻止表单的提交。 </p><p>   最后,是 Validator 类的实现：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = []; <span class="comment">// 保存校验规则</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Validator.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">dom, rule, errorMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ary = rule.split(<span class="string">':'</span>); <span class="comment">// 把strategy 和参数分开</span></span><br><span class="line">        <span class="keyword">this</span>.cache.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 把校验的步骤用空函数包装起来，并且放入cache</span></span><br><span class="line">            <span class="keyword">var</span> strategy = ary.shift(); <span class="comment">// 用户挑选的strategy</span></span><br><span class="line">            ary.unshift(dom.value); <span class="comment">// 把input 的value 添加进参数列表</span></span><br><span class="line">            ary.push(errorMsg); <span class="comment">// 把errorMsg 添加进参数列表</span></span><br><span class="line">            <span class="keyword">return</span> strategies[strategy].apply(dom, ary);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Validator.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; validatorFunc = <span class="keyword">this</span>.cache[i++];) &#123;</span><br><span class="line">            <span class="keyword">var</span> msg = validatorFunc(); <span class="comment">// 开始校验，并取得校验后的返回信息</span></span><br><span class="line">            <span class="keyword">if</span> (msg) &#123; <span class="comment">// 如果有确切的返回值，说明校验没有通过</span></span><br><span class="line">                <span class="keyword">return</span> msg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>使用策略模式重构代码之后，我们仅仅通过“配置”的方式就可以完成一个表单的校验，这些校验规则也可以复用在程序的任何地方，还能作为插件的形式，方便地被移植到其他项 目中。 </p><p>在修改某个校验规则的时候，只需要编写或者改写少量的代码。比如我们想将用户名输入框 的校验规则改成用户名不能少于 4 个字符。可以看到，这时候的修改是毫不费力的。代码如下： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">validator.add( registerForm.userName, <span class="string">'isNonEmpty'</span>, <span class="string">'用户名不能为空'</span> );  </span><br><span class="line"><span class="comment">// 改成： </span></span><br><span class="line">validator.add( registerForm.userName, <span class="string">'minLength:10'</span>, <span class="string">'用户名长度不能小于 10 位'</span> );</span><br></pre></td></tr></table></figure><h4 id="给某个文本输入框添加多种校验规则"><a href="#给某个文本输入框添加多种校验规则" class="headerlink" title="给某个文本输入框添加多种校验规则"></a>给某个文本输入框添加多种校验规则</h4><p>为了让读者把注意力放在策略模式的使用上，目前我们的表单校验实现留有一点小遗憾：一 个文本输入框只能对应一种校验规则，比如，用户名输入框只能校验输入是否为空： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">validator.add( registerForm.userName, <span class="string">'isNonEmpty'</span>, <span class="string">'用户名不能为空'</span> );</span><br></pre></td></tr></table></figure><p>如果我们既想校验它是否为空，又想校验它输入文本的长度不小于 10 呢？我们期望以这样 的形式进行校验： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">validator.add(registerForm.userName, [&#123;</span><br><span class="line">               strategy: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">               errorMsg: <span class="string">'用户名不能为空'</span></span><br><span class="line">           &#125;, &#123;</span><br><span class="line">               strategy: <span class="string">'minLength:6'</span>,</span><br><span class="line">               errorMsg: <span class="string">'用户名长度不能小于10 位'</span></span><br><span class="line">           &#125;]);</span><br></pre></td></tr></table></figure><p>实现如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http:// xxx.com/register"</span> <span class="attr">id</span>=<span class="string">"registerForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        请输入用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        请输入密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        请输入手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phoneNumber"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/***********************策略对象**************************/</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> strategies = &#123;</span></span><br><span class="line"><span class="javascript">            isNonEmpty: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> errorMsg;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            minLength: <span class="function"><span class="keyword">function</span> (<span class="params">value, length, errorMsg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (value.length &lt; length) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> errorMsg;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            isMobile: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> errorMsg;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/***********************Validator 类**************************/</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.cache = [];</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        Validator.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">dom, rules</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, rule; rule = rules[i++];) &#123;</span></span><br><span class="line"><span class="javascript">                (<span class="function"><span class="keyword">function</span> (<span class="params">rule</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> strategyAry = rule.strategy.split(<span class="string">':'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> errorMsg = rule.errorMsg;</span></span><br><span class="line"><span class="javascript">                    self.cache.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> strategy = strategyAry.shift();</span></span><br><span class="line"><span class="undefined">                        strategyAry.unshift(dom.value);</span></span><br><span class="line"><span class="undefined">                        strategyAry.push(errorMsg);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> strategies[strategy].apply(dom, strategyAry);</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="undefined">                &#125;)(rule)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        Validator.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; validatorFunc = <span class="keyword">this</span>.cache[i++];) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> errorMsg = validatorFunc();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (errorMsg) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> errorMsg;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/***********************客户调用代码**************************/</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">'registerForm'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> validataFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator();</span></span><br><span class="line"><span class="undefined">            validator.add(registerForm.userName, [&#123;</span></span><br><span class="line"><span class="javascript">                strategy: <span class="string">'isNonEmpty'</span>,</span></span><br><span class="line"><span class="javascript">                errorMsg: <span class="string">'用户名不能为空'</span></span></span><br><span class="line"><span class="undefined">            &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                strategy: <span class="string">'minLength:6'</span>,</span></span><br><span class="line"><span class="javascript">                errorMsg: <span class="string">'用户名长度不能小于10 位'</span></span></span><br><span class="line"><span class="undefined">            &#125;]);</span></span><br><span class="line"><span class="undefined">            validator.add(registerForm.password, [&#123;</span></span><br><span class="line"><span class="javascript">                strategy: <span class="string">'minLength:6'</span>,</span></span><br><span class="line"><span class="javascript">                errorMsg: <span class="string">'密码长度不能小于6 位'</span></span></span><br><span class="line"><span class="undefined">            &#125;]);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> errorMsg = validator.start();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> errorMsg;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        registerForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> errorMsg = validataFunc();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (errorMsg) &#123;</span></span><br><span class="line"><span class="undefined">                alert(errorMsg);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://jaychenfe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="https://jaychenfe.github.io/2019/05/04/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaychenfe.github.io/2019/05/04/装饰者模式/</id>
    <published>2019-05-04T13:31:07.000Z</published>
    <updated>2020-08-05T02:40:11.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><strong>装饰模式</strong>（Decorator Pattern）：动态地给一个对象增加一些额外的职责（Responsibility），就增加对象功能来说，装饰模式比生成子类实现更为灵活。</p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190504133206.png" alt=""></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="穿衣服-python实现"><a href="#穿衣服-python实现" class="headerlink" title="穿衣服(python实现)"></a>穿衣服(python实现)</h2><p>给自己搭配了一套着装：一条卡其色休闲裤、一双深色休闲皮鞋、一条银色针扣头的黑色腰带、一件紫红色针织毛衣、一件白色衬衫、一副方形黑框眼镜。但类似的着装也可以穿在其他的人身上，比如一个老师也可以这样穿：一双深色休闲皮鞋、一件白色衬衫、一副方形黑框眼镜。</p><p>我们就用程序来模拟这样一个情景。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">"人"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我的着装是："</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engineer</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="string">"工程师"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, skill)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line">        self.__skill = skill</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSkill</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__skill</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我是"</span> + self.getSkill() + <span class="string">"工程师"</span> + self.getName())</span><br><span class="line">        super().wear()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="string">"教师"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, title)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line">        self.__title = title</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTitle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__title</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我是"</span> + self.getName() + self.getTitle())</span><br><span class="line">        super().wear()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClothingDecorator</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="string">"服装装饰器"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        self._decorated = person</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._decorated.wear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CasualPantDecorator</span><span class="params">(ClothingDecorator)</span>:</span></span><br><span class="line">    <span class="string">"休闲裤"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        super().__init__(person)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().wear()</span><br><span class="line">        print(<span class="string">"一条卡其色休闲裤"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeltDecorator</span><span class="params">(ClothingDecorator)</span>:</span></span><br><span class="line">    <span class="string">"腰带"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        super().__init__(person)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().wear()</span><br><span class="line">        print(<span class="string">"一条银色针扣头的黑色腰带"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeatherShoesDecorator</span><span class="params">(ClothingDecorator)</span>:</span></span><br><span class="line">    <span class="string">"皮鞋"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        super().__init__(person)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().wear()</span><br><span class="line">        print(<span class="string">"一双深色休闲皮鞋"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KnittedSweaterDecorator</span><span class="params">(ClothingDecorator)</span>:</span></span><br><span class="line">    <span class="string">"针织毛衣"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        super().__init__(person)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().wear()</span><br><span class="line">        print(<span class="string">"一件紫红色针织毛衣"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteShirtDecorator</span><span class="params">(ClothingDecorator)</span>:</span></span><br><span class="line">    <span class="string">"白色衬衫"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        super().__init__(person)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().wear()</span><br><span class="line">        print(<span class="string">"一件白色衬衫"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlassesDecorator</span><span class="params">(ClothingDecorator)</span>:</span></span><br><span class="line">    <span class="string">"眼镜"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        super().__init__(person)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wear</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().wear()</span><br><span class="line">        print(<span class="string">"一副方形黑框眼镜"</span>)</span><br></pre></td></tr></table></figure><p>客户端:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testDecorator</span><span class="params">()</span>:</span></span><br><span class="line">    tony = Engineer(<span class="string">"Tony"</span>, <span class="string">"客户端"</span>)</span><br><span class="line">    pant = CasualPantDecorator(tony)</span><br><span class="line">    belt = BeltDecorator(pant)</span><br><span class="line">    shoes = LeatherShoesDecorator(belt)</span><br><span class="line">    shirt = WhiteShirtDecorator(shoes)</span><br><span class="line">    sweater = KnittedSweaterDecorator(shirt)</span><br><span class="line">    glasses = GlassesDecorator(sweater)</span><br><span class="line">    glasses.wear()</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    decorateTeacher = GlassesDecorator(WhiteShirtDecorator(LeatherShoesDecorator(Teacher(<span class="string">"wells"</span>, <span class="string">"教授"</span>))))</span><br><span class="line">    decorateTeacher.wear()</span><br></pre></td></tr></table></figure></p><p><code>decorateTeacher = GlassesDecorator(WhiteShirtDecorator(LeatherShoesDecorator(Teacher(&quot;wells&quot;, &quot;教授&quot;))))</code>这个写法，大家不要觉得奇怪，它其实就是将多个对象的创建过程合在了一起，其实是一种优雅的写法（是不是少了好几行代码？）。创建的 Teacher 对象又通过参数传给 <code>LeatherShoesDecorator</code>的构造函数，而创建的 <code>LeatherShoesDecorator</code> 对象又通过参数传给<code>WhiteShirtDecorator</code>的构造函数，以此类推……</p><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">我是客户端工程师Tony</span><br><span class="line">我的着装是：</span><br><span class="line">一条卡其色休闲裤</span><br><span class="line">一条银色针扣头的黑色腰带</span><br><span class="line">一双深色休闲皮鞋</span><br><span class="line">一件白色衬衫</span><br><span class="line">一件紫红色针织毛衣</span><br><span class="line">一副方形黑框眼镜</span><br><span class="line"></span><br><span class="line">我是wells教授</span><br><span class="line">我的着装是：</span><br><span class="line">一双深色休闲皮鞋</span><br><span class="line">一件白色衬衫</span><br><span class="line">一副方形黑框眼镜</span><br></pre></td></tr></table></figure><h3 id="装饰关系VS继承关系"><a href="#装饰关系VS继承关系" class="headerlink" title="装饰关系VS继承关系"></a>装饰关系VS继承关系</h3><p>装饰关系:</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190505220317.png" alt=""></p><p>继承关系:</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190505220514.png" alt=""></p><h3 id="装饰模式的特点"><a href="#装饰模式的特点" class="headerlink" title="装饰模式的特点"></a>装饰模式的特点</h3><ul><li><p><strong>可灵活地给一个对象增加职责或拓展功能</strong></p><p>如上面的示例中，可任意地穿上自己想穿的衣服。不管穿上什么衣服，你还是那个你，但穿上不同的衣服你就会有不同的外表。</p></li><li><p><strong>可增加任意多个装饰</strong></p><p>你可以只穿一件衣服，也可以只穿一条裤子，也可以衣服和裤子各种搭配的穿，全随你意！</p></li><li><p><strong>装饰的顺序不同，可能产生不同的效果</strong></p><p>在上面的示例中，Tony 是针织毛衣穿在外面，白色衬衫穿在里面。当然，如果你愿意（或因为怕冷），也可以针织毛衣穿在里面，白色衬衫穿在外面。但两种着装穿出来的效果，给人的感觉肯定是完全不一样的，自己脑补一下，哈哈！</p></li></ul><p>使用装饰模式的方式，想要改变装饰的顺序，也是非常简单的。只要把测试代码稍微改动一下即可，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testDecorator2</span><span class="params">()</span>:</span></span><br><span class="line">    tony = Engineer(<span class="string">"Tony"</span>, <span class="string">"客户端"</span>)</span><br><span class="line">    pant = CasualPantDecorator(tony)</span><br><span class="line">    belt = BeltDecorator(pant)</span><br><span class="line">    shoes = LeatherShoesDecorator(belt)</span><br><span class="line">    sweater = KnittedSweaterDecorator(shoes)</span><br><span class="line">    shirt = WhiteShirtDecorator(sweater)</span><br><span class="line">    glasses = GlassesDecorator(shirt)</span><br><span class="line">    glasses.wear()</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我是客户端工程师Tony</span><br><span class="line">我的着装是：</span><br><span class="line">一条卡其色休闲裤</span><br><span class="line">一条银色针扣头的黑色腰带</span><br><span class="line">一双深色休闲皮鞋</span><br><span class="line">一件紫红色针织毛衣</span><br><span class="line">一件白色衬衫</span><br><span class="line">一副方形黑框眼镜</span><br></pre></td></tr></table></figure><h3 id="模型抽象"><a href="#模型抽象" class="headerlink" title="模型抽象"></a>模型抽象</h3><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190505222545.png" alt=""></p><p>上图中的 Component 是一个抽象类，代表具有某中功能（function）的组件，ComponentImplA 和 ComponentImplB 分别是其具体的实现子类。Decorator 是 Component 装饰器，里面有一个 Component 的对象 decorated，这就是被装饰的对象，装饰器可为被装饰对象添加额外的功能或行为（addBehavior）。DecoratorImplA 和 DecoratorImplB 分别是两个具体的装饰器（实现子类）。</p><p>这样一种模式很好地将装饰器与被装饰的对象进行解耦。</p><h2 id="Js中的装饰模式-Js实现"><a href="#Js中的装饰模式-Js实现" class="headerlink" title="Js中的装饰模式(Js实现)"></a>Js中的装饰模式(Js实现)</h2><h3 id="用-AOP-装饰函数"><a href="#用-AOP-装饰函数" class="headerlink" title="用 AOP 装饰函数"></a>用 AOP 装饰函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 AOP 装饰函数</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> __self = <span class="keyword">this</span>; <span class="comment">// 保存原函数的引用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 返回包含了原函数和新函数的"代理"函数</span></span><br><span class="line">        beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 执行新函数，且保证this 不被劫持，新函数接受的参数</span></span><br><span class="line">        <span class="comment">// 也会被原封不动地传入原函数，新函数在原函数之前执行</span></span><br><span class="line">        <span class="keyword">return</span> __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 执行原函数并返回原函数的执行结果，</span></span><br><span class="line">        <span class="comment">// 并且保证this 不被劫持</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span> (<span class="params">afterfn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> __self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        afterfn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="给-window-绑定-onload-事件"><a href="#给-window-绑定-onload-事件" class="headerlink" title="给 window 绑定 onload 事件"></a>给 window 绑定 onload 事件</h4><h5 id="不使用AOP"><a href="#不使用AOP" class="headerlink" title="不使用AOP"></a>不使用AOP</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> alert (<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> _onload = <span class="built_in">window</span>.onload || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; </span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> _onload(); </span><br><span class="line"> alert (<span class="number">2</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用AOP"><a href="#使用AOP" class="headerlink" title="使用AOP"></a>使用AOP</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  alert (<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">window</span>.onload = ( <span class="built_in">window</span>.onload || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; ).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  alert (<span class="number">2</span>); </span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  alert (<span class="number">3</span>); </span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  alert (<span class="number">4</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="不污染原型"><a href="#不污染原型" class="headerlink" title="不污染原型"></a>不污染原型</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> before = <span class="function"><span class="keyword">function</span>(<span class="params"> fn, beforefn </span>)</span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  beforefn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </span><br><span class="line">  <span class="keyword">return</span> fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );  &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> a = before( </span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert (<span class="number">3</span>)&#125;, </span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert (<span class="number">2</span>)&#125; </span><br><span class="line">); </span><br><span class="line">a = before( a, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert (<span class="number">1</span>);&#125; ); </span><br><span class="line">a();</span><br></pre></td></tr></table></figure><h3 id="AOP-的应用实例"><a href="#AOP-的应用实例" class="headerlink" title="AOP 的应用实例"></a>AOP 的应用实例</h3><h4 id="数据统计上报"><a href="#数据统计上报" class="headerlink" title="数据统计上报"></a>数据统计上报</h4><p>页面中有一个登录 button，点击这个 button 会弹出登录浮层，与此同时要进行数据上报，<br>来统计有多少用户点击了这个登录 button：</p><h5 id="不使用AOP-1"><a href="#不使用AOP-1" class="headerlink" title="不使用AOP"></a>不使用AOP</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;button tag=<span class="string">"login"</span> id=<span class="string">"button"</span>&gt;点击打开登录浮层&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var showLogin = function()&#123;</span></span><br><span class="line"><span class="regexp">console.log( '打开登录浮层' );</span></span><br><span class="line"><span class="regexp">log( this.getAttribute( 'tag' ) );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">var log = function( tag )&#123;</span></span><br><span class="line"><span class="regexp">console.log( '上报标签为: ' + tag );</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ (new Image).src = 'http:/</span><span class="regexp">/ xxx.com/</span>report?tag=<span class="string">' + tag; // 真正的上报代码略</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">document.getElementById( '</span>button<span class="string">' ).onclick = showLogin;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>在 showLogin 函数里，既要负责打开登录浮层，又要负责数据上报，这是两个层面<br>的功能，在此处却被耦合在一个函数里</p><h5 id="使用AOP-1"><a href="#使用AOP-1" class="headerlink" title="使用AOP"></a>使用AOP</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;button tag=<span class="string">"login"</span> id=<span class="string">"button"</span>&gt;点击打开登录浮层&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    Function.prototype.after = function (afterfn) &#123;</span></span><br><span class="line"><span class="regexp">        var __self = this;</span></span><br><span class="line"><span class="regexp">        return function () &#123;</span></span><br><span class="line"><span class="regexp">            var ret = __self.apply(this, arguments);</span></span><br><span class="line"><span class="regexp">            afterfn.apply(this, arguments);</span></span><br><span class="line"><span class="regexp">            return ret;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">    var showLogin = function () &#123;</span></span><br><span class="line"><span class="regexp">        console.log('打开登录浮层');</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    var log = function () &#123;</span></span><br><span class="line"><span class="regexp">        console.log('上报标签为: ' + this.getAttribute('tag'));</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    showLogin = showLogin.after(log); /</span><span class="regexp">/ 打开登录浮层之后上报数据</span></span><br><span class="line"><span class="regexp">    document.getElementById('button').onclick = showLogin;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="动态改变函数的参数"><a href="#动态改变函数的参数" class="headerlink" title="动态改变函数的参数"></a>动态改变函数的参数</h4><p>观察Function.prototype.before 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> __self = <span class="keyword">this</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// (1)</span></span><br><span class="line">           <span class="keyword">return</span> __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// (2)</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从这段代码的(1)处和(2)处可以看到，beforefn 和原函数<code>__self</code> 共用一组参数列表arguments，当我们在beforefn 的函数体内改变arguments 的时候，原函数<code>__self</code> 接收的参数列表自然也会变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"> param </span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( param ); </span><br><span class="line">&#125;</span><br><span class="line">func = func.before( <span class="function"><span class="keyword">function</span>(<span class="params"> param </span>)</span>&#123;</span><br><span class="line">param.b = <span class="string">'b'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">func( &#123;<span class="attr">a</span>: <span class="string">'a'</span>&#125; );<span class="comment">// 输出： &#123;a: "a", b: "b"&#125;</span></span><br></pre></td></tr></table></figure><p>在ajax请求中增加token</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getToken = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Token'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">type, url, param</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.dir(param);</span><br><span class="line">        <span class="comment">// 发送ajax 请求的代码略</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ajax = ajax.before(<span class="function"><span class="keyword">function</span> (<span class="params">type, url, param</span>) </span>&#123;</span><br><span class="line">        param.token = getToken();</span><br><span class="line">    &#125;);</span><br><span class="line">    ajax(<span class="string">'get'</span>, <span class="string">'http:// xxx.com/userinfo'</span>, &#123; <span class="attr">name</span>: <span class="string">'sven'</span> &#125;);</span><br><span class="line">    <span class="comment">//&#123; name: "sven", token: "Token" &#125;</span></span><br></pre></td></tr></table></figure><p>从ajax 函数打印的log 可以看到，token 参数已经被附加到了ajax 请求的参数中：<br><code>{name: &quot;sven&quot;, Token: &quot;Token&quot;}</code><br>明显可以看到，用AOP 的方式给ajax 函数动态装饰上Token 参数，<strong>保证了ajax 函数是一</strong><br><strong>个相对纯净的函数，提高了ajax 函数的可复用性，它在被迁往其他项目的时候，不需要做任何</strong><br><strong>修改</strong>。</p><h4 id="插件式的表单验证"><a href="#插件式的表单验证" class="headerlink" title="插件式的表单验证"></a>插件式的表单验证</h4><p>我们很多人都写过许多表单验证的代码，在一个Web 项目中，可能存在非常多的表单，如<br>注册、登录、修改用户信息等。在表单数据提交给后台之前，常常要做一些校验，比如登录的时<br>候需要验证用户名和密码是否为空，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    用户名：&lt;input id=<span class="string">"username"</span> type=<span class="string">"text"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    密码： &lt;input id=<span class="string">"password"</span> type=<span class="string">"password"</span> /&gt;</span><br><span class="line">    &lt;input id=<span class="string">"submitBtn"</span> type=<span class="string">"button"</span> value=<span class="string">"提交"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var username = document.getElementById('username'),</span></span><br><span class="line"><span class="regexp">        password = document.getElementById('password'),</span></span><br><span class="line"><span class="regexp">        submitBtn = document.getElementById('submitBtn');</span></span><br><span class="line"><span class="regexp">    var formSubmit = function () &#123;</span></span><br><span class="line"><span class="regexp">        if (username.value === '') &#123;</span></span><br><span class="line"><span class="regexp">            return alert('用户名不能为空');</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if (password.value === '') &#123;</span></span><br><span class="line"><span class="regexp">            return alert('密码不能为空');</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        var param = &#123;</span></span><br><span class="line"><span class="regexp">            username: username.value,</span></span><br><span class="line"><span class="regexp">            password: password.value</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        ajax('http:/</span><span class="regexp">/ xxx.com/</span>login<span class="string">', param); // ajax 具体实现略</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    submitBtn.onclick = function () &#123;</span></span><br><span class="line"><span class="string">        formSubmit();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>formSubmit 函数在此处承担了两个职责，除了提交ajax 请求之外，还要验证用户输入的合法<br>性。这种代码一来会造成函数臃肿，职责混乱，二来谈不上任何可复用性。</p><p>可以将校验输入的逻辑放到validata<br>函数中，并且约定当validata 函数返回false 的时候，表示校验未通过，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> validata = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (username.value === <span class="string">''</span>) &#123;</span><br><span class="line">            alert(<span class="string">'用户名不能为空'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (password.value === <span class="string">''</span>) &#123;</span><br><span class="line">            alert(<span class="string">'密码不能为空'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> formSubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (validata() === <span class="literal">false</span>) &#123; <span class="comment">// 校验未通过</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> param = &#123;</span><br><span class="line">            username: username.value,</span><br><span class="line">            password: password.value</span><br><span class="line">        &#125;</span><br><span class="line">        ajax(<span class="string">'http:// xxx.com/login'</span>, param);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在的代码已经有了一些改进，我们把校验的逻辑都放到了validata 函数中，但formSubmit函数的内部还要计算validata 函数的返回值，因为返回值的结果表明了是否通过校验。<br>接下来进一步优化这段代码，使validata 和formSubmit 完全分离开来。首先要改写Function.prototype.before， 如果beforefn 的执行结果返回false，表示不再执行后面的原函数，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">submitBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       formSubmit();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> __self = <span class="keyword">this</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">               <span class="comment">// beforefn 返回false 的情况直接return，不再执行后面的原函数</span></span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> validata = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (username.value === <span class="string">''</span>) &#123;</span><br><span class="line">           alert(<span class="string">'用户名不能为空'</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (password.value === <span class="string">''</span>) &#123;</span><br><span class="line">           alert(<span class="string">'密码不能为空'</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> formSubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> param = &#123;</span><br><span class="line">           username: username.value,</span><br><span class="line">           password: password.value</span><br><span class="line">       &#125;</span><br><span class="line">       ajax(<span class="string">'http:// xxx.com/login'</span>, param);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   formSubmit = formSubmit.before(validata);</span><br><span class="line"></span><br><span class="line">   submitBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       formSubmit();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，校验输入和提交表单的代码完全分离开来，它们不再有任何耦合关系，<code>formSubmit = formSubmit.before( validata )</code>这句代码，如同把校验规则动态接在formSubmit 函数之前，validata 成为一个即插即用的函数，它甚至可以被写成配置文件的形式，这有利于我们分开维护这两个函数。再利用<strong>策略模式</strong>稍加改造，我们就可以把这些校验规则都写成插件的形式，用在不同的项目当中</p><h2 id="日志记录-C-实现"><a href="#日志记录-C-实现" class="headerlink" title="日志记录(C#实现)"></a>日志记录(C#实现)</h2><p>现在要求我们开发的记录日志的组件，除了要支持数据库记录DatabaseLog和文本文件记录TextFileLog两种方式外，我们还需要在不同的应用环境中增加一些额外的功能，比如需要记录日志信息的错误严重级别，需要记录日志信息的优先级别，还有日志信息的扩展属性等功能。在这里，如果我们不去考虑设计模式，解决问题的方法其实很简单，可以通过继承机制去实现，日志类结构图如下：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190508100801.png" alt=""></p><p>实现如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Log</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DatabaseLog</span> : <span class="title">Log</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">       Console.WriteLine(<span class="string">"记录到数据库"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFileLog</span> : <span class="title">Log</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"记录到文本"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要记录日志信息的错误严重级别功能和记录日志信息优先级别的功能，只要在原来子类DatabaseLog和TextFileLog的基础上再生成子类即可，同时需要引进两个新的接口IError和IPriority，类结构图如下：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190508100946.png" alt=""></p><p>实现代码如下</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IError</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetError</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPriority</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetPriority</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DBErrorLog</span> : <span class="title">DatabaseLog</span>, <span class="title">IError</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Write(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetError</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"......功能扩展，实现了记录错误严重级别"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DBPriorityLog</span> : <span class="title">DatabaseLog</span>, <span class="title">IPriority</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Write(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPriority</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">"......功能扩展，实现了记录优先级别"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TFErrorLog</span> : <span class="title">TextFileLog</span>, <span class="title">IError</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Write(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetError</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"......功能扩展，实现了记录错误严重级别"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TFPriorityLog</span> : <span class="title">TextFileLog</span>, <span class="title">IPriority</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Write(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPriority</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"......功能扩展，实现了记录优先级别"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以看到，如果需要相应的功能，直接使用这些子类就可以了。这里我们采用了类的继承方式来解决了对象功能的扩展问题，这种方式是可以达到我们预期的目的。</p><p>然而，它却带来了一系列的问题:</p><ul><li><p>首先，前面的分析只是进行了一种功能的扩展，如果既需要记录错误严重级别，又需要记录优先级时，子类就需要进行接口的多重继承，这在某些情况下会违反类的单一职责原则，注意下图中的蓝色区域：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190508101539.png" alt=""></p></li></ul><p>实现代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DBEPLog</span> : <span class="title">DatabaseLog</span>, <span class="title">IError</span>, <span class="title">IPriority</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        SetError();</span><br><span class="line">SetPriority();</span><br><span class="line"><span class="keyword">base</span>.Write(log);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetError</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//......功能扩展，实现了记录错误严重级别</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPriority</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//......功能扩展，实现了记录优先级别</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TFEPLog</span> : <span class="title">DatabaseLog</span>, <span class="title">IError</span>, <span class="title">IPriority</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SetError();</span><br><span class="line">SetPriority();</span><br><span class="line"><span class="keyword">base</span>.Write(log);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetError</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//......功能扩展，实现了记录错误严重级别</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPriority</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//......功能扩展，实现了记录优先级别</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其次，随着以后扩展功能的增多，子类会迅速的膨胀，可以看到，子类的出现其实是DatabaseLog和TextFileLog两个子类与新增加的接口的一种排列组合关系，所以类结构会变得很复杂而难以维护,“子类复子类，子类何其多”</li><li>最后，这种方式的扩展是一种静态的扩展方式，并没有能够真正实现扩展功能的动态添加，客户程序不能选择添加扩展功能的方式和时机。</li></ul><p>现在又该是Decorator模式出场的时候了，解决方案是把Log对象嵌入到另一个对象中，由这个对象来扩展功能。首先我们要定义一个抽象的包装类LogWrapper，让它继承于Log类，结构图如下：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190508102016.png" alt=""></p><p>实现代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogWrapper</span>: <span class="title">Log</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Log _log;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LogWrapper</span>(<span class="params">Log log</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _log = log;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _log.Write(log);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>现在对于每个扩展的功能，都增加一个包装类的子类，让它们来实现具体的扩展功能，如下图中绿色的区域：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190508102229.png" alt=""></p><p>实现如下</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogErrorWrapper</span> : <span class="title">LogWrapper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogErrorWrapper</span>(<span class="params">Log _log</span>) : <span class="title">base</span>(<span class="params">_log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        SetError(); </span><br><span class="line">        <span class="keyword">base</span>.Write(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetError</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"......功能扩展，实现了记录错误严重级别"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogPriorityWrapper</span> : <span class="title">LogWrapper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogPriorityWrapper</span>(<span class="params">Log log</span>) : <span class="title">base</span>(<span class="params">log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> log</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        SetPriority();</span><br><span class="line">        <span class="keyword">base</span>.Write(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPriority</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"......功能扩展,实现了记录优先级别"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，LogErrorWrapper类和LogPriorityWrapper类真正实现了对错误严重级别和优先级别的功能的扩展。我们来看一下客户程序如何去调用它：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Log dbLog = <span class="keyword">new</span> DatabaseLog();</span><br><span class="line">        LogWrapper logErrorWrapper1 = <span class="keyword">new</span> LogErrorWrapper(dbLog);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扩展了记录错误严重级别</span></span><br><span class="line">        logErrorWrapper1.Write(<span class="string">"Log Message"</span>);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">        LogPriorityWrapper logPriorityWrapper1 = <span class="keyword">new</span> LogPriorityWrapper(dbLog);</span><br><span class="line">        <span class="comment">//扩展了记录优先级别</span></span><br><span class="line">        logPriorityWrapper1.Write(<span class="string">"Log Message"</span>);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">        LogWrapper logErrorWrapper2 = <span class="keyword">new</span> LogErrorWrapper(dbLog);</span><br><span class="line">        LogPriorityWrapper logPriorityWrapper2 = <span class="keyword">new</span> LogPriorityWrapper(logErrorWrapper2);</span><br><span class="line">        <span class="comment">//同时扩展了错误严重级别和优先级别</span></span><br><span class="line">        logPriorityWrapper2.Write(<span class="string">"Log Message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190508144226.png" alt=""></p><p>注意在上面程序中的第三段装饰才真正体现出了Decorator模式的精妙所在，这里总共包装了两次：第一次对log对象进行错误严重级别的装饰，变成了logErrorWrapper2对象，第二次再对logErrorWrapper2对象进行装饰，于是变成了logPriorityWrapper2对象，此时的logPriorityWrapper2对象同时扩展了错误严重级别和优先级别的功能。也就是说我们需要哪些功能，就可以这样继续包装下去。到这里也许有人会说LogPriorityWrapper类的构造函数接收的是一个Log对象，为什么这里可以传入LogErrorWrapper对象呢？通过类结构图就能发现，LogErrorWrapper类其实也是Log类的一个子类。</p><p>我们分析一下这样会带来什么好处？首先对于扩展功能已经实现了真正的动态增加，只在需要某种功能的时候才进行包装；其次，如果再出现一种新的扩展功能，只需要增加一个对应的包装子类（注意：这一点任何时候都是避免不了的），而无需再进行很多子类的继承，不会出现子类的膨胀，同时Decorator模式也很好的符合了面向对象设计原则中的“优先使用对象组合而非继承”和“开放-封闭”原则。</p><h2 id="NET中的Stream-C-实现"><a href="#NET中的Stream-C-实现" class="headerlink" title=".NET中的Stream(C#实现)"></a>.NET中的Stream(C#实现)</h2><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190508104815.png" alt=""></p><p>可以看到， BufferedStream和CryptoStream其实就是两个包装类，这里的Decorator模式省略了抽象装饰角色（Decorator），示例代码如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">            MemoryStream ms = <span class="keyword">new</span> MemoryStream(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; <span class="number">100</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">222</span>, <span class="number">255</span> &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//扩展了缓冲的功能</span></span><br><span class="line">            BufferedStream buff = <span class="keyword">new</span> BufferedStream(ms);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//扩展了缓冲，加密的功能</span></span><br><span class="line">            CryptoStream crypto = <span class="keyword">new</span> CryptoStream(buff, <span class="literal">null</span>, CryptoStreamMode.Write);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中BufferedStream类的代码（只列出部分），它是继承于Stream类：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">BufferedStream</span> : <span class="title">Stream</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Methods</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BufferedStream</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedStream</span>(<span class="params">Stream stream</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedStream</span>(<span class="params">Stream stream, <span class="keyword">int</span> bufferSize</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fields</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _bufferSize;</span><br><span class="line">    <span class="keyword">private</span> Stream _s;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java中也是如此,java IO中的 FilterInputStream 和 FilterOutputStream的实现其实就是一个装饰模式。FilterInputStream(FilterOutputStream) 就是一个装饰器，而 InputStream(OutputStream) 就是被装饰的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"C:/text.txt"</span>));</span><br><span class="line">DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"C:/text.txt"</span>));</span><br></pre></td></tr></table></figure><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>装饰模式的优点：</strong></p><ul><li><p>使用装饰模式来实现扩展比继承更加灵活，它可以在不需要创造更多子类的情况下，将对象的功能加以扩展。</p></li><li><p>可以动态地给一个对象附加更多的功能。</p></li><li><p>可以用不同的装饰器进行多重装饰，装饰的顺序不同，可能产生不同的效果。</p></li><li><p>装饰类和被装饰类可以独立发展，不会相互耦合；装饰模式相当于是继承的一个替代模式。</p></li></ul><p><strong>装饰模式的缺点：</strong></p><ul><li>与继承相比，用装饰的方式拓展功能更加容易出错，排错也更困难。对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐。</li></ul><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li><p>有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。</p></li><li><p>需要动态地增加或撤销功能时。</p></li><li><p>不能采用生成子类的方法进行扩充时，如类定义不能用于生成子类。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;装饰模式&lt;/strong&gt;（Decorator Pattern）：动态地给一个对象增加一些额外的职责（Responsibil
      
    
    </summary>
    
      <category term="设计模式" scheme="https://jaychenfe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>职责链模式</title>
    <link href="https://jaychenfe.github.io/2019/05/02/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaychenfe.github.io/2019/05/02/职责链模式/</id>
    <published>2019-05-02T17:04:11.000Z</published>
    <updated>2020-08-05T02:40:11.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>从生活中的例子可以发现，某个请求可能需要几个人的审批，即使技术经理审批完了，还需要上一级的审批。这样的例子，还有公司中的请假，少于3天的，直属Leader就可以批准，3天到7天之内就需要项目经理批准，多余7天的就需要技术总监的批准了。介绍了这么多生活中责任链模式的例子的，下面具体给出面向对象中责任链模式的定义。</p><p>　　责任链模式指的是——某个请求需要多个对象进行处理，从而避免请求的发送者和接收之间的耦合关系。将这些对象连成一条链子，并沿着这条链子传递该请求，直到有对象处理它为止。</p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190503230122.png" alt=""></p><p>　主要涉及两个角色：</p><ul><li>抽象处理者角色（Handler）：定义出一个处理请求的接口。这个接口通常由接口或抽象类来实现。</li><li>具体处理者角色（ConcreteHandler）：具体处理者接受到请求后，可以选择将该请求处理掉，或者将请求传给下一个处理者。因此，每个具体处理者需要保存下一个处理者的引用，以便把请求传递下去。</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="采购商品-C-实现"><a href="#采购商品-C-实现" class="headerlink" title="采购商品(C#实现)"></a>采购商品(C#实现)</h2><p>公司规定，</p><ul><li><p>采购架构总价在1万之内，经理级别的人批准即可，</p></li><li><p>总价大于1万小于2万5的则还需要副总进行批准，</p></li><li><p>总价大于2万5小于10万的需要还需要总经理批准，</p></li><li><p>而大于总价大于10万的则需要组织一个会议进行讨论</p></li></ul><p>对于这样一个需求，最直观的方法就是设计一个方法，参数是采购的总价，然后在这个方法内对价格进行调整判断，然后针对不同的条件交给不同级别的人去处理，这样确实可以解决问题，但这样一来，我们就需要多重if-else语句来进行判断，但当加入一个新的条件范围时，我们又不得不去修改原来设计的方法来再添加一个条件判断，这样的设计显然违背了“开-闭”原则。这时候，可以采用责任链模式来解决这样的问题。具体实现代码如下所示。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 采购请求</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PurchaseRequest</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// 金额</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">double</span> Amount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="comment">// 产品名字</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">string</span> ProductName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">PurchaseRequest</span>(<span class="params"><span class="keyword">double</span> amount, <span class="keyword">string</span> productName</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          Amount = amount;</span><br><span class="line">          ProductName = productName;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 审批人,Handler</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Approver</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">public</span> Approver NextApprover &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Approver</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          <span class="keyword">this</span>.Name = name;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">PurchaseRequest request</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ConcreteHandler</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Manager</span> : <span class="title">Approver</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Manager</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function">          : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>      &#123; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">PurchaseRequest request</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          <span class="keyword">if</span> (request.Amount &lt; <span class="number">10000.0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              Console.WriteLine(<span class="string">"&#123;0&#125;-&#123;1&#125; approved the request of purshing &#123;2&#125;"</span>, <span class="keyword">this</span>, Name, request.ProductName);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (NextApprover != <span class="literal">null</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              NextApprover.ProcessRequest(request);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ConcreteHandler,副总</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VicePresident</span> : <span class="title">Approver</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">VicePresident</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function">          : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>      &#123; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">PurchaseRequest request</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          <span class="keyword">if</span> (request.Amount &lt; <span class="number">25000.0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              Console.WriteLine(<span class="string">"&#123;0&#125;-&#123;1&#125; approved the request of purshing &#123;2&#125;"</span>, <span class="keyword">this</span>, Name, request.ProductName);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (NextApprover != <span class="literal">null</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              NextApprover.ProcessRequest(request);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ConcreteHandler，总经理</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">President</span> :<span class="title">Approver</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">President</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function">          : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>      &#123; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">PurchaseRequest request</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          <span class="keyword">if</span> (request.Amount &lt; <span class="number">100000.0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              Console.WriteLine(<span class="string">"&#123;0&#125;-&#123;1&#125; approved the request of purshing &#123;2&#125;"</span>, <span class="keyword">this</span>, Name, request.ProductName);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">              Console.WriteLine(<span class="string">"Request需要组织一个会议讨论"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          PurchaseRequest requestTelphone = <span class="keyword">new</span> PurchaseRequest(<span class="number">4000.0</span>, <span class="string">"Telphone"</span>);</span><br><span class="line">          PurchaseRequest requestSoftware = <span class="keyword">new</span> PurchaseRequest(<span class="number">10000.0</span>, <span class="string">"Visual Studio"</span>);</span><br><span class="line">          PurchaseRequest requestComputers = <span class="keyword">new</span> PurchaseRequest(<span class="number">40000.0</span>, <span class="string">"Computers"</span>);</span><br><span class="line"></span><br><span class="line">          Approver manager = <span class="keyword">new</span> Manager(<span class="string">"LearningHard"</span>);</span><br><span class="line">          Approver Vp = <span class="keyword">new</span> VicePresident(<span class="string">"Tony"</span>);</span><br><span class="line">          Approver Pre = <span class="keyword">new</span> President(<span class="string">"BossTom"</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 设置责任链</span></span><br><span class="line">          manager.NextApprover = Vp;</span><br><span class="line">          Vp.NextApprover = Pre;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 处理请求</span></span><br><span class="line">          manager.ProcessRequest(requestTelphone);</span><br><span class="line">          manager.ProcessRequest(requestSoftware);</span><br><span class="line">          manager.ProcessRequest(requestComputers);</span><br><span class="line">          Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190503225804.png" alt=""></p><h2 id="购买商品-js实现"><a href="#购买商品-js实现" class="headerlink" title="购买商品(js实现)"></a>购买商品(js实现)</h2><p>购买规则:</p><ul><li>已支付500元定金的用户会收到100元的商城优惠券</li><li>200元定金的用户会收到50元的优惠券</li><li>没有支付定金的用户只能普通购买,没有优惠券不一定能买到</li></ul><p>有以下参数</p><ul><li>orderType 订单类型 1:500定金用户    2:200定金用户     3:普通用户</li><li>pay  true:已支付 false:已支付</li><li>stock:库存 只有普通用户受限</li></ul><h3 id="普通代码"><a href="#普通代码" class="headerlink" title="普通代码"></a>普通代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span>) &#123; <span class="comment">// 500 元定金购买模式</span></span><br><span class="line">        <span class="keyword">if</span> (pay === <span class="literal">true</span>) &#123; <span class="comment">// 已支付定金</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'500 元定金预购, 得到100 优惠券'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 未支付定金，降级到普通购买模式</span></span><br><span class="line">            <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123; <span class="comment">// 用于普通购买的手机还有库存</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'普通购买, 无优惠券'</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (orderType === <span class="number">2</span>) &#123; <span class="comment">// 200 元定金购买模式</span></span><br><span class="line">        <span class="keyword">if</span> (pay === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'200 元定金预购, 得到50 优惠券'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'普通购买, 无优惠券'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (orderType === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'普通购买, 无优惠券'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">order(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 输出： 500 元定金预购, 得到100 优惠券</span></span><br></pre></td></tr></table></figure><h3 id="用职责链模式重构"><a href="#用职责链模式重构" class="headerlink" title="用职责链模式重构"></a>用职责链模式重构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'500 元定金预购, 得到100 优惠券'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        order200(orderType, pay, stock); <span class="comment">// 将请求传递给200 元订单</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 200 元订单</span></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'200 元定金预购, 得到50 优惠券'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        orderNormal(orderType, pay, stock); <span class="comment">// 将请求传递给普通订单</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 普通购买订单</span></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通购买, 无优惠券'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果：</span></span><br><span class="line">order500(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 输出：500 元定金预购, 得到100 优惠券</span></span><br><span class="line">order500(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>); <span class="comment">// 输出：普通购买, 无优惠券</span></span><br><span class="line">order500(<span class="number">2</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 输出：200 元定金预购, 得到500 优惠券</span></span><br><span class="line">order500(<span class="number">3</span>, <span class="literal">false</span>, <span class="number">500</span>); <span class="comment">// 输出：普通购买, 无优惠券</span></span><br><span class="line">order500(<span class="number">3</span>, <span class="literal">false</span>, <span class="number">0</span>); <span class="comment">// 输出：手机库存不足</span></span><br></pre></td></tr></table></figure><p>好了很多仍然有一些问题</p><ul><li>职责链的顺序非常僵硬</li></ul><h3 id="灵活拆分职责链节点"><a href="#灵活拆分职责链节点" class="headerlink" title="灵活拆分职责链节点"></a>灵活拆分职责链节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'500 元定金预购，得到100 优惠券'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>; <span class="comment">// 我不知道下一个节点是谁，反正把请求往后面传递</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'200 元定金预购，得到50 优惠券'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>; <span class="comment">// 我不知道下一个节点是谁，反正把请求往后面传递</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通购买，无优惠券'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'手机库存不足'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chain.prototype.setNextSuccessor 指定在链中的下一个节点</span></span><br><span class="line"><span class="comment">// Chain.prototype.passRequest 传递请求给某个节点</span></span><br><span class="line"><span class="keyword">var</span> Chain = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.fn = fn;</span><br><span class="line">    <span class="keyword">this</span>.successor = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Chain.prototype.setNextSuccessor = <span class="function"><span class="keyword">function</span> (<span class="params">successor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.successor = successor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Chain.prototype.passRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ret = <span class="keyword">this</span>.fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.successor &amp;&amp; <span class="keyword">this</span>.successor.passRequest.apply(<span class="keyword">this</span>.successor, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chainOrder500 = <span class="keyword">new</span> Chain(order500);</span><br><span class="line"><span class="keyword">var</span> chainOrder200 = <span class="keyword">new</span> Chain(order200);</span><br><span class="line"><span class="keyword">var</span> chainOrderNormal = <span class="keyword">new</span> Chain(orderNormal);</span><br><span class="line"></span><br><span class="line">chainOrder500.setNextSuccessor(chainOrder200);</span><br><span class="line">chainOrder200.setNextSuccessor(chainOrderNormal);</span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 输出：500 元定金预购，得到100 优惠券</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">2</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 输出：200 元定金预购，得到50 优惠券</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">3</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 输出：普通购买，无优惠券</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">0</span>); <span class="comment">// 输出：手机库存不足</span></span><br></pre></td></tr></table></figure><h3 id="用AOP实现职责链"><a href="#用AOP实现职责链" class="headerlink" title="用AOP实现职责链"></a>用AOP实现职责链</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order = order500yuan.after(order200yuan).after(orderNormal);</span><br><span class="line">order(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 输出：500 元定金预购，得到100 优惠券</span></span><br><span class="line">order(<span class="number">2</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 输出：200 元定金预购，得到50 优惠券</span></span><br><span class="line">order(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>); <span class="comment">// 输出：普通购买，无优惠券</span></span><br></pre></td></tr></table></figure><h2 id="获取文件上传对象-js实现"><a href="#获取文件上传对象-js实现" class="headerlink" title="获取文件上传对象(js实现)"></a>获取文件上传对象(js实现)</h2><p>用职责链模式实现之前迭代器获取文件对象的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFTNActiveX.FTNUpload"</span>); <span class="comment">// IE 上传控件</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (supportFlash()) &#123; <span class="comment">// supportFlash 函数未提供</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">'&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'&lt;input name="file" type="file" class="ui-file"/&gt;'</span>; <span class="comment">// 表单上传</span></span><br><span class="line">    <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getUploadObj = getActiveUploadObj.after(getFlashUploadObj).after(getFormUploadObj);</span><br></pre></td></tr></table></figure><h2 id="职责链模式-python实现"><a href="#职责链模式-python实现" class="headerlink" title="职责链模式(python实现)"></a>职责链模式(python实现)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://www.testingperspective.com/wiki/doku.php/collaboration/chetan/designpatternsinpython/chain-of-responsibilitypattern</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">successor</span><span class="params">(self, successor)</span>:</span></span><br><span class="line">        self.successor = successor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span><span class="params">(Handler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request &gt; <span class="number">0</span> <span class="keyword">and</span> request &lt;= <span class="number">10</span>:</span><br><span class="line">            print(<span class="string">"in handler1"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.successor.handle(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span><span class="params">(Handler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request &gt; <span class="number">10</span> <span class="keyword">and</span> request &lt;= <span class="number">20</span>:</span><br><span class="line">            print(<span class="string">"in handler2"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.successor.handle(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler3</span><span class="params">(Handler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request &gt; <span class="number">20</span> <span class="keyword">and</span> request &lt;= <span class="number">30</span>:</span><br><span class="line">            print(<span class="string">"in handler3"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'end of chain, no handler for &#123;&#125;'</span>.format(request))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        h1 = ConcreteHandler1()</span><br><span class="line">        h2 = ConcreteHandler2()</span><br><span class="line">        h3 = ConcreteHandler3()</span><br><span class="line"></span><br><span class="line">        h1.successor(h2)</span><br><span class="line">        h2.successor(h3)</span><br><span class="line"></span><br><span class="line">        requests = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">3</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">20</span>]</span><br><span class="line">        <span class="keyword">for</span> request <span class="keyword">in</span> requests:</span><br><span class="line">            h1.handle(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    client = Client()</span><br></pre></td></tr></table></figure><p>结果:<br><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190502214437.png" alt=""></p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p>责任链模式的优点不言而喻，主要有以下点：</p><ul><li>降低了请求的发送者和接收者之间的耦合。</li><li>把多个条件判定分散到各个处理类中，使得代码更加清晰，责任更加明确。</li></ul><p>　　责任链模式也具有一定的缺点，如：</p><ul><li>在找到正确的处理对象之前，所有的条件判定都要执行一遍，当责任链过长时，可能会引起性能的问题</li><li>可能导致某个请求不被处理。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://jaychenfe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>[译]Distributed systems for fun and profit_6延伸阅读</title>
    <link href="https://jaychenfe.github.io/2019/04/30/%5B%E8%AF%91%5DDistributed%20systems%20for%20fun%20and%20profit_6%E5%BB%B6%E4%BC%B8%E9%98%85%E8%AF%BB/"/>
    <id>https://jaychenfe.github.io/2019/04/30/[译]Distributed systems for fun and profit_6延伸阅读/</id>
    <published>2019-04-30T22:10:51.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六-Further-reading-and-appendix"><a href="#六-Further-reading-and-appendix" class="headerlink" title="六. Further reading and appendix"></a>六. Further reading and appendix</h1><p>If you’ve made it this far, thank you.</p><p>If you liked the book, follow me on <a href="https://github.com/mixu/" target="_blank" rel="noopener">Github</a> (or <a href="http://twitter.com/mikitotakada" target="_blank" rel="noopener">Twitter</a>). I love seeing that I’ve had some kind of positive impact. “Create more value than you capture” and all that.</p><p>Many many thanks to: logpath, alexras, globalcitizen, graue, frankshearar, roryokane, jpfuentes2, eeror, cmeiklejohn, stevenproctor eos2102 and steveloughran for their help! Of course, any mistakes and omissions that remain are my fault!</p><p>It’s worth noting that my chapter on eventual consistency is fairly Berkeley-centric; I’d like to change that. I’ve also skipped one prominent use case for time: consistent snapshots. There are also a couple of topics which I should expand on: namely, an explicit discussion of safety and liveness properties and a more detailed discussion of consistent hashing. However, I’m off to <a href="https://thestrangeloop.com/" target="_blank" rel="noopener">Strange Loop 2013</a>, so whatever.</p><p>If this book had a chapter 6, it would probably be about the ways in which one can make use of and deal with large amounts of data. It seems that the most common type of “big data” computation is one in which <a href="http://en.wikipedia.org/wiki/SPMD" target="_blank" rel="noopener">a large dataset is passed through a single simple program</a>. I’m not sure what the subsequent chapters would be (perhaps high performance computing, given that the current focus has been on feasibility), but I’ll probably know in a couple of years.</p><h2 id="Books-about-distributed-systems"><a href="#Books-about-distributed-systems" class="headerlink" title="Books about distributed systems"></a>Books about distributed systems</h2><h4 id="Distributed-Algorithms-Lynch"><a href="#Distributed-Algorithms-Lynch" class="headerlink" title="Distributed Algorithms (Lynch)"></a>Distributed Algorithms (Lynch)</h4><p>This is probably the most frequently recommended book on distributed algorithms. I’d also recommend it, but with a caveat. It is very comprehensive, but written for a graduate student audience, so you’ll spend a lot of time reading about synchronous systems and shared memory algorithms before getting to things that are most interesting to a practitioner.</p><h4 id="Introduction-to-Reliable-and-Secure-Distributed-Programming-Cachin-Guerraoui-amp-Rodrigues"><a href="#Introduction-to-Reliable-and-Secure-Distributed-Programming-Cachin-Guerraoui-amp-Rodrigues" class="headerlink" title="Introduction to Reliable and Secure Distributed Programming (Cachin, Guerraoui &amp; Rodrigues)"></a>Introduction to Reliable and Secure Distributed Programming (Cachin, Guerraoui &amp; Rodrigues)</h4><p>For a practitioner, this is a fun one. It’s short and full of actual algorithm implementations.</p><h4 id="Replication-Theory-and-Practice"><a href="#Replication-Theory-and-Practice" class="headerlink" title="Replication: Theory and Practice"></a>Replication: Theory and Practice</h4><p>If you’re interested in replication, this book is amazing. The chapter on replication is largely based on a synthesis of the interesting parts of this book plus more recent readings.</p><h4 id="Distributed-Systems-An-Algorithmic-Approach-Ghosh"><a href="#Distributed-Systems-An-Algorithmic-Approach-Ghosh" class="headerlink" title="Distributed Systems: An Algorithmic Approach (Ghosh)"></a>Distributed Systems: An Algorithmic Approach (Ghosh)</h4><h4 id="Introduction-to-Distributed-Algorithms-Tel"><a href="#Introduction-to-Distributed-Algorithms-Tel" class="headerlink" title="Introduction to Distributed Algorithms (Tel)"></a>Introduction to Distributed Algorithms (Tel)</h4><h4 id="Transactional-Information-Systems-Theory-Algorithms-and-the-Practice-of-Concurrency-Control-and-Recovery-Weikum-amp-Vossen"><a href="#Transactional-Information-Systems-Theory-Algorithms-and-the-Practice-of-Concurrency-Control-and-Recovery-Weikum-amp-Vossen" class="headerlink" title="Transactional Information Systems: Theory, Algorithms, and the Practice of Concurrency Control and Recovery (Weikum &amp; Vossen)"></a>Transactional Information Systems: Theory, Algorithms, and the Practice of Concurrency Control and Recovery (Weikum &amp; Vossen)</h4><p>This book is on traditional transactional information systems, e.g. local RDBMS’s. There are two chapters on distributed transactions at the end, but the focus of the book is on transaction processing.</p><h4 id="Transaction-Processing-Concepts-and-Techniques-by-Gray-and-Reuter"><a href="#Transaction-Processing-Concepts-and-Techniques-by-Gray-and-Reuter" class="headerlink" title="Transaction Processing: Concepts and Techniques by Gray and Reuter"></a>Transaction Processing: Concepts and Techniques by Gray and Reuter</h4><p>A classic. I find that Weikum &amp; Vossen is more up to date.</p><h2 id="Seminal-papers"><a href="#Seminal-papers" class="headerlink" title="Seminal papers"></a>Seminal papers</h2><p>Each year, the <a href="http://en.wikipedia.org/wiki/Dijkstra_Prize" target="_blank" rel="noopener">Edsger W. Dijkstra Prize in Distributed Computing</a> is given to outstanding papers on the principles of distributed computing. Check out the link for the full list, which includes classics such as:</p><ul><li>“<a href="http://research.microsoft.com/users/lamport/pubs/time-clocks.pdf" target="_blank" rel="noopener">Time, Clocks and Ordering of Events in a Distributed System</a>“ - Leslie Lamport</li><li>“<a href="http://theory.lcs.mit.edu/tds/papers/Lynch/jacm85.pdf" target="_blank" rel="noopener">Impossibility of Distributed Consensus With One Faulty Process</a>“ - Fisher, Lynch, Patterson</li><li>“<a href="http://scholar.google.com/scholar?q=Unreliable+Failure+Detectors+for+Reliable+Distributed+Systems" target="_blank" rel="noopener">Unreliable failure detectors and reliable distributed systems</a>“ - Chandra and Toueg</li></ul><p>Microsoft Academic Search has a list of <a href="http://libra.msra.cn/RankList?entitytype=1&amp;topDomainID=2&amp;subDomainID=16&amp;last=0&amp;start=1&amp;end=100" target="_blank" rel="noopener">top publications in distributed &amp; parallel computing ordered by number of citations</a> - this may be an interesting list to skim for more classics.</p><p>Here are some additional lists of recommended papers:</p><ul><li><a href="http://courses.csail.mit.edu/6.852/08/handouts/handout3.pdf" target="_blank" rel="noopener">Nancy Lynch’s recommended reading list</a> from her course on Distributed systems.</li><li><a href="http://nosqlsummer.org/papers" target="_blank" rel="noopener">NoSQL Summer paper list</a> - a curated list of papers related to this buzzword.</li><li><a href="http://www.quora.com/What-are-the-seminal-papers-in-distributed-systems-Why" target="_blank" rel="noopener">A Quora question on seminal papers in distributed systems</a>.</li></ul><h3 id="Systems"><a href="#Systems" class="headerlink" title="Systems"></a>Systems</h3><ul><li><a href="http://research.google.com/archive/gfs.html" target="_blank" rel="noopener">The Google File System</a> - Ghemawat, Gobioff and Leung</li><li><a href="http://research.google.com/archive/mapreduce.html" target="_blank" rel="noopener">MapReduce: Simplified Data Processing on Large Clusters</a> - Dean and Ghemawat</li><li><a href="http://scholar.google.com/scholar?q=Dynamo%3A+Amazon&#39;s+Highly+Available+Key-value+Store" target="_blank" rel="noopener">Dynamo: Amazon’s Highly Available Key-value Store</a> - DeCandia et al.</li><li><a href="http://research.google.com/archive/bigtable.html" target="_blank" rel="noopener">Bigtable: A Distributed Storage System for Structured Data</a> - Chang et al.</li><li><a href="http://research.google.com/archive/chubby.html" target="_blank" rel="noopener">The Chubby Lock Service for Loosely-Coupled Distributed Systems</a> - Burrows</li><li><a href="http://www.usenix.org/event/usenix10/tech/full_papers/Hunt.pdf" target="_blank" rel="noopener">ZooKeeper: Wait-free coordination for Internet-scale systems</a> - Hunt, Konar, Junqueira, Reed, 2010</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;六-Further-reading-and-appendix&quot;&gt;&lt;a href=&quot;#六-Further-reading-and-appendix&quot; class=&quot;headerlink&quot; title=&quot;六. Further reading and appendix&quot;
      
    
    </summary>
    
      <category term="微服务理论文章阅读学习" scheme="https://jaychenfe.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%AE%BA%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>[译]Distributed systems for fun and profit_5复制 弱一致性模型协议</title>
    <link href="https://jaychenfe.github.io/2019/04/30/%5B%E8%AF%91%5DDistributed%20systems%20for%20fun%20and%20profit_5%E5%A4%8D%E5%88%B6-%E5%BC%B1%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B%E5%8D%8F%E8%AE%AE/"/>
    <id>https://jaychenfe.github.io/2019/04/30/[译]Distributed systems for fun and profit_5复制-弱一致性模型协议/</id>
    <published>2019-04-30T22:05:02.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五-Replication-weak-consistency-model-protocols"><a href="#五-Replication-weak-consistency-model-protocols" class="headerlink" title="五. Replication: weak consistency model protocols"></a>五. Replication: weak consistency model protocols</h1><h1 id="复制-弱一致性模型协议"><a href="#复制-弱一致性模型协议" class="headerlink" title="复制 弱一致性模型协议"></a>复制 弱一致性模型协议</h1><p>Now that we’ve taken a look at protocols that can enforce single-copy consistency under an increasingly realistic set of supported failure cases, let’s turn our attention at the world of options that opens up once we let go of the requirement of single-copy consistency.</p><p>第四章中提到的各个算法都是为了保证single-copy，也就是强一致性。在这一章节里，我们关注第二种策略：处理“不同”。即我们允许出现不同（而且不同是正常的），我们要做的就是如何处理这些不同然后得出正确的结果。</p><p>By and large, it is hard to come up with a single dimension that defines or characterizes the protocols that allow for replicas to diverge. Most such protocols are highly available, and the key issue is more whether or not the end users find the guarantees, abstractions and APIs useful for their purpose in spite of the fact that the replicas may diverge when node and/or network failures occur.</p><p>总的来说，很难想出一个单一维度来定义或表述允许副本分歧的协议。 大多数此类协议都是度可用的，而且关键在于发生节点或网络故障时是否能为用户提供有用的保证，抽象和API使他们达到原本的目的。</p><p>Why haven’t weakly consistent systems been more popular?</p><p>为什么弱一致系统没火起来?</p><p>As I stated in the introduction, I think that much of distributed programming is about dealing with the implications of two consequences of distribution:</p><ul><li>that information travels at the speed of light</li><li>that independent things fail independently</li></ul><p>如图我在介绍章节说的那样，<strong>多数的分布式程序都是为了解决分布式导致的两个问题：</strong></p><ul><li><strong>信息光速传播</strong></li><li><strong>独立事务独立失败</strong></li></ul><p>The implication that follows from the limitation on the speed at which information travels is that nodes experience the world in different, unique ways. Computation on a single node is easy, because everything happens in a predictable global total order. Computation on a distributed system is difficult, because there is no global total order.</p><p>信息传播速度限制所带来的意义是节点以不同的，独特的方式体验世界。 单个节点上的计算很容易，因为一切都以可预测的全局顺序发生。 而分布式系统上的计算很困难，因为没有全局顺序。</p><p>For the longest while (i.e. decades of research), we’ve solved this problem by introducing a global total order. I’ve discussed the many methods for achieving strong consistency by creating order (in a fault-tolerant manner) where there is no naturally occurring total order.</p><p>在最长的时间里（即数十年的研究），我们通过引入全局顺序来解决这个问题。 我已经讨论了通过创建顺序（以容错方式）实现强一致性的许多方法，其中没有自然发生的总顺序。</p><p>Of course, the problem is that enforcing order is expensive. This breaks down in particular with large scale internet systems, where a system needs to remain available. A system enforcing strong consistency doesn’t behave like a distributed system: it behaves like a single system, which is bad for availability during a partition.</p><p>但是很明显，问题在于执行顺序是代价很大。 特别是在大型互联网系统中，系统需要保持高可用状态。 强制一致性的系统的行为不太像分布式系统,而是类似于单个系统，这对分区可用性不利。</p><p>Furthermore, for each operation, often a majority of the nodes must be contacted - and often not just once, but twice (as you saw in the discussion on 2PC). This is particularly painful in systems that need to be geographically distributed to provide adequate performance for a global user base.</p><p>此外，对于每个操作，通常必须在大多数节点间通讯 - 通常不仅仅是一次，而是两次（正如您在2PC的讨论中看到的那样）。 在需要为全球用户群提供高性能服务的系统中，这尤其痛苦。</p><p>So behaving like a single system by default is perhaps not desirable.</p><p>因此，默认情况下表现得像单个系统可能并不理想</p><p>Perhaps what we want is a system where we can write code that doesn’t use expensive coordination, and yet returns a “usable” value. Instead of having a single truth, we will allow different replicas to diverge from each other - both to keep things efficient but also to tolerate partitions - and then try to find a way to deal with the divergence in some manner.</p><p>也许我们想要的是这样一个系统，可以编写不用编写复杂的资源调度代码，但仍然返回“可用”值。相比获取唯一的正确值, 我们更希望允许不同的副本彼此分离 -这 不仅保持了数据的有效性而且做到了了容忍分区 ,并且试图找到一种以某种方式处理分歧的方法。</p><p>Eventual consistency expresses this idea: that nodes can for some time diverge from each other, but that eventually they will agree on the value.</p><p>最终的一致性表达了这个想法：节点可以在一段时间内相互分离，但最终会达成一致值。</p><p>Within the set of systems providing eventual consistency, there are two types of system designs:</p><p>有两种类型的系统设计可以提供最终一致性：</p><p><em>Eventual consistency with probabilistic guarantees</em>. This type of system can detect conflicting writes at some later point, but does not guarantee that the results are equivalent to some correct sequential execution. In other words, conflicting updates will sometimes result in overwriting a newer value with an older one and some anomalies can be expected to occur during normal operation (or during partitions).</p><p><em>概率保证的最终一致性</em>。 这种类型的系统可以在稍后的某点检测到冲突的写入，但不保证结果等同于某些正确的顺序执行。 换句话说，冲突的更新有时会导致用较旧的值覆盖较新的值，并且在正常操作期间（或在分区期间）可能会发生一些异常。</p><p>In recent years, the most influential system design is Amazon’s Dynamo, which I will discuss as an example of a system that offers eventual consistency with probabilistic guarantees.</p><p>近年来，最具影响力的系统设计是亚马逊的Dynamo，我将作为一个系统的例子进行讨论，该系统最终与概率保证保持一致。</p><p><em>Eventual consistency with strong guarantees</em>. This type of system guarantees that the results converge to a common value equivalent to some correct sequential execution. In other words, such systems do not produce any anomalous results; without any coordination you can build replicas of the same service, and those replicas can communicate in any pattern and receive the updates in any order, and they will eventually agree on the end result as long as they all see the same information.</p><p><em>强保证的最终一致性</em>。这种类型的系统保证结果收敛到相当于某些正确顺序执行的公共值。换句话说，这种系统不会产生任何异常结果;在没有任何协调的情况下，您可以构建相同服务的副本，并且这些副本可以以任何模式进行通信并以任何顺序接收更新，并且只要它们都看到相同的信息，它们最终将同意最终结果。</p><p>CRDT’s (convergent replicated data types) are data types that guarantee convergence to the same value in spite of network delays, partitions and message reordering. They are provably convergent, but the data types that can be implemented as CRDT’s are limited.</p><p>CRDT（会聚复制数据类型）是数据类型，可以保证在网络延迟，分区和消息重新排序的情况下收敛到相同的值。它们可以证明是收敛的，但可以作为CRDT实现的数据类型是有限的。</p><p>The CALM (consistency as logical monotonicity) conjecture is an alternative expression of the same principle: it equates logical monotonicity with convergence. If we can conclude that something is logically monotonic, then it is also safe to run without coordination. Confluence analysis - in particular, as applied for the Bloom programming language - can be used to guide programmer decisions about when and where to use the coordination techniques from strongly consistent systems and when it is safe to execute without coordination.</p><p>CALM（作为逻辑单调性的一致性）猜想是相同原理的另一种表达：它将逻辑单调性与收敛等同起来。如果我们可以断定某些东西在逻辑上是单调的，那么在没有协调的情况下运行也是安全的。汇流分析 - 特别是应用于Bloom编程语言 - 可用于指导程序员决定何时何地使用来自强一致系统的协调技术，以及何时可以安全地执行而无需协调。</p><h2 id="Reconciling-different-operation-orders-协调不同操作顺序"><a href="#Reconciling-different-operation-orders-协调不同操作顺序" class="headerlink" title="Reconciling different operation orders 协调不同操作顺序"></a>Reconciling different operation orders 协调不同操作顺序</h2><p>What does a system that does not enforce single-copy consistency look like?  Let’s try to make this more concrete by looking at a few examples.</p><p>不强制执行单拷贝一致性的系统是什么样的？ 让我们试着通过一些例子来说明这一点。</p><p>Perhaps the most obvious characteristic of systems that do not enforce single-copy consistency is that they allow replicas to diverge from each other. This means that there is no strictly defined pattern of communication: replicas can be separated from each other and yet continue to be available and accept writes.</p><p>也许不强制实现单拷贝一致性的系统最明显的特征是它们允许副本彼此分离。 这意味着没有严格定义的通信模式：副本可以彼此分离，但仍然可用并接受写入。</p><p>Let’s imagine a system of three replicas, each of which is partitioned from the others. For example, the replicas might be in different datacenters and for some reason unable to communicate. Each replica remains available during the partition, accepting both reads and writes from some set of clients:</p><p>让我们设想一个由三个副本组成的系统，每个副本都与其他副本分开。 例如，副本可能位于不同的数据中心，并且由于某种原因无法进行通信。 每个副本在分区期间仍然可用，接受来自某些客户端的读取和写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Clients]   - &gt; [A]</span><br><span class="line"></span><br><span class="line">--- Partition ---</span><br><span class="line"></span><br><span class="line">[Clients]   - &gt; [B]</span><br><span class="line"></span><br><span class="line">--- Partition ---</span><br><span class="line"></span><br><span class="line">[Clients]   - &gt; [C]</span><br></pre></td></tr></table></figure><p>After some time, the partitions heal and the replica servers exchange information. They have received different updates from different clients and have diverged each other, so some sort of reconciliation needs to take place. What we would like to happen is that all of the replicas converge to the same result.<br>一段时间后，分区会恢复，副本服务器会交换信息。 他们收到了来自不同客户的不同更新，并且相互分歧，因此需要进行某种协调。 我们希望发生的是所有副本都得到相同的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[A] \</span><br><span class="line">    --&gt; [merge]</span><br><span class="line">[B] /     |</span><br><span class="line">          |</span><br><span class="line">[C] ----[merge]---&gt; result</span><br></pre></td></tr></table></figure><p>Another way to think about systems with weak consistency guarantees is to imagine a set of clients sending messages to two replicas in some order. Because there is no coordination protocol that enforces a single total order, the messages can get delivered in different orders at the two replicas:<br>考虑具有弱一致性保证的系统的另一种方法是想象一组客户端以某种顺序向两个副本发送消息。 由于没有强制执行单个总顺序的协调协议，因此可以在两个副本的不同订单中传递消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Clients]  --&gt; [A]  1, 2, 3</span><br><span class="line">[Clients]  --&gt; [B]  2, 3, 1</span><br></pre></td></tr></table></figure><p>This is, in essence, the reason why we need coordination protocols. For example, assume that we are trying to concatenate a string and the operations in messages 1, 2 and 3 are:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: &#123; operation: concat(&apos;Hello &apos;) &#125;</span><br><span class="line">2: &#123; operation: concat(&apos;World&apos;) &#125;</span><br><span class="line">3: &#123; operation: concat(&apos;!&apos;) &#125;</span><br></pre></td></tr></table></figure><p>Then, without coordination, A will produce “Hello World!”, and B will produce “World!Hello “.</p><p>然后，在没有协调的情况下，A将产生“Hello World！”，B将产生“World！Hello”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A: concat(concat(concat(&apos;&apos;, &apos;Hello &apos;), &apos;World&apos;), &apos;!&apos;) = &apos;Hello World!&apos;</span><br><span class="line">B: concat(concat(concat(&apos;&apos;, &apos;World&apos;), &apos;!&apos;), &apos;Hello &apos;) = &apos;World!Hello &apos;</span><br></pre></td></tr></table></figure><p>This is, of course, incorrect. Again, what we’d like to happen is that the replicas converge to the same result.</p><p>这当然是不正确的。 同样，我们想要发生的是分区收敛到相同的结果。</p><p>Keeping these two examples in mind, let’s look at Amazon’s Dynamo first to establish a baseline, and then discuss a number of novel approaches to building systems with weak consistency guarantees, such as CRDT’s and the CALM theorem.</p><p>记住这两个例子，让我们首先看看亚马逊的Dynamo建立基线，然后讨论一些新的方法来构建具有弱一致性保证的系统，例如CRDT和CALM定理。</p><h2 id="Amazon’s-Dynamo"><a href="#Amazon’s-Dynamo" class="headerlink" title="Amazon’s Dynamo"></a>Amazon’s Dynamo</h2><p>Amazon’s Dynamo system design (2007) is probably the best-known system that offers weak consistency guarantees but high availability. It is the basis for many other real world systems, including LinkedIn’s Voldemort, Facebook’s Cassandra and Basho’s Riak.</p><p>Dynamo is an eventually consistent, highly available key-value store. A key value store is like a large hash table: a client can set values via <code>set(key, value)</code> and retrieve them by key using <code>get(key)</code>. A Dynamo cluster consists of N peer nodes; each node has a set of keys which it is responsible for storing.</p><p>Dynamo prioritizes availability over consistency; it does not guarantee single-copy consistency. Instead, replicas may diverge from each other when values are written; when a key is read, there is a read reconciliation phase that attempts to reconcile differences between replicas before returning the value back to the client.</p><p>For many features on Amazon, it is more important to avoid outages than it is to ensure that data is perfectly consistent, as an outage can lead to lost business and a loss of credibility. Furthermore, if the data is not particularly important, then a weakly consistent system can provide better performance and higher availability at a lower cost than a traditional RDBMS.</p><p>Since Dynamo is a complete system design, there are many different parts to look at beyond the core replication task. The diagram below illustrates some of the tasks; notably, how a write is routed to a node and written to multiple replicas.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[ Client ]</span><br><span class="line">    |</span><br><span class="line">( Mapping keys to nodes )</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">[ Node A ]</span><br><span class="line">    |     \</span><br><span class="line">( Synchronous replication task: minimum durability )</span><br><span class="line">    |        \</span><br><span class="line">[ Node B]  [ Node C ]</span><br><span class="line">    A</span><br><span class="line">    |</span><br><span class="line">( Conflict detection; asynchronous replication task:</span><br><span class="line">  ensuring that partitioned / recovered nodes recover )</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">[ Node D]</span><br></pre></td></tr></table></figure><p>After looking at how a write is initially accepted, we’ll look at how conflicts are detected, as well as the asynchronous replica synchronization task. This task is needed because of the high availability design, in which nodes may be temporarily unavailable (down or partitioned). The replica synchronization task ensures that nodes can catch up fairly rapidly even after a failure.</p><h3 id="Consistent-hashing"><a href="#Consistent-hashing" class="headerlink" title="Consistent hashing"></a>Consistent hashing</h3><p>Whether we are reading or writing, the first thing that needs to happen is that we need to locate where the data should live on the system. This requires some type of key-to-node mapping.</p><p>In Dynamo, keys are mapped to nodes using a hashing technique known as <a href="https://github.com/mixu/vnodehash" target="_blank" rel="noopener">consistent hashing</a> (which I will not discuss in detail). The main idea is that a key can be mapped to a set of nodes responsible for it by a simple calculation on the client. This means that a client can locate keys without having to query the system for the location of each key; this saves system resources as hashing is generally faster than performing a remote procedure call.</p><h3 id="Partial-quorums"><a href="#Partial-quorums" class="headerlink" title="Partial quorums"></a>Partial quorums</h3><p>Once we know where a key should be stored, we need to do some work to persist the value. This is a synchronous task; the reason why we will immediately write the value onto multiple nodes is to provide a higher level of durability (e.g. protection from the immediate failure of a node).</p><p>Just like Paxos or Raft, Dynamo uses quorums for replication. However, Dynamo’s quorums are sloppy (partial) quorums rather than strict (majority) quorums.</p><p>Informally, a strict quorum system is a quorum system with the property that any two quorums (sets) in the quorum system overlap. Requiring a majority to vote for an update before accepting it guarantees that only a single history is admitted since each majority quorum must overlap in at least one node. This was the property that Paxos, for example, relied on.</p><p>Partial quorums do not have that property; what this means is that a majority is not required and that different subsets of the quorum may contain different versions of the same data. The user can choose the number of nodes to write to and read from:</p><ul><li>the user can choose some number W-of-N nodes required for a write to succeed; and</li><li>the user can specify the number of nodes (R-of-N) to be contacted during a read.</li></ul><p><code>W</code> and <code>R</code> specify the number of nodes that need to be involved to a write or a read. Writing to more nodes makes writes slightly slower but increases the probability that the value is not lost; reading from more nodes increases the probability that the value read is up to date.</p><p>The usual recommendation is that <code>R + W &gt; N</code>, because this means that the read and write quorums overlap in one node - making it less likely that a stale value is returned. A typical configuration is <code>N = 3</code> (e.g. a total of three replicas for each value); this means that the user can choose between:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R = 1, W = 3;</span><br><span class="line">R = 2, W = 2 or</span><br><span class="line">R = 3, W = 1</span><br></pre></td></tr></table></figure><p>More generally, again assuming <code>R + W &gt; N</code>:</p><ul><li><code>R = 1</code>, <code>W = N</code>: fast reads, slow writes</li><li><code>R = N</code>, <code>W = 1</code>: fast writes, slow reads</li><li><code>R = N/2</code> and <code>W = N/2 + 1</code>: favorable to both</li></ul><p>N is rarely more than 3, because keeping that many copies of large amounts of data around gets expensive!</p><p>As I mentioned earlier, the Dynamo paper has inspired many other similar designs. They all use the same partial quorum based replication approach, but with different defaults for N, W and R:</p><ul><li>Basho’s Riak (N = 3, R = 2, W = 2 default)</li><li>Linkedin’s Voldemort (N = 2 or 3, R = 1, W = 1 default)</li><li>Apache’s Cassandra (N = 3, R = 1, W = 1 default)</li></ul><p>There is another detail: when sending a read or write request, are all N nodes asked to respond (Riak), or only a number of nodes that meets the minimum (e.g. R or W; Voldemort). The “send-to-all” approach is faster and less sensitive to latency (since it only waits for the fastest R or W nodes of N) but also less efficient, while the “send-to-minimum” approach is more sensitive to latency (since latency communicating with a single node will delay the operation) but also more efficient (fewer messages / connections overall).</p><p>What happens when the read and write quorums overlap, e.g. (<code>R + W &gt; N</code>)? Specifically, it is often claimed that this results in “strong consistency”.</p><h3 id="Is-R-W-gt-N-the-same-as-“strong-consistency”"><a href="#Is-R-W-gt-N-the-same-as-“strong-consistency”" class="headerlink" title="Is R + W &gt; N the same as “strong consistency”?"></a>Is R + W &gt; N the same as “strong consistency”?</h3><p>No.</p><p>It’s not completely off base: a system where <code>R + W &gt; N</code> can detect read/write conflicts, since any read quorum and any write quorum share a member. E.g. at least one node is in both quorums:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 1     2   N/2+1     N/2+2    N</span><br><span class="line">[...] [R]  [R + W]   [W]    [...]</span><br></pre></td></tr></table></figure><p>This guarantees that a previous write will be seen by a subsequent read. However, this only holds if the nodes in N never change. Hence, Dynamo doesn’t qualify, because in Dynamo the cluster membership can change if nodes fail.</p><p>Dynamo is designed to be always writable. It has a mechanism which handles node failures by adding a different, unrelated server into the set of nodes responsible for certain keys when the original server is down. This means that the quorums are no longer guaranteed to always overlap. Even <code>R = W = N</code> would not qualify, since while the quorum sizes are equal to N, the nodes in those quorums can change during a failure. Concretely, during a partition, if a sufficient number of nodes cannot be reached, Dynamo will add new nodes to the quorum from unrelated but accessible nodes.</p><p>Furthermore, Dynamo doesn’t handle partitions in the manner that a system enforcing a strong consistency model would: namely, writes are allowed on both sides of a partition, which means that for at least some time the system does not act as a single copy. So calling <code>R + W &gt; N</code> “strongly consistent” is misleading; the guarantee is merely probabilistic - which is not what strong consistency refers to.</p><h3 id="Conflict-detection-and-read-repair"><a href="#Conflict-detection-and-read-repair" class="headerlink" title="Conflict detection and read repair"></a>Conflict detection and read repair</h3><p>Systems that allow replicas to diverge must have a way to eventually reconcile two different values. As briefly mentioned during the partial quorum approach, one way to do this is to detect conflicts at read time, and then apply some conflict resolution method. But how is this done?</p><p>In general, this is done by tracking the causal history of a piece of data by supplementing it with some metadata. Clients must keep the metadata information when they read data from the system, and must return back the metadata value when writing to the database.</p><p>We’ve already encountered a method for doing this: vector clocks can be used to represent the history of a value. Indeed, this is what the original Dynamo design uses for detecting conflicts.</p><p>However, using vector clocks is not the only alternative. If you look at many practical system designs, you can deduce quite a bit about how they work by looking at the metadata that they track.</p><p><em>No metadata</em>. When a system does not track metadata, and only returns the value (e.g. via a client API), it cannot really do anything special about concurrent writes. A common rule is that the last writer wins: in other words, if two writers are writing at the same time, only the value from the slowest writer is kept around.</p><p><em>Timestamps</em>. Nominally, the value with the higher timestamp value wins. However, if time is not carefully synchronized, many odd things can happen where old data from a system with a faulty or fast clock overwrites newer values. Facebook’s Cassandra is a Dynamo variant that uses timestamps instead of vector clocks.</p><p><em>Version numbers</em>. Version numbers may avoid some of the issues related with using timestamps. Note that the smallest mechanism that can accurately track causality when multiple histories are possible are vector clocks, not version numbers.</p><p><em>Vector clocks</em>. Using vector clocks, concurrent and out of date updates can be detected. Performing read repair then becomes possible, though in some cases (concurrent changes) we need to ask the client to pick a value. This is because if the changes are concurrent and we know nothing more about the data (as is the case with a simple key-value store), then it is better to ask than to discard data arbitrarily.</p><p>When reading a value, the client contacts <code>R</code> of <code>N</code> nodes and asks them for the latest value for a key. It takes all the responses, discards the values that are strictly older (using the vector clock value to detect this). If there is only one unique vector clock + value pair, it returns that. If there are multiple vector clock + value pairs that have been edited concurrently (e.g. are not comparable), then all of those values are returned.</p><p>As is obvious from the above, read repair may return multiple values. This means that the client / application developer must occasionally handle these cases by picking a value based on some use-case specific criterion.</p><p>In addition, a key component of a practical vector clock system is that the clocks cannot be allowed to grow forever - so there needs to be a procedure for occasionally garbage collecting the clocks in a safe manner to balance fault tolerance with storage requirements.</p><h3 id="Replica-synchronization-gossip-and-Merkle-trees"><a href="#Replica-synchronization-gossip-and-Merkle-trees" class="headerlink" title="Replica synchronization: gossip and Merkle trees"></a>Replica synchronization: gossip and Merkle trees</h3><p>Given that the Dynamo system design is tolerant of node failures and network partitions, it needs a way to deal with nodes rejoining the cluster after being partitioned, or when a failed node is replaced or partially recovered.</p><p>Replica synchronization is used to bring nodes up to date after a failure, and for periodically synchronizing replicas with each other.</p><p>Gossip is a probabilistic technique for synchronizing replicas. The pattern of communication (e.g. which node contacts which node) is not determined in advance. Instead, nodes have some probability <code>p</code> of attempting to synchronize with each other. Every <code>t</code> seconds, each node picks a node to communicate with. This provides an additional mechanism beyond the synchronous task (e.g. the partial quorum writes) which brings the replicas up to date.</p><p>Gossip is scalable, and has no single point of failure, but can only provide probabilistic guarantees.</p><p>In order to make the information exchange during replica synchronization efficient, Dynamo uses a technique called Merkle trees, which I will not cover in detail. The key idea is that a data store can be hashed at multiple different levels of granularity: a hash representing the whole content, half the keys, a quarter of the keys and so on.</p><p>By maintaining this fairly granular hashing, nodes can compare their data store content much more efficiently than a naive technique. Once the nodes have identified which keys have different values, they exchange the necessary information to bring the replicas up to date.</p><h3 id="Dynamo-in-practice-probabilistically-bounded-staleness-PBS"><a href="#Dynamo-in-practice-probabilistically-bounded-staleness-PBS" class="headerlink" title="Dynamo in practice: probabilistically bounded staleness (PBS)"></a>Dynamo in practice: probabilistically bounded staleness (PBS)</h3><p>And that pretty much covers the Dynamo system design:</p><ul><li>consistent hashing to determine key placement</li><li>partial quorums for reading and writing</li><li>conflict detection and read repair via vector clocks and</li><li>gossip for replica synchronization</li></ul><p>How might we characterize the behavior of such a system? A fairly recent paper from Bailis et al. (2012) describes an approach called <a href="http://pbs.cs.berkeley.edu/" target="_blank" rel="noopener">PBS</a> (probabilistically bounded staleness) uses simulation and data collected from a real world system to characterize the expected behavior of such a system.</p><p>PBS estimates the degree of inconsistency by using information about the anti-entropy (gossip) rate, the network latency and local processing delay to estimate the expected level of consistency of reads. It has been implemented in Cassandra, where timing information is piggybacked on other messages and an estimate is calculated based on a sample of this information in a Monte Carlo simulation.</p><p>Based on the paper, during normal operation eventually consistent data stores are often faster and can read a consistent state within tens or hundreds of milliseconds. The table below illustrates amount of time required from a 99.9% probability of consistent reads given different <code>R</code> and <code>W</code> settings on empirical timing data from LinkedIn (SSD and 15k RPM disks) and Yammer:</p><p><img src="" alt="from the PBS paper"></p><p>For example, going from <code>R=1</code>, <code>W=1</code> to <code>R=2</code>, <code>W=1</code> in the Yammer case reduces the inconsistency window from 1352 ms to 202 ms - while keeping the read latencies lower (32.6 ms) than the fastest strict quorum (<code>R=3</code>, <code>W=1</code>; 219.27 ms).</p><p>For more details, have a look at the <a href="http://pbs.cs.berkeley.edu/" target="_blank" rel="noopener">PBS website</a>  and the associated paper.</p><h2 id="Disorderly-programming"><a href="#Disorderly-programming" class="headerlink" title="Disorderly programming"></a>Disorderly programming</h2><p>Let’s look back at the examples of the kinds of situations that we’d like to resolve. The first scenario consisted of three different servers behind partitions; after the partitions healed, we wanted the servers to converge to the same value. Amazon’s Dynamo made this possible by reading from <code>R</code> out of <code>N</code> nodes and then performing read reconciliation.</p><p>In the second example, we considered a more specific operation: string concatenation. It turns out that there is no known technique for making string concatenation resolve to the same value without imposing an order on the operations (i.e. without expensive coordination). However, there are operations which can be applied safely in any order, where a simple register would not be able to do so. As Pat Helland wrote:</p><blockquote><p>… operation-centric work can be made commutative (with the right operations and the right semantics) where a simple READ/WRITE semantic does not lend itself to commutativity.</p></blockquote><p>For example, consider a system that implements a simple accounting system with the <code>debit</code> and <code>credit</code> operations in two different ways:</p><ul><li>using a register with <code>read</code> and <code>write</code> operations, and</li><li>using a integer data type with native <code>debit</code> and <code>credit</code> operations</li></ul><p>The latter implementation knows more about the internals of the data type, and so it can preserve the intent of the operations in spite of the operations being reordered. Debiting or crediting can be applied in any order, and the end result is the same:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 + credit(10) + credit(20) = 130 and</span><br><span class="line">100 + credit(20) + credit(10) = 130</span><br></pre></td></tr></table></figure><p> However, writing a fixed value cannot be done in any order: if writes are reordered, the one of the writes will overwrite the other:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 + write(110) + write(130) = 130 but</span><br><span class="line">100 + write(130) + write(110) = 110</span><br></pre></td></tr></table></figure><p>Let’s take the example from the beginning of this chapter, but use a different operation. In this scenario, clients are sending messages to two nodes, which see the operations in different orders:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Clients]  --&gt; [A]  1, 2, 3</span><br><span class="line">[Clients]  --&gt; [B]  2, 3, 1</span><br></pre></td></tr></table></figure><p>Instead of string concatenation, assume that we are looking to find the largest value (e.g. MAX()) for a set of integers. The messages 1, 2 and 3 are:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: &#123; operation: max(previous, 3) &#125;</span><br><span class="line">2: &#123; operation: max(previous, 5) &#125;</span><br><span class="line">3: &#123; operation: max(previous, 7) &#125;</span><br></pre></td></tr></table></figure><p>Then, without coordination, both A and B will converge to 7, e.g.:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A: max(max(max(0, 3), 5), 7) = 7</span><br><span class="line">B: max(max(max(0, 5), 7), 3) = 7</span><br></pre></td></tr></table></figure><p>In both cases, two replicas see updates in different order, but we are able to merge the results in a way that has the same result in spite of what the order is. The result converges to the same answer in both cases because of the merge procedure (<code>max</code>) we used.</p><p>It is likely not possible to write a merge procedure that works for all data types. In Dynamo, a value is a binary blob, so the best that can be done is to expose it and ask the application to handle each conflict.</p><p>However, if we know that the data is of a more specific type, handling these kinds of conflicts becomes possible. CRDT’s are data structures designed to provide data types that will always converge, as long as they see the same set of operations (in any order).</p><h2 id="CRDTs-Convergent-replicated-data-types"><a href="#CRDTs-Convergent-replicated-data-types" class="headerlink" title="CRDTs: Convergent replicated data types"></a>CRDTs: Convergent replicated data types</h2><p>CRDTs (convergent replicated datatypes) exploit knowledge regarding the commutativity and associativity of specific operations on specific datatypes.</p><p>In order for a set of operations to converge on the same value in an environment where replicas only communicate occasionally, the operations need to be order-independent and insensitive to (message) duplication/redelivery. Thus, their operations need to be:</p><ul><li>Associative (<code>a+(b+c)=(a+b)+c</code>), so that grouping doesn’t matter</li><li>Commutative (<code>a+b=b+a</code>), so that order of application doesn’t matter</li><li>Idempotent (<code>a+a=a</code>), so that duplication does not matter</li></ul><p>It turns out that these structures are already known in mathematics; they are known as join or meet <a href="http://en.wikipedia.org/wiki/Semilattice" target="_blank" rel="noopener">semilattices</a>.</p><p>A <a href="http://en.wikipedia.org/wiki/Lattice_%28order%29" target="_blank" rel="noopener">lattice</a> is a partially ordered set with a distinct top (least upper bound) and a distinct bottom (greatest lower bound). A semilattice is like a lattice, but one that only has a distinct top or bottom. A join semilattice is one with a distinct top (least upper bound) and a meet semilattice is one with a distinct bottom (greatest lower bound).</p><p>Any data type that can be expressed as a semilattice can be implemented as a data structure which guarantees convergence. For example, calculating the <code>max()</code> of a set of values will always return the same result regardless of the order in which the values were received, as long as all values are eventually received, because the <code>max()</code> operation is associative, commutative and idempotent.</p><p>For example, here are two lattices: one drawn for a set, where the merge operator is <code>union(items)</code> and one drawn for a strictly increasing integer counter, where the merge operator is <code>max(values)</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &#123; a, b, c &#125;              7</span><br><span class="line">  /      |    \            /  \</span><br><span class="line">&#123;a, b&#125; &#123;b,c&#125; &#123;a,c&#125;        5    7</span><br><span class="line">  |  \  /  | /           /   |  \</span><br><span class="line">  &#123;a&#125; &#123;b&#125; &#123;c&#125;            3   5   7</span><br></pre></td></tr></table></figure><p>With data types that can be expressed as semilattices, you can have replicas communicate in any pattern and receive the updates in any order, and they will eventually agree on the end result as long as they all see the same information. That is a powerful property that can be guaranteed as long as the prerequisites hold.</p><p>However, expressing a data type as a semilattice often requires some level of interpretation. Many data types have operations which are not in fact order-independent. For example, adding items to a set is associative, commutative and idempotent. However, if we also allow items to be removed from a set, then we need some way to resolve conflicting operations, such as <code>add(A)</code> and <code>remove(A)</code>. What does it mean to remove an element if the local replica never added it? This resolution has to be specified in a manner that is order-independent, and there are several different choices with different tradeoffs.</p><p>This means that several familiar data types have more specialized implementations as CRDT’s which make a different tradeoff in order to resolve conflicts in an order-independent manner. Unlike a key-value store which simply deals with registers (e.g. values that are opaque blobs from the perspective of the system), someone using CRDTs must use the right data type to avoid anomalies.</p><p>Some examples of the different data types specified as CRDT’s include:</p><ul><li>Counters<ul><li>Grow-only counter (merge = max(values); payload = single integer)</li><li>Positive-negative counter (consists of two grow counters, one for increments and another for decrements)</li></ul></li><li>Registers<ul><li>Last Write Wins -register (timestamps or version numbers; merge = max(ts); payload = blob)</li><li>Multi-valued -register (vector clocks; merge = take both)</li></ul></li><li>Sets<ul><li>Grow-only set (merge = union(items); payload = set; no removal)</li><li>Two-phase set (consists of two sets, one for adding, and another for removing; elements can be added once and removed once)</li><li>Unique set (an optimized version of the two-phase set)</li><li>Last write wins set (merge = max(ts); payload = set)</li><li>Positive-negative set (consists of one PN-counter per set item)</li><li>Observed-remove set</li></ul></li><li>Graphs and text sequences (see the paper)</li></ul><p>To ensure anomaly-free operation, you need to find the right data type for your specific application - for example, if you know that you will only remove an item once, then a two-phase set works; if you will only ever add items to a set and never remove them, then a grow-only set works.</p><p>Not all data structures have known implementations as CRDTs, but there are CRDT implementations for booleans, counters, sets, registers and graphs in the recent (2011) <a href="http://hal.inria.fr/docs/00/55/55/88/PDF/techreport.pdf" target="_blank" rel="noopener">survey paper from Shapiro et al</a>.</p><p>Interestingly, the register implementations correspond directly with the implementations that key value stores use: a last-write-wins register uses timestamps or some equivalent and simply converges to the largest timestamp value; a multi-valued register corresponds to the Dynamo strategy of retaining, exposing and reconciling concurrent changes. For the details, I recommend that you take a look at the papers in the further reading section of this chapter.</p><h2 id="The-CALM-theorem"><a href="#The-CALM-theorem" class="headerlink" title="The CALM theorem"></a>The CALM theorem</h2><p>The CRDT data structures were based on the recognition that data structures expressible as semilattices are convergent. But programming is about more than just evolving state, unless you are just implementing a data store.</p><p>Clearly, order-independence is an important property of any computation that converges: if the order in which data items are received influences the result of the computation, then there is no way to execute a computation without guaranteeing order.</p><p>However, there are many programming models in which the order of statements does not play a significant role. For example, in the <a href="http://en.wikipedia.org/wiki/MapReduce" target="_blank" rel="noopener">MapReduce model</a>, both the Map and the Reduce tasks are specified as stateless tuple-processing tasks that need to be run on a dataset. Concrete decisions about how and in what order data is routed to the tasks is not specified explicitly, instead, the batch job scheduler is responsible for scheduling the tasks to run on the cluster.</p><p>Similarly, in SQL one specifies the query, but not how the query is executed. The query is simply a declarative description of the task, and it is the job of the query optimizer to figure out an efficient way to execute the query (across multiple machines, databases and tables).</p><p>Of course, these programming models are not as permissive as a general purpose programming language. MapReduce tasks need to be expressible as stateless tasks in an acyclic dataflow program; SQL statements can execute fairly sophisticated computations but many things are hard to express in it.</p><p>However, it should be clear from these two examples that there are many kinds of data processing tasks which are amenable to being expressed in a declarative language where the order of execution is not explicitly specified. Programming models which express a desired result while leaving the exact order of statements up to an optimizer to decide often have semantics that are order-independent. This means that such programs may be possible to execute without coordination, since they depend on the inputs they receive but not necessarily the specific order in which the inputs are received.</p><p>The key point is that such programs <em>may be</em> safe to execute without coordination. Without a clear rule that characterizes what is safe to execute without coordination, and what is not, we cannot implement a program while remaining certain that the result is correct.</p><p>This is what the CALM theorem is about. The CALM theorem is based on a recognition of the link between logical monotonicity and useful forms of eventual consistency (e.g. confluence / convergence). It states that logically monotonic programs are guaranteed to be eventually consistent.</p><p>Then, if we know that some computation is logically monotonic, then we know that it is also safe to execute without coordination.</p><p>To better understand this, we need to contrast monotonic logic (or monotonic computations) with <a href="http://plato.stanford.edu/entries/logic-nonmonotonic/" target="_blank" rel="noopener">non-monotonic logic</a> (or non-monotonic computations).</p><dl><br>  <dt>Monotony</dt><br>  <dd>if sentence <code>φ</code> is a consequence of a set of premises <code>Γ</code>, then it can also be inferred from any set <code>Δ</code> of premises extending <code>Γ</code></dd><br></dl><p>Most standard logical frameworks are monotonic: any inferences made within a framework such as first-order logic, once deductively valid, cannot be invalidated by new information. A non-monotonic logic is a system in which that property does not hold - in other words, if some conclusions can be invalidated by learning new knowledge.</p><p>Within the artificial intelligence community, non-monotonic logics are associated with <a href="http://plato.stanford.edu/entries/reasoning-defeasible/" target="_blank" rel="noopener">defeasible reasoning</a> - reasoning, in which assertions made utilizing partial information can be invalidated by new knowledge. For example, if we learn that Tweety is a bird, we’ll assume that Tweety can fly; but if we later learn that Tweety is a penguin, then we’ll have to revise our conclusion.</p><p>Monotonicity concerns the relationship between premises (or facts about the world) and conclusions (or assertions about the world). Within a monotonic logic, we know that our results are retraction-free: <a href="http://en.wikipedia.org/wiki/Monotonicity_of_entailment" target="_blank" rel="noopener">monotone</a> computations do not need to be recomputed or coordinated; the answer gets more accurate over time. Once we know that Tweety is a bird (and that we’re reasoning using monotonic logic), we can safely conclude that Tweety can fly and that nothing we learn can invalidate that conclusion.</p><p>While any computation that produces a human-facing result can be interpreted as an assertion about the world (e.g. the value of “foo” is “bar”), it is difficult to determine whether a computation in a von Neumann machine based programming model is monotonic, because it is not exactly clear what the relationship between facts and assertions are and whether those relationships are monotonic.</p><p>However, there are a number of programming models for which determining monotonicity is possible. In particular, <a href="http://en.wikipedia.org/wiki/Relational_algebra" target="_blank" rel="noopener">relational algebra</a> (e.g. the theoretical underpinnings of SQL) and <a href="http://en.wikipedia.org/wiki/Datalog" target="_blank" rel="noopener">Datalog</a> provide highly expressive languages that have well-understood interpretations.</p><p>Both basic Datalog and relational algebra (even with recursion) are known to be monotonic. More specifically, computations expressed using a certain set of basic operators are known to be monotonic (selection, projection, natural join, cross product, union and recursive Datalog without negation), and non-monotonicity is introduced by using more advanced operators (negation, set difference, division, universal quantification, aggregation).</p><p>This means that computations expressed using a significant number of operators (e.g. map, filter, join, union, intersection) in those systems are logically monotonic; any computations using those operators are also monotonic and thus safe to run without coordination. Expressions that make use of negation and aggregation, on the other hand, are not safe to run without coordination.</p><p>It is important to realize the connection between non-monotonicity and operations that are expensive to perform in a distributed system. Specifically, both <em>distributed aggregation</em> and <em>coordination protocols</em> can be considered to be a form of negation. As Joe Hellerstein <a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2010/EECS-2010-90.pdf" target="_blank" rel="noopener">writes</a>:</p><blockquote><p>To establish the veracity of a negated predicate in a distributed setting, an evaluation strategy has to start “counting to 0” to determine emptiness, and wait until the distributed counting process has definitely terminated. Aggregation is the generalization of this idea.</p></blockquote><p>and:</p><blockquote><p>This idea can be seen from the other direction as well. Coordination protocols are themselves aggregations, since they entail voting: Two-Phase Commit requires unanimous votes, Paxos consensus requires majority votes, and Byzantine protocols require a 2/3 majority. Waiting requires counting.</p></blockquote><p>If, then we can express our computation in a manner in which it is possible to test for monotonicity, then we can perform a whole-program static analysis that detects which parts of the program are eventually consistent and safe to run without coordination (the monotonic parts) - and which parts are not (the non-monotonic ones).</p><p>Note that this requires a different kind of language, since these inferences are hard to make for traditional programming languages where sequence, selection and iteration are at the core. Which is why the Bloom language was designed.</p><h2 id="What-is-non-monotonicity-good-for"><a href="#What-is-non-monotonicity-good-for" class="headerlink" title="What is non-monotonicity good for?"></a>What is non-monotonicity good for?</h2><p>The difference between monotonicity and non-monotonicity is interesting. For example, adding two numbers is monotonic, but calculating an aggregation over two nodes containing numbers is not. What’s the difference? One of these is a computation (adding two numbers), while the other is an assertion (calculating an aggregate).</p><p>How does a computation differ from an assertion? Let’s consider the query “is pizza a vegetable?”. To answer that, we need to get at the core: when is it acceptable to infer that something is (or is not) true?</p><p>There are several acceptable answers, each corresponding to a different set of assumptions regarding the information that we have and the way we ought to act upon it - and we’ve come to accept different answers in different contexts.</p><p>In everyday reasoning, we make what is known as the <a href="http://en.wikipedia.org/wiki/Open_world_assumption" target="_blank" rel="noopener">open-world assumption</a>: we assume that we do not know everything, and hence cannot make conclusions from a lack of knowledge. That is, any sentence may be true, false or unknown.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                                OWA +             |  OWA +</span><br><span class="line">                                Monotonic logic   |  Non-monotonic logic</span><br><span class="line">Can derive P(true)      |   Can assert P(true)    |  Cannot assert P(true)</span><br><span class="line">Can derive P(false)     |   Can assert P(false)   |  Cannot assert P(true)</span><br><span class="line">Cannot derive P(true)   |   Unknown               |  Unknown</span><br><span class="line">or P(false)</span><br></pre></td></tr></table></figure><p>When making the open world assumption, we can only safely assert something we can deduce from what is known. Our information about the world is assumed to be incomplete.</p><p>Let’s first look at the case where we know our reasoning is monotonic. In this case, any (potentially incomplete) knowledge that we have cannot be invalidated by learning new knowledge. So if we can infer that a sentence is true based on some deduction, such as “things that contain two tablespoons of tomato paste are vegetables” and “pizza contains two tablespoons of tomato paste”, then we can conclude that “pizza is a vegetable”. The same goes for if we can deduce that a sentence is false.</p><p>However, if we cannot deduce anything - for example, the set of knowledge we have contains customer information and nothing about pizza or vegetables - then under the open world assumption we have to say that we cannot conclude anything.</p><p>With non-monotonic knowledge, anything we know right now can potentially be invalidated. Hence, we cannot safely conclude anything, even if we can deduce true or false from what we currently know.</p><p>However, within the database context, and within many computer science applications we prefer to make more definite conclusions. This means assuming what is known as the <a href="http://en.wikipedia.org/wiki/Closed_world_assumption" target="_blank" rel="noopener">closed-world assumption</a>: that anything that cannot be shown to be true is false. This means that no explicit declaration of falsehood is needed. In other words, the database of facts that we have is assumed to be complete (minimal), so that anything not in it can be assumed to be false.</p><p>For example, under the CWA, if our database does not have an entry for a flight between San Francisco and Helsinki, then we can safely conclude that no such flight exists.</p><p>We need one more thing to be able to make definite assertions: <a href="http://en.wikipedia.org/wiki/Circumscription_%28logic%29" target="_blank" rel="noopener">logical circumscription</a>. Circumscription is a formalized rule of conjecture. Domain circumscription conjectures that the known entities are all there are. We need to be able to assume that the known entities are all there are in order to reach a definite conclusion.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                                CWA +             |  CWA +</span><br><span class="line">                                Circumscription + |  Circumscription +</span><br><span class="line">                                Monotonic logic   |  Non-monotonic logic</span><br><span class="line">Can derive P(true)      |   Can assert P(true)    |  Can assert P(true)</span><br><span class="line">Can derive P(false)     |   Can assert P(false)   |  Can assert P(false)</span><br><span class="line">Cannot derive P(true)   |   Can assert P(false)   |  Can assert P(false)</span><br><span class="line">or P(false)</span><br></pre></td></tr></table></figure><p>In particular, non-monotonic inferences need this assumption. We can only make a confident assertion if we assume that we have complete information, since additional information may otherwise invalidate our assertion.</p><p>What does this mean in practice? First, monotonic logic can reach definite conclusions as soon as it can derive that a sentence is true (or false). Second, nonmonotonic logic requires an additional assumption: that the known entities are all there is.</p><p>So why are two operations that are on the surface equivalent different? Why is adding two numbers monotonic, but calculating an aggregation over two nodes not? Because the aggregation does not only calculate a sum but also asserts that it has seen all of the values. And the only way to guarantee that is to coordinate across nodes and ensure that the node performing the calculation has really seen all of the values within the system.</p><p>Thus, in order to handle non-monotonicity one needs to either use distributed coordination to ensure that assertions are made only after all the information is known or make assertions with the caveat that the conclusion can be invalidated later on.</p><p>Handling non-monotonicity is important for reasons of expressiveness. This comes down to being able to express non-monotone things; for example, it is nice to be able to say that the total of some column is X. The system must detect that this kind of computation  requires a global coordination boundary to ensure that we have seen all the entities.</p><p>Purely monotone systems are rare. It seems that most applications operate under the closed-world assumption even when they have incomplete data, and we humans are fine with that. When a database tells you that a direct flight between San Francisco and Helsinki does not exist, you will probably treat this as “according to this database, there is no direct flight”, but you do not rule out the possibility that that in reality such a flight might still exist.</p><p>Really, this issue only becomes interesting when replicas can diverge (e.g. during a partition or due to delays during normal operation). Then there is a need for a more specific consideration: whether the answer is based on just the current node, or the totality of the system.</p><p>Further, since nonmonotonicity is caused by making an assertion, it seems plausible that many computations can proceed for a long time and only apply coordination at the point where some result or assertion is passed to a 3rd party system or end user. Certainly it is not necessary for every single read and write operation within a system to enforce a total order, if those reads and writes are simply a part of a long running computation.</p><h2 id="The-Bloom-language"><a href="#The-Bloom-language" class="headerlink" title="The Bloom language"></a>The Bloom language</h2><p>The <a href="http://www.bloom-lang.net/" target="_blank" rel="noopener">Bloom language</a> is a language designed to make use of the CALM theorem. It is a Ruby DSL which has its formal basis in a temporal logic programming language called Dedalus.</p><p>In Bloom, each node has a database consisting of collections and lattices. Programs are expressed as sets of unordered statements which interact with collections (sets of facts) and lattices (CRDTs). Statements are order-independent by default, but one can also write non-monotonic functions.</p><p>Have a look at the <a href="http://www.bloom-lang.net/" target="_blank" rel="noopener">Bloom website</a> and <a href="https://github.com/bloom-lang/bud/tree/master/docs" target="_blank" rel="noopener">tutorials</a> to learn more about Bloom.</p><hr><h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h2><h4 id="The-CALM-theorem-confluence-analysis-and-Bloom"><a href="#The-CALM-theorem-confluence-analysis-and-Bloom" class="headerlink" title="The CALM theorem, confluence analysis and Bloom"></a>The CALM theorem, confluence analysis and Bloom</h4><p><a href="http://vimeo.com/53904989" target="_blank" rel="noopener">Joe Hellerstein’s talk @RICON 2012</a> is a good introduction to the topic, as is <a href="http://vimeo.com/45111940" target="_blank" rel="noopener">Neil Conway’s talk @Basho</a>. For Bloom in particular, see <a href="http://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2012/Bloom-Disorderly-Programming-for-a-Distributed-World" target="_blank" rel="noopener">Peter Alvaro’s talk@Microsoft</a>.</p><ul><li><a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2010/EECS-2010-90.pdf" target="_blank" rel="noopener">The Declarative Imperative: Experiences and Conjectures in Distributed Logic</a> - Hellerstein, 2010</li><li><a href="http://db.cs.berkeley.edu/papers/cidr11-bloom.pdf" target="_blank" rel="noopener">Consistency Analysis in Bloom: a CALM and Collected Approach</a> - Alvaro et al., 2011</li><li><a href="http://db.cs.berkeley.edu/papers/UCB-lattice-tr.pdf" target="_blank" rel="noopener">Logic and Lattices for Distributed Programming</a> - Conway et al., 2012</li><li><a href="http://db.cs.berkeley.edu/papers/datalog2011-dedalus.pdf" target="_blank" rel="noopener">Dedalus: Datalog in Time and Space</a> - Alvaro et al., 2011</li></ul><h4 id="CRDTs"><a href="#CRDTs" class="headerlink" title="CRDTs"></a>CRDTs</h4><p><a href="http://research.microsoft.com/apps/video/dl.aspx?id=153540" target="_blank" rel="noopener">Marc Shapiro’s talk @ Microsoft</a> is a good starting point for understanding CRDT’s.</p><ul><li><a href="http://hal.archives-ouvertes.fr/docs/00/39/79/81/PDF/RR-6956.pdf" target="_blank" rel="noopener">CRDTs: Consistency Without Concurrency Control</a> - Letitia et al., 2009</li><li><a href="http://hal.inria.fr/docs/00/55/55/88/PDF/techreport.pdf" target="_blank" rel="noopener">A comprehensive study of Convergent and Commutative Replicated Data Types</a>, Shapiro et al., 2011</li><li><a href="http://arxiv.org/pdf/1210.3368v1.pdf" target="_blank" rel="noopener">An Optimized conflict-free Replicated Set</a> - Bieniusa et al., 2012</li></ul><h4 id="Dynamo-PBS-optimistic-replication"><a href="#Dynamo-PBS-optimistic-replication" class="headerlink" title="Dynamo; PBS; optimistic replication"></a>Dynamo; PBS; optimistic replication</h4><ul><li><a href="http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf" target="_blank" rel="noopener">Dynamo: Amazon’s Highly Available Key-value Store</a> - DeCandia et al., 2007</li><li><a href="http://scholar.google.com/scholar?q=PNUTS:+Yahoo!&#39;s+Hosted+Data+Serving+Platform" target="_blank" rel="noopener">PNUTS: Yahoo!’s Hosted Data Serving Platform</a> - Cooper et al., 2008</li><li><a href="http://scholar.google.com/scholar?q=The+Bayou+Architecture%3A+Support+for+Data+Sharing+among+Mobile+Users" target="_blank" rel="noopener">The Bayou Architecture: Support for Data Sharing among Mobile Users</a> - Demers et al. 1994</li><li><a href="http://pbs.cs.berkeley.edu/pbs-vldb2012.pdf" target="_blank" rel="noopener">Probabilistically Bound Staleness for Practical Partial Quorums</a> - Bailis et al., 2012</li><li><a href="https://queue.acm.org/detail.cfm?id=2462076" target="_blank" rel="noopener">Eventual Consistency Today: Limitations, Extensions, and Beyond</a> - Bailis &amp; Ghodsi, 2013</li><li><a href="http://www.ysaito.com/survey.pdf" target="_blank" rel="noopener">Optimistic replication</a> - Saito &amp; Shapiro, 2005</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;五-Replication-weak-consistency-model-protocols&quot;&gt;&lt;a href=&quot;#五-Replication-weak-consistency-model-protocols&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="微服务理论文章阅读学习" scheme="https://jaychenfe.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%AE%BA%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>[译]Distributed systems for fun and profit_4复制</title>
    <link href="https://jaychenfe.github.io/2019/04/29/%5B%E8%AF%91%5DDistributed%20systems%20for%20fun%20and%20profit_4%E5%A4%8D%E5%88%B6/"/>
    <id>https://jaychenfe.github.io/2019/04/29/[译]Distributed systems for fun and profit_4复制/</id>
    <published>2019-04-29T17:32:04.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四-Replication-复制"><a href="#四-Replication-复制" class="headerlink" title="四. Replication 复制"></a>四. Replication 复制</h1><p>The replication problem is one of many problems in distributed systems. I’ve chosen to focus on it over other problems such as leader election, failure detection, mutual exclusion, consensus and global snapshots because it is often the part that people are most interested in. One way in which parallel databases are differentiated is in terms of their replication features, for example. Furthermore, replication provides a context for many subproblems, such as leader election, failure detection, consensus and atomic broadcast.</p><p>复制是分布式系统中非常关键的一个点。下面将会从leader election、failure detection、mutual exclusion、consensus及global snapshots这些大家关心的问题展开介绍。区别并行数据库的一种方式是更具复制集的特征。</p><p>Replication is a group communication problem. What arrangement and communication pattern gives us the performance and availability characteristics we desire? How can we ensure fault tolerance, durability and non-divergence in the face of network partitions and simultaneous node failure?</p><p>复制是一组通信的问题。当网络发生分区或者节点同时崩溃时，怎样保证系统的容错性、持久性和非发散性？</p><p>Again, there are many ways to approach replication. The approach I’ll take here just looks at high level patterns that are possible for a system with replication. Looking at this visually helps keep the discussion focused on the overall pattern rather than the specific messaging involved. My goal here is to explore the design space rather than to explain the specifics of each algorithm.</p><p>复制的方式有很多种，这里并不对每种算法进行详细的介绍，只是进行一个方法的汇总讨论</p><p>Let’s first define what replication looks like. We assume that we have some initial database, and that clients make requests which change the state of the database.</p><p>首先，到底什么是复制集呢？我们认为，当我们拥有初始数据库时，客户通过一定的请求操作会改变数据库的状态</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190430153210.png" alt=""></p><p>The arrangement and communication pattern can then be divided into several stages:</p><ol><li>(Request) The client sends a request to a server</li><li>(Sync) The synchronous portion of the replication takes place</li><li>(Response) A response is returned to the client</li><li>(Async) The asynchronous portion of the replication takes place</li></ol><p>This model is loosely based on <a href="https://www.google.com/search?q=understanding+replication+in+databases+and+distributed+systems" target="_blank" rel="noopener">this article</a>. Note that the pattern of messages exchanged in each portion of the task depends on the specific algorithm: I am intentionally trying to get by without discussing the specific algorithm.</p><p>Given these stages, what kind of communication patterns can we create? And what are the performance and availability implications of the patterns we choose?</p><p>这个时候的处理和通信模式罗分为下面几个阶段：</p><ul><li>（Request）客户向服务发送一个请求</li><li>（Sync）复制中的同步部分发生</li><li>（Responses）向客户返回答复</li><li>（Async）复制中的异步部分发生</li></ul><p>在这些阶段中，通信模式是怎样的呢？</p><h2 id="Synchronous-replication-同步复制"><a href="#Synchronous-replication-同步复制" class="headerlink" title="Synchronous replication 同步复制"></a>Synchronous replication 同步复制</h2><p>The first pattern is synchronous replication (also known as active, or eager, or push, or pessimistic replication). Let’s draw what that looks like:</p><p><strong>同步复制：悲观复制，接受到客户端的请求之后，各节点先同步并返回到此节点之后，再响应客户端</strong></p><p><img src="C:\Users\TOUCH-P-024\AppData\Roaming\Typora\typora-user-images\1556609619611.png" alt="1556609619611"></p><p>Here, we can see three distinct stages: first, the client sends the request. Next, what we called the synchronous portion of replication takes place. The term refers to the fact that the client is blocked - waiting for a reply from the system.</p><p>同步复制中有三个明确的阶段：首先，用户发送请求；接着，同步部分发生。这个时候用户是阻塞的-等待系统的回复的。</p><p>During the synchronous phase, the first server contacts the two other servers and waits until it has received replies from all the other servers. Finally, it sends a response to the client informing it of the result (e.g. success or failure).</p><p>在同步阶段，第一个服务器和另两个服务器之间进行通信，并且等到来自这两个服务器的回复后，最后将一个统一的结果告知客户（成功还是失败）</p><p>All this seems straightforward. What can we say of this specific arrangement of communication patterns, without discussing the details of the algorithm during the synchronous phase? First, observe that this is a write N - of - N approach: before a response is returned, it has to be seen and acknowledged by every server in the system.</p><p>可以观察到，同步复制必须要当结果被所有的服务节点认可后才会返回一个值给客户</p><p>From a performance perspective, this means that the system will be as fast as the slowest server in it. The system will also be very sensitive to changes in network latency, since it requires every server to reply before proceeding.</p><p>从性能的角度来看，这意味着系统最快的反应时间取决于最慢的一个服务节点。这样的系统会对网络延迟非常敏感。</p><p>Given the N-of-N approach, the system cannot tolerate the loss of any servers. When a server is lost, the system can no longer write to all the nodes, and so it cannot proceed. It might be able to provide read-only access to the data, but modifications are not allowed after a node has failed in this design.</p><p>这就是N-of-N write架构，只有等所有N个节点成功写，才返回写成功给client。系统将不能忍受任一个服务节点发生数据丢失的情况。一旦有一个服务节点发生丢失，系统将不允许对数据进行写操作。同时修改操作也不会被允许，只会允许进行读操作</p><p>This arrangement can provide very strong durability guarantees: the client can be certain that all N servers have received, stored and acknowledged the request when the response is returned. In order to lose an accepted update, all N copies would need to be lost, which is about as good a guarantee as you can make.</p><p>这样能提供一个非常长的持久性保证：客户能够确保所有的服务节点都接收到了请求，并且对请求做出响应。只有当所有节点上的副本都丢失了，更新的数据才会丢失</p><h2 id="Asynchronous-replication-异步复制"><a href="#Asynchronous-replication-异步复制" class="headerlink" title="Asynchronous replication 异步复制"></a>Asynchronous replication 异步复制</h2><p>Let’s contrast this with the second pattern - asynchronous replication (a.k.a. passive replication, or pull replication, or lazy replication). As you may have guessed, this is the opposite of synchronous replication:</p><p><strong>异步复制：积极复制、拉复制、惰性复制，接受到客户端的请求之后，先响应客户端，再进行各节点先同步并且返回到此节点</strong></p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190430154849.png" alt=""></p><p>Here, the master (/leader / coordinator) immediately sends back a response to the client. It might at best store the update locally, but it will not do any significant work synchronously and the client is not forced to wait for more rounds of communication to occur between the servers.</p><p>这里，主节点先快速响应客户端。先局部快速存储更新，但是不会严格同步。客户端不需要等待所有结果完成后才能收到回复</p><p>At some later stage, the asynchronous portion of the replication task takes place. Here, the master contacts the other servers using some communication pattern, and the other servers update their copies of the data. The specifics depend on the algorithm in use.</p><p>在接下来的阶段，复制的异步部分发生。主节点利用通信模式对其它服务节点进行交流，接着其它节点对复制集进行更新。具体实施过程依赖于所选择的算法</p><p>What can we say of this specific arrangement without getting into the details of the algorithm? Well, this is a write 1 - of - N approach: a response is returned immediately and update propagation occurs sometime later.</p><p>那么抽象而言，<strong>异步复制就是一个 write 1 - of - N 的架构：立刻响应客户端，再接着进行各节点的更新同步</strong></p><p>From a performance perspective, this means that the system is fast: the client does not need to spend any additional time waiting for the internals of the system to do their work. The system is also more tolerant of network latency, since fluctuations in internal latency do not cause additional waiting on the client side.</p><p>从性能的角度来看，这样的系统通常更快，因为客户端不需要等到所有的节点同步完成后才得到响应。同时这样的系统对于网络延迟的容忍性更高。</p><p>This arrangement can only provide weak, or probabilistic durability guarantees. If nothing goes wrong, the data is eventually replicated to all N machines. However, if the only server containing the data is lost before this can take place, the data is permanently lost.</p><p>这样的操作只能提供一个弱的，某种程度上的持久性保证。<strong>如果没有任何故障发生，数据最终在N台机器上的复制集都会保持一致。但一旦数据只在一台服务器上，这个服务器发生数据丢失的话，数据将会永久丢失</strong>（持久性：对数据所做的更改能够永久保存下来）</p><p>Given the 1-of-N approach, the system can remain available as long as at least one node is up (at least in theory, though in practice the load will probably be too high). A purely lazy approach like this provides no durability or consistency guarantees; you may be allowed to write to the system, but there are no guarantees that you can read back what you wrote if any faults occur.</p><p><strong>在异步复制中，系统只需要得到一个节点的响应就能保证它的可用性</strong>（理论上是这样，但是在现实中，实践中负载通常会很高，单位时间内承受的工作量大）。<strong>像这样的惰性复制不会保证持久性和一致性</strong>：你能够对数据进行写操作，但是一旦错误发生，不一定保证你能读到你所写的东西</p><p>Finally, it’s worth noting that passive replication cannot ensure that all nodes in the system always contain the same state. If you accept writes at multiple locations and do not require that those nodes synchronously agree, then you will run the risk of divergence: reads may return different results from different locations (particularly after nodes fail and recover), and global constraints (which require communicating with everyone) cannot be enforced.</p><p>积极复制不能保证系统中所有的节点都能保持在同样的状态。如果你在多个机器进行写操作，并且又不要求这些节点同步做出确定，那么很有可能造成数据不一致的结果：从不同位置上读取数据可能返回的是不同的值（尤其是节点发生故障后恢复之后），并且不能进行强制全局限制（需要各个节点进行通信）    </p><p>I haven’t really mentioned the communication patterns during a read (rather than a write), because the pattern of reads really follows from the pattern of writes: during a read, you want to contact as few nodes as possible. We’ll discuss this a bit more in the context of quorums.</p><p>We’ve only discussed two basic arrangements and none of the specific algorithms. Yet we’ve been able to figure out quite a bit of about the possible communication patterns as well as their performance, durability guarantees and availability characteristics.</p><h2 id="An-overview-of-major-replication-approaches-主要的复制方法"><a href="#An-overview-of-major-replication-approaches-主要的复制方法" class="headerlink" title="An overview of major replication approaches 主要的复制方法"></a>An overview of major replication approaches 主要的复制方法</h2><p>Having discussed the two basic replication approaches: synchronous and asynchronous replication, let’s have a look at the major replication algorithms.</p><p>刚刚讨论了什么是同步复制和异步复制，现在来介绍相关的主要的复制算法</p><p>There are many, many different ways to categorize replication techniques. The second distinction (after sync vs. async) I’d like to introduce is between:</p><ul><li>Replication methods that prevent divergence (single copy systems) and</li><li>Replication methods that risk divergence (multi-master systems)</li></ul><p><strong>两种复制方法</strong>：</p><ul><li><strong>single copy systems 单拷贝系统：阻止数据不一致的复制方法</strong></li><li><strong>multi-master systems 多master系统：有数据不一致风险的复制方法</strong></li></ul><p>The first group of methods has the property that they “behave like a single system”. In particular, when partial failures occur, the system ensures that only a single copy of the system is active. Furthermore, the system ensures that the replicas are always in agreement. This is known as the consensus problem.</p><p><strong>单拷贝系统复制方法</strong>表现的形式像单个系统一样。当局部发生故障时，系统保证只有一个系统单副本处于活跃状态。进一步说，就是系统保证复制集永远处于一致的状态。</p><p>Several processes (or computers) achieve consensus if they all agree on some value. More formally:</p><ol><li>Agreement: Every correct process must agree on the same value.</li><li>Integrity: Every correct process decides at most one value, and if it decides some value, then it must have been proposed by some process.</li><li>Termination: All processes eventually reach a decision.</li><li>Validity: If all correct processes propose the same value V, then all correct processes decide V.</li></ol><p>服务进程统一统一某个值后才达成一致性，一致性定义具体如下：</p><ul><li>Agreement：所有正确进程必须做出相同的决议</li><li>Integrity：每个正确的进程最多承认一个值，一旦一个进程决定了某一个值，那么这个值肯定是被其它进程提出的</li><li>Termination：所有正确的进程最终都会同意某个值</li><li>Validity：如果所有正确的进程提出相同的值V，那么所有正确的节点进程达成一致，承认值V</li></ul><p>Mutual exclusion, leader election, multicast and atomic broadcast are all instances of the more general problem of consensus. Replicated systems that maintain single copy consistency need to solve the consensus problem in some way.</p><p>leader election、failure detection、mutual exclusion、consensus及global snapshots这些都会涉及到一致性问题。保证单拷贝一致性的复制系统需要解决这些问题</p><p>The replication algorithms that maintain single-copy consistency include:</p><ul><li>1n messages (asynchronous primary/backup)</li><li>2n messages (synchronous primary/backup)</li><li>4n messages (2-phase commit, Multi-Paxos)</li><li>6n messages (3-phase commit, Paxos with repeated leader election)</li></ul><p><strong>单拷贝一致性复制算法包括：</strong><br> （这些算法的容错性都各自不同。根据执行过程中的信息交互数量对这些算法进行了一个分类）</p><ul><li><strong>1n messages（异步 主/备）</strong></li><li><strong>2n messages（同步 主/备）</strong></li><li><strong>4n messages（2阶段提交，多-Paxos）</strong></li><li><strong>6n messages（3阶段提交，进行leader选举的Paxos）</strong></li></ul><p>These algorithms vary in their fault tolerance (e.g. the types of faults they can tolerate). I’ve classified these simply by the number of messages exchanged during an execution of the algorithm, because I think it is interesting to try to find an answer to the question “what are we buying with the added message exchanges?”</p><p>The diagram below, adapted from Ryan Barret at <a href="https://snarfed.org/transactions_across_datacenters_io.html" target="_blank" rel="noopener">Google</a>, describes some of the aspects of the different options:</p><p>Ryan Barret对这些算法进行了一个不同层面的比较：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190430161434.png" alt=""></p><p>The consistency, latency, throughput, data loss and failover characteristics in the diagram above can really be traced back to the two different replication methods: synchronous replication (e.g. waiting before responding) and asynchronous replication. When you wait, you get worse performance but stronger guarantees. The throughput difference between 2PC and quorum systems will become apparent when we discuss partition (and latency) tolerance.</p><p>上图中从一致性、延迟性、吞吐量、数据丢失、失败等特征通过对同步和异步复制过程来对这些算法进行了一个比较。当你处于等待状态时，系统性能不高但是有高保证。</p><p>In that diagram, algorithms enforcing weak (/eventual) consistency are lumped up into one category (“gossip”). However, I will discuss replication methods for weak consistency - gossip and (partial) quorum systems - in more detail. The “transactions” row really refers more to global predicate evaluation, which is not supported in systems with weak consistency (though local predicate evaluation can be supported).</p><p>在这个图中，算法保证低一致性（最终一致性）都集中在一种类型（gossip）上。这一节不讨论低一致性。（The “transactions” row really refers more to global predicate evaluation, which is not supported in systems with weak consistency (though local predicate evaluation can be supported谓词运算：True or False+运算操作）</p><p>It is worth noting that systems enforcing weak consistency requirements have fewer generic algorithms, and more techniques that can be selectively applied. Since systems that do not enforce single-copy consistency are free to act like distributed systems consisting of multiple nodes, there are fewer obvious objectives to fix and the focus is more on giving people a way to reason about the characteristics of the system that they have.</p><p><strong>弱一致性通用的算法很少，一般都是根据需求选择。当系统不再强制要求单拷贝一致性时，它会更加灵活，表现得更加像分布式系统。</strong></p><p>For example:</p><ul><li>Client-centric consistency models attempt to provide more intelligible consistency guarantees while allowing for divergence.</li><li>CRDTs (convergent and commutative replicated datatypes) exploit semilattice properties (associativity, commutativity, idempotency) of certain state and operation-based data types.</li><li>Confluence analysis (as in the Bloom language) uses information regarding the monotonicity of computations to maximally exploit disorder.</li><li>PBS (probabilistically bounded staleness) uses simulation and information collected from a real world system to characterize the expected behavior of partial quorum systems.</li></ul><p>I’ll talk about all of these a bit  further on, first; let’s look at the replication algorithms that maintain single-copy consistency.</p><p>例如：</p><ul><li>客户端为中心的一致性模型当发生数据不一致的时候，会尝试提供更易于理解的一致性保证</li><li>CRDTs（一致复制集数据类型）：一种拥有结合性、交换性、幂等性的操作数据类型</li><li>整合分析（如在Bloom语言中）使用关于计算的单调性的信息来最大限度地利用无序。</li><li>PBS（probabilistically bounded staleness）使用仿真和从真实世界系统收集的信息来刻画部分仲裁系统的预期行为。</li></ul><p>后面会进行更深入的讨论。第四节主要关注单拷贝一致性的复制算法</p><h2 id="Primary-backup-replication-主备复制"><a href="#Primary-backup-replication-主备复制" class="headerlink" title="Primary/backup replication 主备复制"></a>Primary/backup replication 主备复制</h2><p>Primary/backup replication (also known as primary copy replication master-slave replication or log shipping) is perhaps the most commonly used replication method, and the most basic algorithm. All updates are performed on the primary, and a log of operations (or alternatively, changes) is shipped across the network to the backup replicas. There are two variants:</p><ul><li>asynchronous primary/backup replication and</li><li>synchronous primary/backup replication</li></ul><p><strong>主备复制（主从复制、日志传输复制）是最常用的复制算法，也是最基本的复制算法。所有的更新都在主节点上进行，然后通过网络传送日志操作到其他节点副本中。</strong>这里有两种类型：</p><ul><li><strong>异步主从复制：只需一条信息（更新）</strong></li><li><strong>同步主从复制：需要两条信息（更新+确定收到）</strong></li></ul><p>The synchronous version requires two messages (“update” + “acknowledge receipt”) while the asynchronous version could run with just one (“update”).</p><p>P/B is very common. For example, by default MySQL replication uses the asynchronous variant. MongoDB also uses P/B (with some additional procedures for failover). All operations are performed on one master server, which serializes them to a local log, which is then replicated asynchronously to the backup servers.</p><p><strong>主从复制例子：MySQL（异步）、MongoDB（有一些额外的故障备援方案）。所有的操作都在主服务器上进行，连载操作的日志信息然后异步更新到其它的备份节点中</strong></p><p>As we discussed earlier in the context of asynchronous replication, any asynchronous replication algorithm can only provide weak durability guarantees. In MySQL replication this manifests as replication lag: the asynchronous backups are always at least one operation behind the primary. If the primary fails, then the updates that have not yet been sent to the backups are lost.</p><p>像之前讨论的异步复制中，任何异步复制的算法都只能保证弱持久性。在MySQL复制中它的表现形式为复制滞后：异步复制的节点备份通常在主节点操作之后，一旦主机发生故障，数据更新日志可能发生丢失</p><p>The synchronous variant of primary/backup replication ensures that writes have been stored on other nodes before returning back to the client - at the cost of waiting for responses from other replicas. However, it is worth noting that even this variant can only offer weak guarantees. Consider the following simple failure scenario:</p><ul><li>the primary receives a write and sends it to the backup</li><li>the backup persists and ACKs the write</li><li>and then primary fails before sending ACK to the client</li></ul><p><strong>主从复制的同步类型能够保证写操作在返回消息给客户端之前，每个节点上都会存储写信息，同时带来的副作用是需要等待复制的时间。</strong>但是尽管这种同步类型的主从复制系统提供的是弱保证，也没有什么影响。思考下面这些失败的场景案例：</p><ul><li>主节点收到写操作，并且将这个命令发送给从节点</li><li>从节点收到并且对这个写操作做出命令正确应答的回应（ACKs）</li><li>主节点在发送ACK（命令正确应答）给客户端之前发生故障</li></ul><p>The client now assumes that the commit failed, but the backup committed it; if the backup is promoted to primary, it will be incorrect. Manual cleanup may be needed to reconcile the failed primary or divergent backups.</p><p>这个时候客户端会猜测这次提交失败了，但是其实从节点已经正确提交了；如果备份节点提交了，但是主节点没有提交，即备份节点比主节点超前了，这样是错误的。这种矛盾需要进行协调</p><p>I am simplifying here of course. While all primary/backup replication algorithms follow the same general messaging pattern, they differ in their handling of failover, replicas being offline for extended periods and so on. However, it is not possible to be resilient to inopportune failures of the primary in this scheme.</p><p>之前提到过，系统都会有自己的失效备援操作，但是当主节点在这种场景下发生故障，系统是无法进行复原的</p><p>What is key in the log-shipping / primary/backup based schemes is that they can only offer a best-effort guarantee (e.g. they are susceptible to lost updates or incorrect updates if nodes fail at inopportune times). Furthermore, P/B schemes are susceptible to split-brain, where the failover to a backup kicks in due to a temporary network issue and causes both the primary and backup to be active at the same time.</p><p><strong>主从复制中还有一个重要的关键点：日志传输。日志传输使得主从复制只能保证尽可能的正确，如果节点在不适宜的时间失败，可能会导致更新失败或数据丢失</strong></p><p>To prevent inopportune failures from causing consistency guarantees to be violated; we need to add another round of messaging, which gets us the two phase commit protocol (2PC).</p><p>为了防止主从复制的不足，需要多加一轮消息传送认证，因此需要两个阶段提交协议（2PC）</p><h2 id="Two-phase-commit-2PC-两阶段提交"><a href="#Two-phase-commit-2PC-两阶段提交" class="headerlink" title="Two phase commit (2PC) 两阶段提交"></a>Two phase commit (2PC) 两阶段提交</h2><p><a href="http://en.wikipedia.org/wiki/Two-phase_commit_protocol" target="_blank" rel="noopener">Two phase commit</a> (2PC) is a protocol used in many classic relational databases. For example, MySQL Cluster (not to be confused with the regular MySQL) provides synchronous replication using 2PC. The diagram below illustrates the message flow:</p><p>两阶段提交（2PC）协议是关系数据库中最经典的一种协议。例如在MySQL集群中，就利用2PC协议来进行同步复制。下图中阐述了该复制过程中信息流的变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ Coordinator ] -&gt; OK to commit?     [ Peers ]</span><br><span class="line">                &lt;- Yes / No</span><br><span class="line"></span><br><span class="line">[ Coordinator ] -&gt; Commit / Rollback [ Peers ]</span><br><span class="line">                &lt;- ACK</span><br></pre></td></tr></table></figure><p>In the first phase (voting), the coordinator sends the update to all the participants. Each participant processes the update and votes whether to commit or abort. When voting to commit, the participants store the update onto a temporary area (the write-ahead log). Until the second phase completes, the update is considered temporary.</p><p>在第一个表决阶段（voting），协调者向所有的参与者发送更新消息。每一个参与者处理更新操作并表决是否提交或是终止，当表决结果是提交时，这些参与者实际上会将更新放在一个暂时区域（写操作日志头）中，这些更新始终都是暂时的，直到第二个阶段完成</p><p>In the second phase (decision), the coordinator decides the outcome and informs every participant about it. If all participants voted to commit, then the update is taken from the temporary area and made permanent.</p><p>在第二个决策阶段（decision），协调者决定最后的结果，并且告知所有的参与者。如果所有的参与者第一阶段的表决都是提交，那么更新操作才会进行持久化。</p><p>Having a second phase in place before the commit is considered permanent is useful, because it allows the system to roll back an update when a node fails. In contrast, in primary/backup (“1PC”), there is no step for rolling back an operation that has failed on some nodes and succeeded on others, and hence the replicas could diverge.</p><p>在提交被认为是永久的之前，第二个阶段是非常有用的，因为它允许系统在节点失败时回滚更新。相反，在主/备份（“1PC”）中，没有回滚步骤，若发生在某些节点上失败而在其他节点上成功的情况，副本可能会出现分歧。</p><p>2PC is prone to blocking, since a single node failure (participant or coordinator) blocks progress until the node has recovered. Recovery is often possible thanks to the second phase, during which other nodes are informed about the system state. Note that 2PC assumes that the data in stable storage at each node is never lost and that no node crashes forever. Data loss is still possible if the data in the stable storage is corrupted in a crash.</p><p>2PC容易造成拥塞，因为一旦一个节点失败，无论是协调者或是参与者，都会导致进程拥堵，直到节点修复。修复过程一般需要依靠第二个阶段中其它节点被告知系统状态。<strong>2PC是假设各个节点中的数据处于一个稳定的存储状态中，数据永远不会丢失并且不会发生节点崩溃。但是数据就算存储稳定，仍然会发生丢失如果发生崩溃的现象</strong></p><p>The details of the recovery procedures during node failures are quite complicated so I won’t get into the specifics. The major tasks are ensuring that writes to disk are durable (e.g. flushed to disk rather than cached) and making sure that the right recovery decisions are made (e.g. learning the outcome of the round and then redoing or undoing an update locally).</p><p>节点故障期间恢复过程非常复杂，因此我不想详细介绍。主要任务是确保对磁盘的写入是持久的（例如，刷新到磁盘而不是缓存），并确保做出正确的恢复决策（例如，得到回合的结果，然后在本地重做或撤消更新）</p><p>As we learned in the chapter regarding CAP, 2PC is a CA - it is not partition tolerant. The failure model that 2PC addresses does not include network partitions; the prescribed way to recover from a node failure is to wait until the network partition heals. There is no safe way to promote a new coordinator if one fails; rather a manual intervention is required. 2PC is also fairly latency-sensitive, since it is a write N-of-N approach in which writes cannot proceed until the slowest node acknowledges them.</p><p>正如我们在介绍CAP的章节中了解到的，2PC是一个CA算法，它没有分区容忍。2PC的故障模型中不包括网络分区；从节点故障恢复的指定方法是等待网络分区恢复。如果一个协调员失败了，就没有安全的方法来生成一个新的协调员；相反，需要人工干预。2PC还相当容易延迟，因为它是一种N对N的写方法，在最慢的节点确认之前，写操作无法继续。</p><p>2PC strikes a decent balance between performance and fault tolerance, which is why it has been popular in relational databases. However, newer systems often use a partition tolerant consensus algorithm, since such an algorithm can provide automatic recovery from temporary network partitions as well as more graceful handling of increased between-node latency.</p><p>2PC在性能和容错之间取得了相当好的平衡，这就是它在关系数据库中流行的原因。（因为失败了有回滚吗？？？）但是，较新的系统通常使用允许分区的一致性算法，因为这样的算法可以自动恢复由于临时网络分区造成的故障，以及能够对增加的节点间延迟时间进行更好的处理</p><p>Let’s look at partition tolerant consensus algorithms next.</p><p>接着来看分区容忍共识算法</p><h2 id="Partition-tolerant-consensus-algorithms-分区容忍一致性算法"><a href="#Partition-tolerant-consensus-algorithms-分区容忍一致性算法" class="headerlink" title="Partition tolerant consensus algorithms 分区容忍一致性算法"></a>Partition tolerant consensus algorithms 分区容忍一致性算法</h2><p>Partition tolerant consensus algorithms are as far as we’re going to go in terms of fault-tolerant algorithms that maintain single-copy consistency. There is a further class of fault tolerant algorithms: algorithms that tolerate <a href="http://en.wikipedia.org/wiki/Byzantine_fault_tolerance" target="_blank" rel="noopener">arbitrary (Byzantine) faults</a>; these include nodes that fail by acting maliciously. Such algorithms are rarely used in commercial systems, because they are more expensive to run and more complicated to implement - and hence I will leave them out.</p><p>在保证单拷贝一致性中，考虑分区容忍一致性算法是我们将要讨论的内容。还有一类容错算法：允许任意（拜占庭式）错误的算法；这些算法来处理恶意操作导致节点失败的情况。这种算法很少在商业系统中使用，因为它们运行起来更昂贵，实现起来也更复杂——因此我将把它们排除在外。</p><p>When it comes to partition tolerant consensus algorithms, the most well-known algorithm is the Paxos algorithm. It is, however, notoriously difficult to implement and explain, so I will focus on Raft, a recent (~early 2013) algorithm designed to be easier to teach and implement. Let’s first take a look at network partitions and the general characteristics of partition tolerant consensus algorithms.</p><p><strong>涉及到分区容忍一致性算法时，最著名的算法是Paxos算法</strong>。然而，众所周知，它很难实现和解释，所以我将重点关注Raft，这是一种最近（2013年初）的算法，旨在更易于教学和实现。让我们首先看一下网络分区和允许分区的共识算法的一般特性。</p><h3 id="What-is-a-network-partition-什么是网络分区？"><a href="#What-is-a-network-partition-什么是网络分区？" class="headerlink" title="What is a network partition?什么是网络分区？"></a>What is a network partition?什么是网络分区？</h3><p>A network partition is the failure of a network link to one or several nodes. The nodes themselves continue to stay active, and they may even be able to receive requests from clients on their side of the network partition. As we learned earlier - during the discussion of the CAP theorem - network partitions do occur and not all systems handle them gracefully.</p><p><strong>网络分区是指到一个或多个节点之间的网络链接失败。节点本身继续保持活动状态，甚至可以从网络分区的客户端接收请求</strong>。正如我们之前在讨论CAP定理中讨论到的，当网络分区发生后，并不是所有系统都能很好地处理它们。</p><p>Network partitions are tricky because during a network partition, it is not possible to distinguish between a failed remote node and the node being unreachable. If a network partition occurs but no nodes fail, then the system is divided into two partitions which are simultaneously active. The two diagrams below illustrate how a network partition can look similar to a node failure.</p><p>网络分区很棘手，因为<strong>在网络分区期间，无法区分远程节点是发生了故障还是无法访问</strong>。如果一个网络分区出现但没有节点失败，那么系统将被划分为两个同时处于活动状态的分区。下面的两个图说明了网络分区看起来如何类似于节点故障。</p><p>A system of 2 nodes, with a failure vs. a network partition:</p><p>下图展示了由两个节点组成的系统。网络分区VS存在故障：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190430164725.png" alt=""></p><p>A system that enforces single-copy consistency must have some method to break symmetry: otherwise, it will split into two separate systems, which can diverge from each other and can no longer maintain the illusion of a single copy.</p><p>一个强制实现单一拷贝一致性的系统必须有某种方法来打破对称性：否则，它将分裂成两个独立的系统，这两个系统可以彼此分离，并且不能再保持单一拷贝的假象。</p><p>Network partition tolerance for systems that enforce single-copy consistency requires that during a network partition, only one partition of the system remains active since during a network partition it is not possible to prevent divergence (e.g. CAP theorem).</p><p><strong>对于强制执行单一拷贝一致性的系统，网络分区容忍要求在网络分区期间，只有一个系统分区保持活跃状态，因为在网络分区不能保证数据不发生分歧（CAP定理）</strong></p><h3 id="Majority-decisions-主要决策"><a href="#Majority-decisions-主要决策" class="headerlink" title="Majority decisions 主要决策"></a>Majority decisions 主要决策</h3><p>This is why partition tolerant consensus algorithms rely on a majority vote. Requiring a majority of nodes - rather than all of the nodes (as in 2PC) - to agree on updates allows a minority of the nodes to be down, or slow, or unreachable due to a network partition. As long as <code>(N/2 + 1)-of-N</code> nodes are up and accessible, the system can continue to operate.</p><p><strong>分区容忍一致性算法需要多数的投票</strong> </p><p>不同于2PC算法需要所有的节点都达到一致，这里只需要大多数节点能够同意更新并且容许少部分节点宕机、慢或者由于网络分区而无法接触，这样系统仍然能够继续运行</p><p>Partition tolerant consensus algorithms use an odd number of nodes (e.g. 3, 5 or 7). With just two nodes, it is not possible to have a clear majority after a failure. For example, if the number of nodes is three, then the system is resilient to one node failure; with five nodes the system is resilient to two node failures.</p><p><strong>分区容忍一致性算法使用的是奇数节点（类似于3，5，7）</strong></p><p>如果使用2个节点的话，那么就难以对多数投票中的多数进行定义。举例说明：如果节点数量是3个，那么系统能够允许一个节点失败；如果节点数是5个，系统能够允许2个节点失败</p><p>When a network partition occurs, the partitions behave asymmetrically. One partition will contain the majority of the nodes. Minority partitions will stop processing operations to prevent divergence during a network partition, but the majority partition can remain active. This ensures that only a single copy of the system state remains active.</p><p>当发生网络分区时，各个区的表现是不一致的。一个区可能包含大多数节点。小部分区会停止程序运行操作来阻止网络分区带来的数据分歧，但多数区仍然保持活跃状态。这能保证系统中只有一个单副本是活跃的</p><p>Majorities are also useful because they can tolerate disagreement: if there is a perturbation or failure, the nodes may vote differently. However, since there can be only one majority decision, a temporary disagreement can at most block the protocol from proceeding (giving up liveness) but it cannot violate the single-copy consistency criterion (safety property).</p><p>因为系统能够允许存在不一致，使得多数节点仍然是可用的：如果有变动和失败发生，节点可能投票不一致。但由于只可能有一个多数决策存在，暂时的分歧最多可以阻止协议继续进行（放弃活跃性），但不能违反单一副本一致性标准（安全属性）</p><h3 id="Roles-角色"><a href="#Roles-角色" class="headerlink" title="Roles 角色"></a>Roles 角色</h3><p>There are two ways one might structure a system: all nodes may have the same responsibilities, or nodes may have separate, distinct roles.</p><p>构造一个系统，系统中所有的节点要么含有相同的目标，要么有明确的分工和扮演的角色</p><p>Consensus algorithms for replication generally opt for having distinct roles for each node. Having a single fixed leader or master server is an optimization that makes the system more efficient, since we know that all updates must pass through that server. Nodes that are not the leader just need to forward their requests to the leader.</p><p>复制的一致性算法通常会对每个节点分配不同的角色。一个系统中有一个固定的领导节点或者主服务能够使这个系统更加高效，所有的更新操作都要经过这个主服务。不是领导的节点只需要将它们的请求附送给领导节点</p><p>Note that having distinct roles does not preclude the system from recovering from the failure of the leader (or any other role). Just because roles are fixed during normal operation doesn’t mean that one cannot recover from failure by reassigning the roles after a failure (e.g. via a leader election phase). Nodes can reuse the result of a leader election until node failures and/or network partitions occur.</p><p>注意，明确的角色不代表系统中所有的节点一直扮演一个类型的角色。如果系统从节点失败中恢复过来，那么节点的角色可能会被从新分配，这个时候会存在一个领导节点选举的阶段。节点扮演它们的角色，到节点发生失败或者网络发生分区的时候，角色将又重新定义。</p><p>Both Paxos and Raft make use of distinct node roles. In particular, they have a leader node (“proposer” in Paxos) that is responsible for coordination during normal operation. During normal operation, the rest of the nodes are followers (“acceptors” or “voters” in Paxos).</p><p>无论是Paxos算法还是Raft算法，它们都有明确的节点分工。具体而言，它们都有一个领导节点leader node（在Paxos中被称为proposer），负责正常系统运行操作中的协调作用。在正常运行中，剩下的节点是跟随节点follows（Paxos中称为acceptors或者voters）</p><h3 id="Epochs-训练周期"><a href="#Epochs-训练周期" class="headerlink" title="Epochs 训练周期"></a>Epochs 训练周期</h3><p>Each period of normal operation in both Paxos and Raft is called an epoch (“term” in Raft). During each epoch only one node is the designated leader (a similar system is <a href="http://en.wikipedia.org/wiki/Japanese_era_name" target="_blank" rel="noopener">used in Japan</a> where era names change upon imperial succession).</p><p>无论是Paxos还是Raft算法中，正常运行的每一个阶段都被称为一个训练周期（Raft中被称为‘term’）。在每一个周期中，只有一个节点被标记为领导节点(Leader)</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190430175808.png" alt=""></p><p>After a successful election, the same leader coordinates until the end of the epoch. As shown in the diagram above (from the Raft paper), some elections may fail, causing the epoch to end immediately.</p><p>成功选举后，在这个周期中领导节点不变，直到下一次选举发生。如图所示，可能会存在选举失败的情况，这个时候会导致这个周期很快结束</p><p>Epochs act as a logical clock, allowing other nodes to identify when an outdated node starts communicating - nodes that were partitioned or out of operation will have a smaller epoch number than the current one, and their commands are ignored.</p><p>周期纪元表现形式想逻辑锁一样，它允许其它节点识别出一个过期节点何时开始通信-分区或不运行的节点相比于正常的节点，周期会落后，能被识别出来并且它们的需求就直接被忽略</p><h3 id="Leader-changes-via-duels-领导节点变化"><a href="#Leader-changes-via-duels-领导节点变化" class="headerlink" title="Leader changes via duels 领导节点变化"></a>Leader changes via duels 领导节点变化</h3><p>During normal operation, a partition-tolerant consensus algorithm is rather simple. As we’ve seen earlier, if we didn’t care about fault tolerance, we could just use 2PC. Most of the complexity really arises from ensuring that once a consensus decision has been made, it will not be lost and the protocol can handle leader changes as a result of a network or node failure.</p><p>在正常运行操作中，分区容忍一致性算法是很简单的。正如我们之前所说，如果我们不关心容错性，我们可以直接使用2PC算法。大部分情况下，算法复杂的原因就是因为我们需要保证一旦做出了一个一致性决策，它不能被丢失，并且有协议能够处理由于网络或节点崩溃带来的领导节点变化的情况</p><p>All nodes start as followers; one node is elected to be a leader at the start. During normal operation, the leader maintains a heartbeat which allows the followers to detect if the leader fails or becomes partitioned.</p><p>首先，刚开始的时候所有节点都是followers跟随者，然后其中一个节点被选举为leader领导者。在一个正常运行阶段，这个领导节点一直有心跳，允许其它跟随节点检测到它是否失败或者是被分区了</p><p>When a node detects that a leader has become non-responsive (or, in the initial case, that no leader exists), it switches to an intermediate state (called “candidate” in Raft) where it increments the term/epoch value by one, initiates a leader election and competes to become the new leader.</p><p>当一个节点检测到领导节点变得不响应时（或者，在最初的情况下，没有领导者存在），它会切换到一个中间状态（在raft中称为“候选人”），在这个状态中，它将周期纪元值增加一个，启动一个领导者选举，并竞争成为新的领导者</p><p>In order to be elected a leader, a node must receive a majority of the votes. One way to assign votes is to simply assign them on a first-come-first-served basis; this way, a leader will eventually be elected. Adding a random amount of waiting time between attempts at getting elected will reduce the number of nodes that are simultaneously attempting to get elected.</p><p>节点在投票过程中必须要获得多数投票才能成为一个领导节点。分配选票的最简单的一种方法是按先到先得的原则进行；这样，最终将选出一位领导节点。在选举过程中之间添加随机的等待时间将减少同时尝试当选的节点数</p><h3 id="Numbered-proposals-within-an-epoch-一个周期中的编号提案"><a href="#Numbered-proposals-within-an-epoch-一个周期中的编号提案" class="headerlink" title="Numbered proposals within an epoch 一个周期中的编号提案"></a>Numbered proposals within an epoch 一个周期中的编号提案</h3><p>During each epoch, the leader proposes one value at a time to be voted upon. Within each epoch, each proposal is numbered with a unique strictly increasing number. The followers (voters / acceptors) accept the first proposal they receive for a particular proposal number.</p><p>在每一个周期纪元中，领导节点会依次提出一个值，用来供以表决。在每个周期中，每个提案都有一个唯一的严格递增的数字编号。追随者（投票者/接受者）接受他们收到的针对特定提案编号的第一个提案</p><h3 id="Normal-operation-正常运行"><a href="#Normal-operation-正常运行" class="headerlink" title="Normal operation 正常运行"></a>Normal operation 正常运行</h3><p>During normal operation, all proposals go through the leader node. When a client submits a proposal (e.g. an update operation), the leader contacts all nodes in the quorum. If no competing proposals exist (based on the responses from the followers), the leader proposes the value. If a majority of the followers accept the value, then the value is considered to be accepted.</p><p>在正常运行中，所有的提案会经过领导节点。当一个客户端提交一个提案（例如：一个更新操作），这个领导节点会联系仲裁中的所有的节点。如果没有竞争提案（基于追随者的响应），领导节点会提出一个值。如果大多数追随者接受这个值，那么这个值就被认为是被接受的</p><p>Since it is possible that another node is also attempting to act as a leader, we need to ensure that once a single proposal has been accepted, its value can never change. Otherwise a proposal that has already been accepted might for example be reverted by a competing leader. Lamport states this as:</p><blockquote><p>P2: If a proposal with value <code>v</code> is chosen, then every higher-numbered proposal that is chosen has value <code>v</code>.</p></blockquote><p>由于另一个节点也可能试图充当领导者，因此我们需要确保一旦接受了一个建议，它的值就永远不会改变。否则，一个已经被接受的提议可能会被竞争领导的节点回复。Lamport描述如下：</p><ul><li>P2: 如果一个提议的值一旦被确定为v，任何更高编号的提议也会选择这个值</li></ul><p>Ensuring that this property holds requires that both followers and proposers are constrained by the algorithm from ever changing a value that has been accepted by a majority. Note that “the value can never change” refers to the value of a single execution (or run / instance / decision) of the protocol. A typical replication algorithm will run multiple executions of the algorithm, but most discussions of the algorithm focus on a single run to keep things simple. We want to prevent the decision history from being altered or overwritten.</p><p>确保追随者和提议者都不能改变已被大多数人接受的值。这里“值永远不能更改”是指协议的单个执行（或运行/实例/决策）的值。一个典型的复制算法将运行该算法的多个执行，但大多数关于该算法的讨论集中在一次运行上。我们希望防止更改或覆盖决策历史记录。</p><p>In order to enforce this property, the proposers must first ask the followers for their (highest numbered) accepted proposal and value. If the proposer finds out that a proposal already exists, then it must simply complete this execution of the protocol, rather than making its own proposal. Lamport states this as:</p><blockquote><p>P2b. If a proposal with value <code>v</code> is chosen, then every higher-numbered proposal issued by any proposer has value <code>v</code>.</p></blockquote><p>为了强制执行此属性，提案人必须首先向追随者询问他们（编号最高）接受的提案和值。如果提案人发现提案已经存在，那么它必须简单地完成协议的执行，而不是自己提出提案。Lamport描述如下：</p><ul><li>P2b. 如果一个提议的值一旦被确定为v，任何提议人发布的任何更高编号的提议都具有值v</li></ul><p>More specifically:</p><blockquote><p>P2c. For any <code>v</code> and <code>n</code>, if a proposal with value <code>v</code> and number <code>n</code> is issued [by a leader], then there is a set <code>S</code> consisting of a majority of acceptors [followers] such that either (a) no acceptor in <code>S</code> has accepted any proposal numbered less than <code>n</code>, or (b) <code>v</code> is the value of the highest-numbered proposal among all proposals numbered less than <code>n</code> accepted by the followers in <code>S</code>.</p></blockquote><p>更具体地说：</p><ul><li>P2c. 对于任何v和n，如果一个值为v编号为n的提案被[领导节点]发布，那么存在一个由大多数接受者[追随者]组成的集合S，其中，没有接受者接受编号比n小的提案，v是S中所有编号小于n的提案中编号最大的提案的值</li></ul><p>This is the core of the Paxos algorithm, as well as algorithms derived from it. The value to be proposed is not chosen until the second phase of the protocol. Proposers must sometimes simply retransmit a previously made decision to ensure safety (e.g. clause b in P2c) until they reach a point where they know that they are free to impose their own proposal value (e.g. clause a).</p><p>这是paxos算法的核心，也是从中派生出来的算法的核心。在协议的第二阶段之前，不会对建议的值进行选择。提案人有时必须简单地重新传输先前做出的决定，以确保安全（例如P2c中的条款b），直到他们知道自己可以自由地强加自己的提案值（例如条款a）</p><p>If multiple previous proposals exist, then the highest-numbered proposal value is proposed. Proposers may only attempt to impose their own value if there are no competing proposals at all.</p><p>如果存在多个以前的建议，则建议使用编号最高的建议值。只有在完全没有竞争性提案的情况下，提案人才能试图强加自己的值</p><p>To ensure that no competing proposals emerge between the time the proposer asks each acceptor about its most recent value, the proposer asks the followers not to accept proposals with lower proposal numbers than the current one.</p><p>为了确保在提案人向每个接受人询问其最新值时不会出现竞争性提案，提案人要求跟随者不要接受提案编号低于当前提案编号的提案</p><p>Putting the pieces together, reaching a decision using Paxos requires two rounds of communication:</p><p>把这些部分放在一起，使用Paxos算法做出决定需要两轮通信：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ Proposer ] -&gt; Prepare(n)                                [ Followers ]</span><br><span class="line">             &lt;- Promise(n; previous proposal number</span><br><span class="line">                and previous value if accepted a</span><br><span class="line">                proposal in the past)</span><br><span class="line"></span><br><span class="line">[ Proposer ] -&gt; AcceptRequest(n, own value or the value   [ Followers ]</span><br><span class="line">                associated with the highest proposal number</span><br><span class="line">                reported by the followers)</span><br><span class="line">                &lt;- Accepted(n, value)</span><br></pre></td></tr></table></figure><p>The prepare stage allows the proposer to learn of any competing or previous proposals. The second phase is where either a new value or a previously accepted value is proposed. In some cases - such as if two proposers are active at the same time (dueling); if messages are lost; or if a majority of the nodes have failed - then no proposal is accepted by a majority. But this is acceptable, since the decision rule for what value to propose converges towards a single value (the one with the highest proposal number in the previous attempt).</p><p>准备阶段允许提案人了解任何竞争或以前的提案。第二阶段是提出新值或先前接受的值。在某些情况下，例如，如果两个提议者同时处于活动状态（决斗）；如果消息丢失；或者如果大多数节点都失败，则多数人不会接受任何提议。但这是可以接受的，因为建议的值的决策规则收敛到一个值（上一次尝试中建议数最高的值）。</p><p>Indeed, according to the FLP impossibility result, this is the best we can do: algorithms that solve the consensus problem must either give up safety or liveness when the guarantees regarding bounds on message delivery do not hold. Paxos gives up liveness: it may have to delay decisions indefinitely until a point in time where there are no competing leaders, and a majority of nodes accept a proposal. This is preferable to violating the safety guarantees.</p><p>事实上，根据FLP不可能的结果，这是我们所能做的最好的：解决共识问题的算法必须在消息传递边界的保证不成立时放弃安全性或活跃性。Paxos放弃了活跃性：它可能不得不无限期地推迟决策，直到某个时间点没有竞争的领导者，并且大多数节点都接受了一个提议。这比违反安全保证更可取。</p><p>Of course, implementing this algorithm is much harder than it sounds. There are many small concerns which add up to a fairly significant amount of code even in the hands of experts. These are issues such as:</p><ul><li>practical optimizations:<ul><li>avoiding repeated leader election via leadership leases (rather than heartbeats)</li><li>avoiding repeated propose messages when in a stable state where the leader identity does not change</li></ul></li><li>ensuring that followers and proposers do not lose items in stable storage and that results stored in stable storage are not subtly corrupted (e.g. disk corruption)</li><li>enabling cluster membership to change in a safe manner (e.g. base Paxos depends on the fact that majorities always intersect in one node, which does not hold if the membership can change arbitrarily)</li><li>procedures for bringing a new replica up to date in a safe and efficient manner after a crash, disk loss or when a new node is provisioned</li><li>procedures for snapshotting and garbage collecting the data required to guarantee safety after some reasonable period (e.g. balancing storage requirements and fault tolerance requirements)</li></ul><p>Google’s <a href="http://research.google.com/archive/paxos_made_live.html" target="_blank" rel="noopener">Paxos Made Live</a> paper details some of these challenges.</p><p>当然，实现这个算法要比听起来困难得多。有许多小问题，即使是在专家的手中，加起来也相当可观的代码量。这些问题包括：</p><ul><li>实际优化：<br> – 通过领导权租赁（而不是心跳）避免重复的领导选举<br> – 避免在领导节点身份不变的稳定状态下重复建议消息</li><li>确保追随者和提议者不会丢失稳定存储中的项目，并且存储在稳定存储中的结果不会被损坏（例如磁盘损坏）。</li><li>允许集群成员以安全的方式进行更改（例如，基本Paxos依赖于一个事实：大多数成员总是在一个节点中相交，如果成员可以任意更改，那么这个节点就不起作用）</li><li>在崩溃、磁盘丢失或配置新节点后以安全有效的方式使新副本更新的过程</li><li>快照和垃圾收集程序：在一段合理的时间后，为确保安全所需的数据（例如，平衡存储要求和容错要求）</li></ul><p>谷歌的Paxos制作了实况文件，详细介绍了其中的一些挑战</p><h2 id="Partition-tolerant-consensus-algorithms-Paxos-Raft-ZAB"><a href="#Partition-tolerant-consensus-algorithms-Paxos-Raft-ZAB" class="headerlink" title="Partition-tolerant consensus algorithms: Paxos, Raft, ZAB"></a>Partition-tolerant consensus algorithms: Paxos, Raft, ZAB</h2><h2 id="分区容忍一致性算法：Paxos、Raft、ZAB"><a href="#分区容忍一致性算法：Paxos、Raft、ZAB" class="headerlink" title="分区容忍一致性算法：Paxos、Raft、ZAB"></a>分区容忍一致性算法：Paxos、Raft、ZAB</h2><p>Hopefully, this has given you a sense of how a partition-tolerant consensus algorithm works. I encourage you to read one of the papers in the further reading section to get a grasp of the specifics of the different algorithms.</p><p>这一节想让您了解了一个允许分区的共识算法是如何工作的。鼓励大家阅读下一阅读部分中的文章，以了解不同算法的具体情况。</p><p><em>Paxos</em>. Paxos is one of the most important algorithms when writing strongly consistent partition tolerant replicated systems. It is used in many of Google’s systems, including the <a href="http://research.google.com/archive/chubby.html" target="_blank" rel="noopener">Chubby lock manager</a> used by <a href="http://research.google.com/archive/bigtable.html" target="_blank" rel="noopener">BigTable</a>/<a href="http://research.google.com/pubs/pub36971.html" target="_blank" rel="noopener">Megastore</a>, the Google File System as well as <a href="http://research.google.com/archive/spanner.html" target="_blank" rel="noopener">Spanner</a>.</p><p>Paxos-是在编写强一致性的容错分区复制系统时最重要的算法之一。它被用于谷歌的许多系统，包括Bigtable/MegaStore使用的丰满版锁管理器、谷歌文件系统以及Spanner</p><p>Paxos is named after the Greek island of Paxos, and was originally presented by Leslie Lamport in a paper called “The Part-Time Parliament” in 1998. It is often considered to be difficult to implement, and there have been a series of papers from companies with considerable distributed systems expertise explaining further practical details (see the further reading). You might want to read Lamport’s commentary on this issue <a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/pubs.html#lamport-paxos" target="_blank" rel="noopener">here</a> and <a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/pubs.html#paxos-simple" target="_blank" rel="noopener">here</a>.</p><p>Paxos以希腊的帕克斯岛命名，最初由莱斯利·兰波特于1998年在一份名为“兼职议会”的论文中提出。它通常被认为是很难实现的，具有相当多分布式系统专业知识的公司的一系列论文对其具体实施的实际细节进行了进一步的解释（请参阅进一步阅读）</p><p>The issues mostly relate to the fact that Paxos is described in terms of a single round of consensus decision making, but an actual working implementation usually wants to run multiple rounds of consensus efficiently. This has led to the development of many <a href="http://en.wikipedia.org/wiki/Paxos_algorithm" target="_blank" rel="noopener">extensions on the core protocol</a> that anyone interested in building a Paxos-based system still needs to digest. Furthermore, there are additional practical challenges such as how to facilitate cluster membership change.</p><p>我们使用一轮共识决策来描述Paxos算法，但是实际的工作执行通常希望高效地运行多轮共识。这导致了核心协议上的许多扩展的开发，任何对构建基于Paxos的系统感兴趣的人仍然需要消化这些扩展。此外，还有一些额外的实际挑战，例如如何促进集群成员资格的改变。</p><p><em>ZAB</em>. ZAB - the Zookeeper Atomic Broadcast protocol is used in Apache Zookeeper. Zookeeper is a system which provides coordination primitives for distributed systems, and is used by many Hadoop-centric distributed systems for coordination (e.g. <a href="http://hbase.apache.org/" target="_blank" rel="noopener">HBase</a>, <a href="http://storm-project.net/" target="_blank" rel="noopener">Storm</a>, <a href="http://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>). Zookeeper is basically the open source community’s version of Chubby. Technically speaking atomic broadcast is a problem different from pure consensus, but it still falls under the category of partition tolerant algorithms that ensure strong consistency.</p><p>ZAB-在Apache ZooKeeper中使用了ZooKeeper原子广播协议。ZooKeeper是为分布式系统提供协调原语的系统，许多以Hadoop为中心的分布式系统（如HBase、Storm、Kafka）都使用它进行协调。ZooKeeper基本上是开源社区的丰满版本。从技术上讲，原子广播是一个不同于纯一致共识的问题，但它仍然属于保证强一致性的分区容忍算法范畴。</p><p><em>Raft</em>. Raft is a recent (2013) addition to this family of algorithms. It is designed to be easier to teach than Paxos, while providing the same guarantees. In particular, the different parts of the algorithm are more clearly separated and the paper also describes a mechanism for cluster membership change. It has recently seen adoption in <a href="https://github.com/coreos/etcd" target="_blank" rel="noopener">etcd</a> inspired by ZooKeeper.</p><p>Raft-Raft是最近（2013年）对该算法系列的一个补充。它被设计成比Paxos更容易教学，同时提供相同的保证。特别是算法的不同部分之间的分离更加清晰，本文还描述了一种集群成员关系变化的机制。它最近在受ZooKeeper启发的etcd中被采用。</p><h2 id="Replication-methods-with-strong-consistency-强一致性的复制方法"><a href="#Replication-methods-with-strong-consistency-强一致性的复制方法" class="headerlink" title="Replication methods with strong consistency 强一致性的复制方法"></a>Replication methods with strong consistency 强一致性的复制方法</h2><p>In this chapter, we took a look at replication methods that enforce strong consistency. Starting with a contrast between synchronous work and asynchronous work, we worked our way up to algorithms that are tolerant of increasingly complex failures. Here are some of the key characteristics of each of the algorithms:</p><p>在本章中，我们介绍强制实现强一致性的复制方法。从同步工作和异步工作之间的对比开始，我们了解能够容忍日益复杂的故障的算法。以下是每种算法的一些关键特性：</p><h4 id="Primary-Backup"><a href="#Primary-Backup" class="headerlink" title="Primary/Backup"></a>Primary/Backup</h4><ul><li>Single, static master</li><li>Replicated log, slaves are not involved in executing operations</li><li>No bounds on replication delay</li><li>Not partition tolerant</li><li>Manual/ad-hoc failover, not fault tolerant, “hot backup”</li></ul><p><strong>主/备算法</strong></p><ul><li>单，静态主机</li><li>复制的日志，从服务器不参与执行操作</li><li>复制延迟没有限制</li><li>不允许分区</li><li>手动/故障转移，不容错，“热备份”</li></ul><h4 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h4><ul><li>Unanimous vote: commit or abort</li><li>Static master</li><li>2PC cannot survive simultaneous failure of the coordinator and a node during a commit</li><li>Not partition tolerant, tail latency sensitive</li></ul><p><strong>2PC</strong></p><ul><li>一致表决：同意或放弃</li><li>静态主机</li><li>2PC在提交过程中无法承受协调器和节点的同时失败。</li><li>不允许分区，尾延迟敏感</li></ul><h4 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h4><ul><li>Majority vote</li><li>Dynamic master</li><li>Robust to n/2-1 simultaneous failures as part of protocol</li><li>Less sensitive to tail latency</li></ul><p><strong>Paxos</strong></p><ul><li>多数投票机制</li><li>动态主机</li><li>作为协议的一部分，对N/2-1同时故障具有鲁棒性</li><li>对尾延迟不太敏感</li></ul><h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h2><h4 id="Primary-backup-and-2PC"><a href="#Primary-backup-and-2PC" class="headerlink" title="Primary-backup and 2PC"></a>Primary-backup and 2PC</h4><ul><li><a href="http://scholar.google.com/scholar?q=Replication+techniques+for+availability" target="_blank" rel="noopener">Replication techniques for availability</a> - Robbert van Renesse &amp; Rachid Guerraoui, 2010</li><li><a href="http://research.microsoft.com/en-us/people/philbe/ccontrol.aspx" target="_blank" rel="noopener">Concurrency Control and Recovery in Database Systems</a></li></ul><h4 id="Paxos-1"><a href="#Paxos-1" class="headerlink" title="Paxos"></a>Paxos</h4><ul><li><a href="http://research.microsoft.com/users/lamport/pubs/lamport-paxos.pdf" target="_blank" rel="noopener">The Part-Time Parliament</a> - Leslie Lamport</li><li><a href="http://research.microsoft.com/users/lamport/pubs/paxos-simple.pdf" target="_blank" rel="noopener">Paxos Made Simple</a> - Leslie Lamport, 2001</li><li><a href="http://research.google.com/archive/paxos_made_live.html" target="_blank" rel="noopener">Paxos Made Live - An Engineering Perspective</a> - Chandra et al</li><li><a href="http://scholar.google.com/scholar?q=Paxos+Made+Practical" target="_blank" rel="noopener">Paxos Made Practical</a> - Mazieres, 2007</li><li><a href="http://groups.csail.mit.edu/tds/paxos.html" target="_blank" rel="noopener">Revisiting the Paxos Algorithm</a> - Lynch et al</li><li><a href="http://research.microsoft.com/lampson/58-Consensus/Acrobat.pdf" target="_blank" rel="noopener">How to build a highly available system with consensus</a> - Butler Lampson</li><li><a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/reconfiguration-tutorial.pdf" target="_blank" rel="noopener">Reconfiguring a State Machine</a> - Lamport et al - changing cluster membership</li><li><a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.20.4762" target="_blank" rel="noopener">Implementing Fault-Tolerant Services Using the State Machine Approach: a Tutorial</a> - Fred Schneider</li></ul><h4 id="Raft-and-ZAB"><a href="#Raft-and-ZAB" class="headerlink" title="Raft and ZAB"></a>Raft and ZAB</h4><ul><li><a href="https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf" target="_blank" rel="noopener">In Search of an Understandable Consensus Algorithm</a>, Diego Ongaro, John Ousterhout, 2013</li><li><a href="http://www.youtube.com/watch?v=YbZ3zDzDnrw" target="_blank" rel="noopener">Raft Lecture - User Study</a></li><li><a href="http://labs.yahoo.com/publication/a-simple-totally-ordered-broadcast-protocol/" target="_blank" rel="noopener">A simple totally ordered broadcast protocol</a> - Junqueira, Reed, 2008</li><li><a href="http://labs.yahoo.com/publication/zab-high-performance-broadcast-for-primary-backup-systems/" target="_blank" rel="noopener">ZooKeeper Atomic Broadcast</a> - Reed, 2011</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;四-Replication-复制&quot;&gt;&lt;a href=&quot;#四-Replication-复制&quot; class=&quot;headerlink&quot; title=&quot;四. Replication 复制&quot;&gt;&lt;/a&gt;四. Replication 复制&lt;/h1&gt;&lt;p&gt;The replicat
      
    
    </summary>
    
      <category term="微服务理论文章阅读学习" scheme="https://jaychenfe.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%AE%BA%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>[译]Distributed systems for fun and profit_3时间和顺序</title>
    <link href="https://jaychenfe.github.io/2019/04/23/%5B%E8%AF%91%5DDistributed%20systems%20for%20fun%20and%20profit_3%E6%97%B6%E9%97%B4%E5%92%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>https://jaychenfe.github.io/2019/04/23/[译]Distributed systems for fun and profit_3时间和顺序/</id>
    <published>2019-04-23T17:32:04.000Z</published>
    <updated>2020-08-05T02:40:11.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三-Time-and-order-时间和顺序"><a href="#三-Time-and-order-时间和顺序" class="headerlink" title="三.Time and order 时间和顺序"></a>三.Time and order 时间和顺序</h1><p>What is order and why is it important?</p><p>What do you mean “what is order”?</p><p>I mean, why are we so obsessed with order in the first place? Why do we care whether A happened before B? Why don’t we care about some other property, like “color”?</p><p>Well, my crazy friend, let’s go back to the definition of distributed systems to answer that.</p><p>As you may remember, I described distributed programming as the art of solving the same problem that you can solve on a single computer using multiple computers.</p><p>This is, in fact, at the core of the obsession with order. Any system that can only do one thing at a time will create a total order of operations. Like people passing through a single door, every operation will have a well-defined predecessor and successor. That’s basically the programming model that we’ve worked very hard to preserve.</p><p>分布式系统的目标是能够让多台机器像单机一样处理问题。在这里面需要关注的核心是<strong>顺序</strong>。任何系统在同一时刻都只能做一件事情，这样就会产生一系列有顺序的操作。</p><p>The traditional model is: a single program, one process, one memory space running on one CPU. The operating system abstracts away the fact that there might be multiple CPUs and multiple programs, and that the memory on the computer is actually shared among many programs. I’m not saying that threaded programming and event-oriented programming don’t exist; it’s just that they are special abstractions on top of the “one/one/one” model. Programs are written to be executed in an ordered fashion: you start from the top, and then go down towards the bottom.</p><p>传统的模型是：单一程序利用一个CPU运行在一个进程和一个内存空间中。而分布式模型通常处理多个CPU和多个程序以及程序之间的内存通常需要共享。这个时候即使程序运行在多台机器之间，我们希望它也能像单机一样，同样顺序执行程序</p><p>Order as a property has received so much attention because the easiest way to define “correctness” is to say “it works like it would on a single machine”. And that usually means that a) we run the same operations and b) that we run them in the same order - even if there are multiple machines.</p><p>The nice thing about distributed systems that preserve order (as defined for a single system) is that they are generic. You don’t need to care about what the operations are, because they will be executed exactly like on a single machine. This is great because you know that you can use the same system no matter what the operations are.</p><p>In reality, a distributed program runs on multiple nodes; with multiple CPUs and multiple streams of operations coming in. You can still assign a total order, but it requires either accurate clocks or some form of communication. You could timestamp each operation using a completely accurate clock then use that to figure out the total order. Or you might have some kind of communication system that makes it possible to assign sequential numbers as in a total order.</p><p>分布式系统的好处在于一个定义好的顺序是通用的。你不需要担心它是如何操作的，无论你进行什么样的操作，你都可以使用这个系统。</p><p>分布式系统程序运行在多个节点之间。你需要分配一个全局顺序，需要精确的时钟与一些通信方式。你可以对每一个操作贴上一个时间戳，来保证它们全局有序，或者也可以采用某种通信方式（例如计数器），来确保它们全局有序</p><p>操作顺序包括：全局有序、偏序</p><h2 id="Total-and-partial-order-全局有序和偏序"><a href="#Total-and-partial-order-全局有序和偏序" class="headerlink" title="Total and partial order  全局有序和偏序"></a>Total and partial order  全局有序和偏序</h2><p>The natural state in a distributed system is <a href="http://en.wikipedia.org/wiki/Partially_ordered_set" target="_blank" rel="noopener">partial order</a>. Neither the network nor independent nodes make any guarantees about relative order; but at each node, you can observe a local order.</p><p>A <a href="http://en.wikipedia.org/wiki/Total_order" target="_blank" rel="noopener">total order</a> is a binary relation that defines an order for every element in some set.</p><ul><li><strong>全局有序：数据集中每一个元素顺序的一种二进制关系</strong></li><li><strong>偏序：分布式系统中最自然的状态就是偏序。独立节点与网络不能保证相关顺序，但在每个节点中，自身有本地顺序</strong></li></ul><p>Two distinct elements are <strong>comparable</strong> when one of them is greater than the other. In a partially ordered set, some pairs of elements are not comparable and hence a partial order doesn’t specify the exact order of every item.</p><p>两个明确的元素之间能够进行相互大小比较，但是在一个分区有序数据集中，不同区的元素之间是没法进行比较的，因为它们只在自己的分区中有序</p><p>Both total order and partial order are <a href="http://en.wikipedia.org/wiki/Transitive_relation" target="_blank" rel="noopener">transitive</a> and <a href="http://en.wikipedia.org/wiki/Antisymmetric_relation" target="_blank" rel="noopener">antisymmetric</a>. The following statements hold in both a total order and a partial order for all a, b and c in X:</p><p>无论是全局有序还是偏序，都遵从传递性（transitive）和反对称性（antisymmetric）。下面的描述表达了顺序具有的性质：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">If a ≤ b and b ≤ a then a = b (antisymmetry);</span><br><span class="line">If a ≤ b and b ≤ c then a ≤ c (transitivity);</span><br></pre></td></tr></table></figure><p>However, a total order is <a href="http://en.wikipedia.org/wiki/Total_relation" target="_blank" rel="noopener">total</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a ≤ b or b ≤ a (totality) for all a, b in X</span><br></pre></td></tr></table></figure><p>while a partial order is only <a href="http://en.wikipedia.org/wiki/Reflexive_relation" target="_blank" rel="noopener">reflexive</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a ≤ a (reflexivity) for all a in X</span><br></pre></td></tr></table></figure><p>Note that totality implies reflexivity; so a partial order is a weaker variant of total order.<br>For some elements in a partial order, the totality property does not hold - in other words, some of the elements are not comparable.</p><p>偏序（分区有序？可以这样理解吗）的性质比全局顺序的性质要弱，因为有些元素他们是没法进行比较的</p><p>Git branches are an example of a partial order. As you probably know, the git revision control system allows you to create multiple branches from a single base branch - e.g. from a master branch. Each branch represents a history of source code changes derived based on a common ancestor:</p><p><strong>Git分支就是偏序的一个实例</strong>。我们都知道git的版本控制能够让你从一个单一的基本分支中创造出多个分支。例如，从主分支中进行后续创建。每一个分支代表原始代码从最初到后面的变化历程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ branch A (1,2,0)]  [ master (3,0,0) ]  [ branch B (1,0,2) ]</span><br><span class="line">[ branch A (1,1,0)]  [ master (2,0,0) ]  [ branch B (1,0,1) ]</span><br><span class="line">                  \  [ master (1,0,0) ]  /</span><br></pre></td></tr></table></figure><p>The branches A and B were derived from a common ancestor, but there is no definite order between them: they represent different histories and cannot be reduced to a single linear history without additional work (merging). You could, of course, put all the commits in some arbitrary order (say, sorting them first by ancestry and then breaking ties by sorting A before B or B before A) - but that would lose information by forcing a total order where none existed.</p><p>这里分支A和B都来自于同一个祖先，但是它们两者之间的顺序是没有定义的：两者表示的是不同的历史版本，并且如若不经过其它额外操作，类似于merging，是无法将它们两者归到同一线性改变的版本中。当然你可以自己进行一些操作，定义提交的顺序，但如果自定义AB之间的顺序，会强制出现一个本来就不存在的total order</p><p>In a system consisting of one node, a total order emerges by necessity: instructions are executed and messages are processed in a specific, observable order in a single program. We’ve come to rely on this total order - it makes executions of programs predictable. This order can be maintained on a distributed system, but at a cost: communication is expensive, and time synchronization is difficult and fragile.</p><p>在一个有单一节点构成的系统中，全局有序是必要的，这使得程序的执行结果具有可预测性。这样的顺序也能在分布式系统中维持，但昂贵的通信成本以及时间同步的困难和脆弱性使得其代价十分昂贵</p><h1 id="What-is-time-时间"><a href="#What-is-time-时间" class="headerlink" title="What is time? 时间"></a>What is time? 时间</h1><p>Time is a source of order - it allows us to define the order of operations - which coincidentally also has an interpretation that people can understand (a second, a minute, a day and so on).</p><p>没有时间就没有顺序。时间能让我们确定操作的顺序，同时也能被更好的理解</p><p>In some sense, time is just like any other integer counter. It just happens to be important enough that most computers have a dedicated time sensor, also known as a clock. It’s so important that we’ve figured out how to synthesize an approximation of the same counter using some imperfect physical system (from wax candles to cesium atoms). By “synthesize”, I mean that we can approximate the value of the integer counter in physically distant places via some physical property without communicating it directly.</p><p>从某种角度而言，时间像计数器一样，能够让大多数的运算有自己专用的时间传感器。对于同步系统而言，我们能有一个不用互相通信就存在的精确的计数器</p><p>Timestamps really are a shorthand value for representing the state of the world from the start of the universe to the current moment - if something occurred at a particular timestamp, then it was potentially influenced by everything that happened before it. This idea can be generalized into a causal clock that explicitly tracks causes (dependencies) rather than simply assuming that everything that preceded a timestamp was relevant. Of course, the usual assumption is that we should only worry about the state of the specific system rather than the whole world.</p><p>时间戳是表达事物所处状态的一个简单的速记值。如果一件事发生在某一时刻，那么它受到发生在它之前的事件的影响。这个想法可以概括为一个因果时钟，它明确地跟踪原因（依赖性），而不是简单地假设时间戳之前的所有内容都是相关的。当然，通常的假设是，我们只应该担心特定系统的状态，而不是整个世界。</p><p>Assuming that time progresses at the same rate everywhere - and that is a big assumption which I’ll return to in a moment - time and timestamps have several useful interpretations when used in a program. The three interpretations are:</p><ul><li>Order</li><li>Duration</li><li>Interpretation</li></ul><p>假设时间在任何地方都以相同的速度进行——这是一个很大的假设，我稍后将回到这个假设——时间和时间戳在程序中使用时有几个有用的解释。这三种解释是：</p><ul><li><strong>顺序</strong></li><li><strong>持续时间</strong></li><li><strong>表现形式</strong></li></ul><p><em>Order</em>. When I say that time is a source of order, what I mean is that:</p><ul><li>we can attach timestamps to unordered events to order them</li><li>we can use timestamps to enforce a specific ordering of operations or the delivery of messages (for example, by delaying an operation if it arrives out of order)</li><li>we can use the value of a timestamp to determine whether something happened chronologically before something else</li></ul><p><strong>顺序</strong>：一系列事件发生的顺序</p><ul><li>我们能通过事件发生的时间戳来确定事件发生的顺序</li><li>我们能够利用时间戳来定义一系列操作的顺序，或者传递信息（例如，如果一个操作发生故障，则延迟它）</li><li>通过时间戳能够确定一件事是否发生在另一件事前</li></ul><p><em>Interpretation</em> - time as a universally comparable value. The absolute value of a timestamp can be interpreted as a date, which is useful for people. Given a timestamp of when a downtime started from a log file, you can tell that it was last Saturday, when there was a <a href="https://twitter.com/AWSFail/statuses/218915147060752384" target="_blank" rel="noopener">thunderstorm</a>.</p><p><strong>表现形式</strong>：时间是一个可以进行全局比较的值。时间的表现形式可以有多种，比如日期、星期几等等</p><p><em>Duration</em> - durations measured in time have some relation to the real world. Algorithms generally don’t care about the absolute value of a clock or its interpretation as a date, but they might use durations to make some judgment calls. In particular, the amount of time spent waiting can provide clues about whether a system is partitioned or merely experiencing high latency.</p><p><strong>持续时间</strong>：通过时间段长短可以来判断系统是发生分区还是发生了高延迟</p><p>By their nature, the components of distributed systems do not behave in a predictable manner. They do not guarantee any specific order, rate of advance, or lack of delay. Each node does have some local order - as execution is (roughly) sequential - but these local orders are independent of each other.</p><p>Imposing (or assuming) order is one way to reduce the space of possible executions and possible occurrences. Humans have a hard time reasoning about things when things can happen in any order - there just are too many permutations to consider.</p><p>强制（或假定）顺序是减少可能执行和发生的空间的一种方法。当事情可以以任何顺序发生时，有太多的排列需要考虑，因而很难对事情进行推理。</p><h2 id="Does-time-progress-at-the-same-rate-everywhere-各个分布式节点中时间相同吗？"><a href="#Does-time-progress-at-the-same-rate-everywhere-各个分布式节点中时间相同吗？" class="headerlink" title="Does time progress at the same rate everywhere?各个分布式节点中时间相同吗？"></a>Does time progress at the same rate everywhere?各个分布式节点中时间相同吗？</h2><p>We all have an intuitive concept of time based on our own experience as individuals. Unfortunately, that intuitive notion of time makes it easier to picture total order rather than partial order. It’s easier to picture a sequence in which things happen one after another, rather than concurrently. It is easier to reason about a single order of messages than to reason about messages arriving in different orders and with different delays.</p><p>依据个人经验，我们都有一个直观的时间概念。但直观的时间概念使我们更容易描绘出总顺序而不是部分顺序。更容易想象事情发生的顺序，一个接一个，而不是同时发生。对一个消息顺序进行推理要比对以不同顺序和不同延迟到达的消息进行推理容易得多。（<strong>通常一串连续发生的事件比同时发生要更容易理解</strong>）</p><p>However, when implementing distributing systems we want to avoid making strong assumptions about time and order, because the stronger the assumptions, the more fragile a system is to issues with the “time sensor” - or the onboard clock. Furthermore, imposing an order carries a cost. The more temporal nondeterminism that we can tolerate, the more we can take advantage of distributed computation.</p><p>然而，在实施分布式系统时，我们希望避免对时间和顺序做出强有力的假设，因为假设越强，系统就越容易受到“时间传感器”或时钟的问题的影响。此外，执行命令也会带来成本。我们越能容忍时间上的不确定性，就越能利用分布式计算。（<strong>分布式系统中关于“时间传感器”的定义和假设相较而言没那么刻板。对时间的不确定性容忍度约稿，对于系统的分布式计算更有利</strong>）</p><p>There are three common answers to the question “does time progress at the same rate everywhere?”. These are:</p><ul><li>“Global clock”: yes</li><li>“Local clock”: no, but</li><li>“No clock”: no!</li></ul><p>对于分布式节点中的时间是否同步，使用不同的时钟假设是不同的：</p><ul><li><strong>全局时钟：相同 （同步系统模型）</strong></li><li><strong>本地时钟：不同，但是本地有序 （部分同步系统模型）</strong></li><li><strong>不使用时钟：不同 （异步系统模型，用逻辑时钟来确定顺序）</strong></li></ul><p>These correspond roughly to the three timing assumptions that I mentioned in the second chapter: the synchronous system model has a global clock, the partially synchronous model has a local clock, and in the asynchronous system model one cannot use clocks at all. Let’s look at these in more detail.</p><h3 id="Time-with-a-“global-clock”-assumption-全局时钟"><a href="#Time-with-a-“global-clock”-assumption-全局时钟" class="headerlink" title="Time with a “global-clock” assumption 全局时钟"></a>Time with a “global-clock” assumption 全局时钟</h3><p>The global clock assumption is that there is a global clock of perfect accuracy, and that everyone has access to that clock. This is the way we tend to think about time, because in human interactions small differences in time don’t really matter.</p><p>全局时钟：有一个全局精确的时钟，并且每个节点都能接触到</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190425230612.png" alt=""></p><p>The global clock is basically a source of total order (exact order of every operation on all nodes even if those nodes have never communicated).</p><p>However, this is an idealized view of the world: in reality, clock synchronization is only possible to a limited degree of accuracy. This is limited by the lack of accuracy of clocks in commodity computers, by latency if a clock synchronization protocol such as <a href="http://en.wikipedia.org/wiki/Network_Time_Protocol" target="_blank" rel="noopener">NTP</a> is used and fundamentally by <a href="http://en.wikipedia.org/wiki/Time_dilation" target="_blank" rel="noopener">the nature of spacetime</a>.</p><p>Assuming that clocks on distributed nodes are perfectly synchronized means assuming that clocks start at the same value and never drift apart. It’s a nice assumption because you can use timestamps freely to determine a global total order - bound by clock drift rather than latency - but this is a <a href="http://queue.acm.org/detail.cfm?id=1773943" target="_blank" rel="noopener">nontrivial</a> operational challenge and a potential source of anomalies. There are many different scenarios where a simple failure - such as a user accidentally changing the local time on a machine, or an out-of-date machine joining a cluster, or synchronized clocks drifting at slightly different rates and so on that can cause hard-to-trace anomalies.</p><p>Nevertheless, there are some real-world systems that make this assumption. Facebook’s <a href="http://en.wikipedia.org/wiki/Apache_Cassandra" target="_blank" rel="noopener">Cassandra</a> is an example of a system that assumes clocks are synchronized. It uses timestamps to resolve conflicts between writes - the write with the newer timestamp wins. This means that if clocks drift, new data may be ignored or overwritten by old data; again, this is an operational challenge (and from what I’ve heard, one that people are acutely aware of). Another interesting example is Google’s <a href="http://research.google.com/archive/spanner.html" target="_blank" rel="noopener">Spanner</a>: the paper describes their TrueTime API, which synchronizes time but also estimates worst-case clock drift.</p><p>全局时钟的存在使在任何节点上的操作都按照一定的顺序执行，即便这些节点之间不发生通信交互</p><p>但在现实世界中，时钟同步只能存在于能容忍一定程度上的不精确的系统中。因为由于空间分布的原因而存在的延迟。</p><p>假设时钟在分布式节点中完美同步的话，说明时间都是从同一个值开始计时，并且永远不会不一样。这样一来的话使用时间戳的话就能完美的保证全局顺序。但是通常会有异常现象存在，但针对这些异常，也会有相应的处理方案</p><p>然而，现实中有一些系统使用的是全局时钟假设。比如Facebook的Cassandra系统。它使用时间戳来解决写的冲突，最新的版本胜出。另一个例子Google的Spanner，它的时钟也是同步的，但同时考虑了最坏情况下的时钟漂移</p><h3 id="Time-with-a-“Local-clock”-assumption-本地时钟"><a href="#Time-with-a-“Local-clock”-assumption-本地时钟" class="headerlink" title="Time with a “Local-clock” assumption  本地时钟"></a>Time with a “Local-clock” assumption  本地时钟</h3><p>The second, and perhaps more plausible assumption is that each machine has its own clock, but there is no global clock. It means that you cannot use the local clock in order to determine whether a remote timestamp occurred before or after a local timestamp; in other words, you cannot meaningfully compare timestamps from two different machines.</p><p>更合理的情况是，每一个机器上有自己的时钟，但是不存在全局时钟。即你能通过本地时间戳来确定本地事件发生顺序，但是不能对不同机器间的时间戳进行比较</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190425231027.png" alt=""></p><p>The local clock assumption corresponds more closely to the real world. It assigns a partial order: events on each system are ordered but events cannot be ordered across systems by only using a clock.</p><p>本地时钟的假设最符合真实世界的情况。它表明时间在每一个独立的分区上能够有序，但是在所有的系统中仅仅靠时钟来并不能保证事件的顺序</p><p>However, you can use timestamps to order events on a single machine; and you can use timeouts on a single machine as long as you are careful not to allow the clock to jump around. Of course, on a machine controlled by an end-user this is probably assuming too much: for example, a user might accidentally change their date to a different value while looking up a date using the operating system’s date control.</p><h3 id="Time-with-a-“No-clock”-assumption-无时钟"><a href="#Time-with-a-“No-clock”-assumption-无时钟" class="headerlink" title="Time with a “No-clock” assumption 无时钟"></a>Time with a “No-clock” assumption 无时钟</h3><p>Finally, there is the notion of logical time. Here, we don’t use clocks at all and instead track causality in some other way. Remember, a timestamp is simply a shorthand for the state of the world up to that point - so we can use counters and communication to determine whether something happened before, after or concurrently with something else.</p><p>这里存在一个逻辑时间的概念。不在使用时钟来追寻时间发生的因果顺序，而是通过另一种其它的方式-<strong>计数器和通信</strong></p><p>This way, we can determine the order of events between different machines, but cannot say anything about intervals and cannot use timeouts (since we assume that there is no “time sensor”). This is a partial order: events can be ordered on a single system using a counter and no communication, but ordering events across systems requires a message exchange.</p><p>通过这种方式，我们能对不同机器上发生的事件的顺序进行比较，但是没法使用关于时间间隔以及超时设置的变量了（即不存在时间传感器了）。这从某种角度而言也是一种局部有序的情况：时间在单系统中能够使用计数器并且不用进行通信来保证事件顺序，但是在多系统之间就需要进行信息交换</p><p>One of the most cited papers in distributed systems is Lamport’s paper on <a href="http://research.microsoft.com/users/lamport/pubs/time-clocks.pdf" target="_blank" rel="noopener">time, clocks and the ordering of events</a>. Vector clocks, a generalization of that concept (which I will cover in more detail), are a way to track causality without using clocks. Cassandra’s cousins Riak (Basho) and Voldemort (Linkedin) use vector clocks rather than assuming that nodes have access to a global clock of perfect accuracy. This allows those systems to avoid the clock accuracy issues mentioned earlier.</p><p>When clocks are not used, the maximum precision at which events can be ordered across distant machines is bound by communication latency.</p><p><strong>矢量钟就是一种不利用真正的时间来进行时间顺序因果追寻的方式</strong>。后面会进行详细介绍</p><h2 id="How-is-time-used-in-a-distributed-system-分布式系统中时间的作用"><a href="#How-is-time-used-in-a-distributed-system-分布式系统中时间的作用" class="headerlink" title="How is time used in a distributed system?分布式系统中时间的作用"></a>How is time used in a distributed system?分布式系统中时间的作用</h2><p>What is the benefit of time?</p><ol><li>Time can define order across a system (without communication)</li><li>Time can define boundary conditions for algorithms</li></ol><p><strong>时间的作用：</strong></p><ul><li><strong>能够定义系统中事件的顺序（不需要通信）</strong></li><li><strong>能够定义算法的边界条件（故障检测器）</strong></li></ul><p>The order of events is important in distributed systems, because many properties of distributed systems are defined in terms of the order of operations/events:</p><ul><li>where correctness depends on (agreement on) correct event ordering, for example serializability in a distributed database</li><li>order can be used as a tie breaker when resource contention occurs, for example if there are two orders for a widget, fulfill the first and cancel the second one</li></ul><p>在分布式系统中，确定事件发生的顺序是很重要的，因为许多操作是需要顺序进行的</p><ul><li><strong>系统的正确性取决于正确的时间顺序</strong></li><li><strong>当资源发生竞争时，顺序能够作为评判标准</strong></li></ul><p>A global clock would allow operations on two different machines to be ordered without the two machines communicating directly. Without a global clock, we need to communicate in order to determine order.</p><p>一个全局时钟能够允许两个机器上的操作有序进行并且不需要通信。但一旦没有全局时钟，我们就需要进行通信来确定不同机器上操作的顺序</p><p>Time can also be used to define boundary conditions for algorithms - specifically, to distinguish between “high latency” and “server or network link is down”. This is a very important use case; in most real-world systems timeouts are used to determine whether a remote machine has failed, or whether it is simply experiencing high network latency. Algorithms that make this determination are called failure detectors; and I will discuss them fairly soon.</p><p>时间也可以用来定义算法的边界条件，比如，判定系统到底是发生了“高延迟”还是出现了“服务或者网络的宕机”。用来做这个判断的算法被称为是故障检测器，后面会进行讨论</p><h2 id="Vector-clocks-time-for-causal-order-矢量时钟"><a href="#Vector-clocks-time-for-causal-order-矢量时钟" class="headerlink" title="Vector clocks (time for causal order) 矢量时钟"></a>Vector clocks (time for causal order) 矢量时钟</h2><p>Earlier, we discussed the different assumptions about the rate of progress of time across a distributed system. Assuming that we cannot achieve accurate clock synchronization - or starting with the goal that our system should not be sensitive to issues with time synchronization, how can we order things?</p><p>前面我们讨论了分布式系统中不同的时间假设。如果我们没法获得精确的时钟同步的话，那么如何保证分布式系统中事件有序呢？</p><p>Lamport clocks and vector clocks are replacements for physical clocks which rely on counters and communication to determine the order of events across a distributed system. These clocks provide a counter that is comparable across different nodes.</p><p><strong>Lamport clocks</strong>和<strong>矢量时钟</strong>能够代替物理时钟来进行保证系统有序。通过<strong>计数器</strong>+<strong>通信</strong>来决定事件顺序</p><p><em>A Lamport clock</em> is simple. Each process maintains a counter using the following rules:</p><ul><li>Whenever a process does work, increment the counter</li><li>Whenever a process sends a message, include the counter</li><li>When a message is received, set the counter to <code>max(local_counter, received_counter) + 1</code></li></ul><h4 id="Lamport-clock"><a href="#Lamport-clock" class="headerlink" title="Lamport clock"></a>Lamport clock</h4><p>Lamport clock很简单，每一个进程都有一个计数器，服从下面的规则：</p><ul><li><strong>一旦一个进程开始工作，计数器递增</strong></li><li><strong>任何进程发送的消息中，包含计数器的值</strong></li><li><strong>当一个消息被接收时，更新计数器的值为max（本地，接收）+1</strong></li></ul><p>Expressed as code: 用代码表示的话:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LamportClock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LamportClock.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LamportClock.prototype.increment = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LamportClock.prototype.merge = <span class="function"><span class="keyword">function</span>(<span class="params">other</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.value, other.value) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A <a href="http://en.wikipedia.org/wiki/Lamport_timestamps" target="_blank" rel="noopener">Lamport clock</a> allows counters to be compared across systems, with a caveat: Lamport clocks define a partial order. If <code>timestamp(a) &lt; timestamp(b)</code>:</p><ul><li><code>a</code> may have happened before <code>b</code> or</li><li><code>a</code> may be incomparable with <code>b</code></li></ul><p>Lamport clock允许使用计数器来比较事件发生的顺序，比如如果 <code>timestamp(a) &lt; timestamp(b)</code>：</p><ul><li>a可能在b之前发生</li><li>a可能b无法和b比较</li></ul><p>This is known as clock consistency condition: if one event comes before another, then that event’s logical clock comes before the others. If <code>a</code> and <code>b</code> are from the same causal history, e.g. either both timestamp values were produced on the same process; or <code>b</code> is a response to the message sent in <code>a</code> then we know that <code>a</code> happened before <code>b</code>.</p><p>这和时钟的一致性一样，如果一件事发生在另一件事之前，那么它的逻辑时钟也发生在这件事之前。如果事件a和事件b都是从同一个历史中演化而来的，那么如果a&lt;b，a一定发生在b之前</p><p>Intuitively, this is because a Lamport clock can only carry information about one timeline / history; hence, comparing Lamport timestamps from systems that never communicate with each other may cause concurrent events to appear to be ordered when they are not.</p><p>使用Lamport时钟也有一个缺点，因为它只包含了一个时间线的计数信息，那么同步发生的事情在这个时钟下仍然可比，即表现出有序性，但本质上，他们是同步的，不应该表现出有序性</p><p>Imagine a system that after an initial period divides into two independent subsystems which never communicate with each other.</p><p>For all events in each independent system, if a happened before b, then <code>ts(a) &lt; ts(b)</code>; but if you take two events from the different independent systems (e.g. events that are not causally related) then you cannot say anything meaningful about their relative order.  While each part of the system has assigned timestamps to events, those timestamps have no relation to each other. Two events may appear to be ordered even though they are unrelated.</p><p>However - and this is still a useful property - from the perspective of a single machine, any message sent with <code>ts(a)</code> will receive a response with <code>ts(b)</code> which is <code>&gt; ts(a)</code>.</p><p><em>A vector clock</em> is an extension of Lamport clock, which maintains an array <code>[ t1, t2, ... ]</code> of N logical clocks - one per each node. Rather than incrementing a common counter, each node increments its own logical clock in the vector by one on each internal event. Hence the update rules are:</p><ul><li>Whenever a process does work, increment the logical clock value of the node in the vector</li><li>Whenever a process sends a message, include the full vector of logical clocks</li><li>When a message is received:<ul><li>update each element in the vector to be <code>max(local, received)</code></li><li>increment the logical clock value representing the current node in the vector</li></ul></li></ul><h4 id="vector-clock矢量时钟"><a href="#vector-clock矢量时钟" class="headerlink" title="vector clock矢量时钟"></a>vector clock矢量时钟</h4><p>矢量时钟是Lamport clock的一个衍生，它包含了一个含有N个节点计数器值的计数器列表 [t1,t2,…]，每一个节点递增他们自己的逻辑时钟（计数器的值），规则如下：</p><ul><li><strong>一旦一个进程开始工作，矢量钟中的关于该进程节点上的计数器值递增</strong></li><li><strong>任何进程发送的消息中，包含矢量计数器列表</strong></li><li><strong>当一个消息被接收时：</strong><ul><li>更新矢量</li><li>递增矢量中代表当前节点的逻辑时钟的计数器值</li></ul></li></ul><p>Again, expressed as code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VectorClock</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// expressed as a hash keyed by node id: e.g. &#123; node1: 1, node2: 3 &#125;</span></span><br><span class="line">  <span class="keyword">this</span>.value = value || &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VectorClock.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">VectorClock.prototype.increment = <span class="function"><span class="keyword">function</span>(<span class="params">nodeId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.value[nodeId] == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value[nodeId] = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.value[nodeId]++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">VectorClock.prototype.merge = <span class="function"><span class="keyword">function</span>(<span class="params">other</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;, last,</span><br><span class="line">      a = <span class="keyword">this</span>.value,</span><br><span class="line">      b = other.value;</span><br><span class="line">  <span class="comment">// This filters out duplicate keys in the hash</span></span><br><span class="line">  (<span class="built_in">Object</span>.keys(a)</span><br><span class="line">    .concat(b))</span><br><span class="line">    .sort()</span><br><span class="line">    .filter(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> isDuplicate = (key == last);</span><br><span class="line">      last = key;</span><br><span class="line">      <span class="keyword">return</span> !isDuplicate;</span><br><span class="line">    &#125;).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      result[key] = <span class="built_in">Math</span>.max(a[key] || <span class="number">0</span>, b[key] || <span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">this</span>.value = result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>This illustration (<a href="http://en.wikipedia.org/wiki/Vector_clock" target="_blank" rel="noopener">source</a>) shows a vector clock : 下图也能表示矢量钟：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190429224307.png" alt=""></p><p>Each of the three nodes (A, B, C) keeps track of the vector clock. As events occur, they are timestamped with the current value of the vector clock. Examining a vector clock such as <code>{ A: 2, B: 4, C: 1 }</code> lets us accurately identify the messages that (potentially) influenced that event.</p><p>The issue with vector clocks is mainly that they require one entry per node, which means that they can potentially become very large for large systems. A variety of techniques have been applied to reduce the size of vector clocks (either by performing periodic garbage collection, or by reducing accuracy by limiting the size).</p><p>We’ve looked at how order and causality can be tracked without physical clocks. Now, let’s look at how time durations can be used for cutoff.</p><p>上图对ABC三个节点的矢量钟进行了一个追踪。可以发现当一个事件发生后，矢量钟对每个节点目前的情况打上了一个时间戳的标记，随着事件发生，计数器的值进行改变。从矢量值中可以对事件发生的顺序进行判断 </p><p><strong>总结：</strong></p><ul><li><strong>Lamport clock每个节点上维护一个计数器值，每次通信对这个值进行更新</strong></li><li><strong>vector clock每个节点上维护一个计数器列表，每次通信对这个列表进行更新</strong></li></ul><h2 id="Failure-detectors-time-for-cutoff-故障检测器"><a href="#Failure-detectors-time-for-cutoff-故障检测器" class="headerlink" title="Failure detectors (time for cutoff) 故障检测器"></a>Failure detectors (time for cutoff) 故障检测器</h2><p>As I stated earlier, the amount of time spent waiting can provide clues about whether a system is partitioned or merely experiencing high latency. In this case, we don’t need to assume a global clock of perfect accuracy - it is simply enough that there is a reliable-enough local clock.</p><p>前面说过，等待花费的时长能够用来作为一个判断系统到底是发生了分区故障，还是高延迟的一种线索。在这里，我们不需要假设有一个精确的全局时钟，仅仅有一个可信赖的本地时钟就足够了</p><p>Given a program running on one node, how can it tell that a remote node has failed? In the absence of accurate information, we can infer that an unresponsive remote node has failed after some reasonable amount of time has passed.</p><p>But what is a “reasonable amount”? This depends on the latency between the local and remote nodes. Rather than explicitly specifying algorithms with specific values (which would inevitably be wrong in some cases), it would be nicer to deal with a suitable abstraction.</p><p>一个节点上运行一个程序，如果运行的信息延迟的时间到达一定的时长的话，我们就认为这个节点发生了故障。但是这个时长改如何定义呢？</p><p>A failure detector is a way to abstract away the exact timing assumptions. Failure detectors are implemented using heartbeat messages and timers. Processes exchange heartbeat messages. If a message response is not received before the timeout occurs, then the process suspects the other process.</p><p>A failure detector based on a timeout will carry the risk of being either overly aggressive (declaring a node to have failed) or being overly conservative (taking a long time to detect a crash). How accurate do failure detectors need to be for them to be usable?</p><p><strong>故障检测器是一种抽象的方法：心跳信息+定时器</strong></p><p>进程间交换心跳信息，如果一个进程在超时前没有收到响应信息，那么这个进程会怀疑其它进程</p><p>一个基于超时而言的故障检测器通常要么会过度检测（轻易断言一个节点发生故障），要么检测会过于保守（花费很长的等待时间来判断故障）。那么一个如何使用故障检测器使得它发挥出好的作用呢？</p><p><a href="http://www.google.com/search?q=Unreliable%20Failure%20Detectors%20for%20Reliable%20Distributed%20Systems" target="_blank" rel="noopener">Chandra et al.</a> (1996) discuss failure detectors in the context of solving consensus - a problem that is particularly relevant since it underlies most replication problems where the replicas need to agree in environments with latency and network partitions.</p><p>They characterize failure detectors using two properties, completeness and accuracy:</p><blockquote><p><strong>Strong completeness.</strong><br>Every crashed process is eventually suspected by every correct process.</p><p><strong>Weak completeness.</strong><br>Every crashed process is eventually suspected by some correct process.</p><p><strong>Strong accuracy.</strong><br>No correct process is suspected ever.</p><p><strong>Weak accuracy.</strong><br>Some correct process is never suspected.</p></blockquote><p>有人用两个属性（完整性、精确性）将故障检测器进行了描述：</p><p><strong>强完整性</strong>：每个故障的进程都会被任何正确的进程怀疑<br><strong>弱完整性</strong>：每个故障的进程会被一部分正确的进程怀疑<br><strong>强精确性</strong>：没有正确的进程会被怀疑<br><strong>弱精确性</strong>：一些正确的进程也会被怀疑</p><p>Completeness is easier to achieve than accuracy; indeed, all failure detectors of importance achieve it - all you need to do is not to wait forever to suspect someone. Chandra et al. note that a failure detector with weak completeness can be transformed to one with strong completeness (by broadcasting information about suspected processes), allowing us to concentrate on the spectrum of accuracy properties.</p><p>完整性比精确性更容易实现。并且一个弱完整性的故障检测器能够转换成强完整性的故障检测器（通过广播被怀疑的进程的消息）</p><p>Avoiding incorrectly suspecting non-faulty processes is hard unless you are able to assume that there is a hard maximum on the message delay. That assumption can be made in a synchronous system model - and hence failure detectors can be strongly accurate in such a system. Under system models that do not impose hard bounds on message delay, failure detection can at best be eventually accurate.</p><p>通常对一个没有发生故障的进程进行错误的怀疑是无法避免的，因为你不知道消息延迟的上限是多少。但是在同步系统中，这个消息延迟的上限是固定的，因此在同步系统中使用故障检测器是非常精确的。</p><p>Chandra et al. show that even a very weak failure detector - the eventually weak failure detector ⋄W (eventually weak accuracy + weak completeness) - can be used to solve the consensus problem. The diagram below (from the paper) illustrates the relationship between system models and problem solvability:</p><p>研究表明即使是一个弱故障检测器（最终故障检测器），也能用来解决一致性问题。下图阐述了系统模型和问题可解性之间的关系：</p><p><img src="https://raw.githubusercontent.com/JayChenFE/pic/master/20190429225320.png" alt=""></p><p>As you can see above, certain problems are not solvable without a failure detector in asynchronous systems. This is because without a failure detector (or strong assumptions about time bounds e.g. the synchronous system model), it is not possible to tell whether a remote node has crashed, or is simply experiencing high latency. That distinction is important for any system that aims for single-copy consistency: failed nodes can be ignored because they cannot cause divergence, but partitioned nodes cannot be safely ignored.</p><p>从上图可以看到，异步系统中，不使用故障检测器是无法对明确的问题进行解决的。因为，如果没有故障检测器，你无法得知一个远方的节点是否发生故障，或是因为高延迟的存在。这个判断对于单拷贝一致性的系统来说非常重要：故障节点会被忽略，因为它们不会带来分歧，但是分区节点不能被忽略，因为可能会造成数据分歧</p><p>How can one implement a failure detector? Conceptually, there isn’t much to a simple failure detector, which simply detects failure when a timeout expires. The most interesting part relates to how the judgments are made about whether a remote node has failed.</p><p>怎样实施一个故障检测器呢？事实上，不存在一个很简单的故障检测器，因为判断一个节点是否发生故障时很难的</p><p>Ideally, we’d prefer the failure detector to be able to adjust to changing network conditions and to avoid hardcoding timeout values into it. For example, Cassandra uses an <a href="https://www.google.com/search?q=The+Phi+accrual+failure+detector" target="_blank" rel="noopener">accrual failure detector</a>, which is a failure detector that outputs a suspicion level (a value between 0 and 1) rather than a binary “up” or “down” judgment. This allows the application using the failure detector to make its own decisions about the tradeoff between accurate detection and early detection.</p><p>依赖超时设置的值来判断是否发生故障。Cassandra它使用的是一个精确的故障检测器，它给出的故障判断是一个猜测值（0-1间，概率值）而不是一个二进制的数（0、1），这样一来，系统应用能够根据自己的定义来判断节点是否发生故障，进行一个无误检测和超前检测的权衡</p><h2 id="Time-order-and-performance-时间、顺序和性能"><a href="#Time-order-and-performance-时间、顺序和性能" class="headerlink" title="Time, order and performance 时间、顺序和性能"></a>Time, order and performance 时间、顺序和性能</h2><p>Earlier, I alluded to having to pay the cost for order. What did I mean?</p><p>If you’re writing a distributed system, you presumably own more than one computer. The natural (and realistic) view of the world is a partial order, not a total order. You can transform a partial order into a total order, but this requires communication, waiting and imposes restrictions that limit how many computers can do work at any particular point in time.</p><p>如果你在设计一个分布式系统，你肯定拥有不止一台的计算机。那么从直观的角度来看，顺序是分区有序的而并非全局有序。你能够通过通信的方式，使得分区有序转变成全局有序，但是这通常还需要等待以及受到任意同一时刻能够有多少节点进行同时工作的限制</p><p>All clocks are mere approximations bound by either network latency (logical time) or by physics. Even keeping a simple integer counter in sync across multiple nodes is a challenge.</p><p>就最简单的保持一个简单的整数计数器在分布节点上同步都很有挑战性</p><p>While time and order are often discussed together, time itself is not such a useful property. Algorithms don’t really care about time as much as they care about more abstract properties:</p><ul><li>the causal ordering of events</li><li>failure detection (e.g. approximations of upper bounds on message delivery)</li><li>consistent snapshots (e.g. the ability to examine the state of a system at some point in time; not discussed here)</li></ul><p>事实上，算法通常不在乎时间，而是在乎顺序：</p><ul><li>事件发生的原因顺序</li><li>故障检测器</li><li>一致快照</li></ul><p>Imposing a total order is possible, but expensive. It requires you to proceed at the common (lowest) speed. Often the easiest way to ensure that events are delivered in some defined order is to nominate a single (bottleneck) node through which all operations are passed.</p><p>全局一致是可以实现的，但是代价很大，它要求所有的处理在相同的速度条件下。一个最简单的方法是：投票，选出一个经过了所有操作的节点出来</p><p>Is time / order / synchronicity really necessary? It depends. In some use cases, we want each intermediate operation to move the system from one consistent state to another. For example, in many cases we want the responses from a database to represent all of the available information, and we want to avoid dealing with the issues that might occur if the system could return an inconsistent result.</p><p>时间/顺序/同步真的有必要吗？这取决于你的案例。比如在一些用户案例中，我们想要每一次的操作都能让系统从一个一致性的转态转到另一个一致性的状态。举个例子：在数据库中，我们想要从数据库中找到能代表所有可用的信息，同时我们想避免处理系统返回不一致的结果所带来的问题。</p><p>But in other cases, we might not need that much time / order / synchronization. For example, if you are running a long running computation, and don’t really care about what the system does until the very end - then you don’t really need much synchronization as long as you can guarantee that the answer is correct.</p><p>但是在其他的一些例子中，我们可能不需要时间/顺序/同步。比如，我们想进行一个很长的计算操作，只要能保证最后的结果是正确的，我们并不关心这些运算是否同步发生</p><p>Synchronization is often applied as a blunt tool across all operations, when only a subset of cases actually matter for the final outcome. When is order needed to guarantee correctness? The CALM theorem - which I will discuss in the last chapter - provides one answer.</p><p>同步性通常是用来做为操作的限制工具的，仅仅当我们的结果只是收到一部分数据集的影响的时候才需要。顺序什么时候保证系统的可用性-这涉及到我们之后讨论的CALM理论</p><p>In other cases, it is acceptable to give an answer that only represents the best known estimate - that is, is based on only a subset of the total information contained in the system. In particular, during a network partition one may need to answer queries with only a part of the system being accessible. In other use cases, the end user cannot really distinguish between a relatively recent answer that can be obtained cheaply and one that is guaranteed to be correct and is expensive to calculate. For example, is the Twitter follower count for some user X, or X+1? Or are movies A, B and C the absolutely best answers for some query? Doing a cheaper, mostly correct “best effort” can be acceptable.</p><p>In the next two chapters we’ll examine replication for fault-tolerant strongly consistent systems - systems which provide strong guarantees while being increasingly resilient to failures. These systems provide solutions for the first case: when you need to guarantee correctness and are willing to pay for it. Then, we’ll discuss systems with weak consistency guarantees, which can remain available in the face of partitions, but that can only give you a “best effort” answer.</p><p>还有另一些例子中，我们能够接受那些尽力而为的答案作为我们系统的最后结果。这会涉及到一致性问题</p><ul><li><strong>强一致性：保证准确性但付出可用性低的代价</strong></li><li><strong>弱一致性：保证系统可用性，但要只能告诉你“best effort”(尽力了)</strong></li></ul><hr><h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h2><h3 id="Lamport-clocks-vector-clocks"><a href="#Lamport-clocks-vector-clocks" class="headerlink" title="Lamport clocks, vector clocks"></a>Lamport clocks, vector clocks</h3><ul><li><a href="http://research.microsoft.com/users/lamport/pubs/time-clocks.pdf" target="_blank" rel="noopener">Time, Clocks and Ordering of Events in a Distributed System</a> - Leslie Lamport, 1978</li></ul><h3 id="Failure-detection"><a href="#Failure-detection" class="headerlink" title="Failure detection"></a>Failure detection</h3><ul><li><a href="http://scholar.google.com/scholar?q=Unreliable+Failure+Detectors+for+Reliable+Distributed+Systems" target="_blank" rel="noopener">Unreliable failure detectors and reliable distributed systems</a> - Chandra and Toueg</li><li><a href="http://www.cs.cornell.edu/people/egs/sqrt-s/doc/TR2006-2025.pdf" target="_blank" rel="noopener">Latency- and Bandwidth-Minimizing Optimal Failure Detectors</a> - So &amp; Sirer, 2007</li><li><a href="http://scholar.google.com/scholar?q=The+failure+detector+abstraction" target="_blank" rel="noopener">The failure detector abstraction</a>, Freiling, Guerraoui &amp; Kuznetsov, 2011</li></ul><h3 id="Snapshots"><a href="#Snapshots" class="headerlink" title="Snapshots"></a>Snapshots</h3><ul><li><a href="http://scholar.google.com/scholar?q=Consistent+global+states+of+distributed+systems%3A+Fundamental+concepts+and+mechanisms" target="_blank" rel="noopener">Consistent global states of distributed systems: Fundamental concepts and mechanisms</a>, Ozalp Babaogly and Keith Marzullo, 1993</li><li><a href="http://scholar.google.com/scholar?q=Distributed+snapshots%3A+Determining+global+states+of+distributed+systems" target="_blank" rel="noopener">Distributed snapshots: Determining global states of distributed systems</a>, K. Mani Chandy and Leslie Lamport, 1985</li></ul><h3 id="Causality"><a href="#Causality" class="headerlink" title="Causality"></a>Causality</h3><ul><li><a href="http://www.vs.inf.ethz.ch/publ/papers/holygrail.pdf" target="_blank" rel="noopener">Detecting Causal Relationships in Distributed Computations: In Search of the Holy Grail</a> - Schwarz &amp; Mattern, 1994</li><li><a href="http://scholar.google.com/scholar?q=Understanding+the+limitations+of+causally+and+totally+ordered+communication" target="_blank" rel="noopener">Understanding the Limitations of Causally and Totally Ordered Communication</a> - Cheriton &amp; Skeen, 1993</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;三-Time-and-order-时间和顺序&quot;&gt;&lt;a href=&quot;#三-Time-and-order-时间和顺序&quot; class=&quot;headerlink&quot; title=&quot;三.Time and order 时间和顺序&quot;&gt;&lt;/a&gt;三.Time and order 时间和
      
    
    </summary>
    
      <category term="微服务理论文章阅读学习" scheme="https://jaychenfe.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%AE%BA%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
</feed>
